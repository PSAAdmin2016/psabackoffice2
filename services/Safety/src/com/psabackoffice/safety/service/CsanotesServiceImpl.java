/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.safety.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.safety.Csanotes;


/**
 * ServiceImpl object for domain model class Csanotes.
 *
 * @see Csanotes
 */
@Service("Safety.CsanotesService")
public class CsanotesServiceImpl implements CsanotesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsanotesServiceImpl.class);


    @Autowired
    @Qualifier("Safety.CsanotesDao")
    private WMGenericDao<Csanotes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Csanotes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SafetyTransactionManager")
    @Override
	public Csanotes create(Csanotes csanotes) {
        LOGGER.debug("Creating a new Csanotes with information: {}", csanotes);
        Csanotes csanotesCreated = this.wmGenericDao.create(csanotes);
        return csanotesCreated;
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public Csanotes getById(Integer csanotesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Csanotes by id: {}", csanotesId);
        Csanotes csanotes = this.wmGenericDao.findById(csanotesId);
        if (csanotes == null){
            LOGGER.debug("No Csanotes found with id: {}", csanotesId);
            throw new EntityNotFoundException(String.valueOf(csanotesId));
        }
        return csanotes;
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public Csanotes findById(Integer csanotesId) {
        LOGGER.debug("Finding Csanotes by id: {}", csanotesId);
        return this.wmGenericDao.findById(csanotesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SafetyTransactionManager")
	@Override
	public Csanotes update(Csanotes csanotes) throws EntityNotFoundException {
        LOGGER.debug("Updating Csanotes with information: {}", csanotes);
        this.wmGenericDao.update(csanotes);

        Integer csanotesId = csanotes.getId();

        return this.wmGenericDao.findById(csanotesId);
    }

    @Transactional(value = "SafetyTransactionManager")
	@Override
	public Csanotes delete(Integer csanotesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Csanotes with id: {}", csanotesId);
        Csanotes deleted = this.wmGenericDao.findById(csanotesId);
        if (deleted == null) {
            LOGGER.debug("No Csanotes found with id: {}", csanotesId);
            throw new EntityNotFoundException(String.valueOf(csanotesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public Page<Csanotes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Csanotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
    @Override
    public Page<Csanotes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Csanotes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Safety for table Csanotes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

