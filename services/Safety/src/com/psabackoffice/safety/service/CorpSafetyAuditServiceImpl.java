/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.safety.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.safety.CorpSafetyAudit;
import com.psabackoffice.safety.Csanotes;


/**
 * ServiceImpl object for domain model class CorpSafetyAudit.
 *
 * @see CorpSafetyAudit
 */
@Service("Safety.CorpSafetyAuditService")
public class CorpSafetyAuditServiceImpl implements CorpSafetyAuditService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CorpSafetyAuditServiceImpl.class);

    @Autowired
	@Qualifier("Safety.CsanotesService")
	private CsanotesService csanotesService;

    @Autowired
    @Qualifier("Safety.CorpSafetyAuditDao")
    private WMGenericDao<CorpSafetyAudit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CorpSafetyAudit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SafetyTransactionManager")
    @Override
	public CorpSafetyAudit create(CorpSafetyAudit corpSafetyAudit) {
        LOGGER.debug("Creating a new CorpSafetyAudit with information: {}", corpSafetyAudit);
        CorpSafetyAudit corpSafetyAuditCreated = this.wmGenericDao.create(corpSafetyAudit);
        if(corpSafetyAuditCreated.getCsanoteses() != null) {
            for(Csanotes csanotese : corpSafetyAuditCreated.getCsanoteses()) {
                csanotese.setCorpSafetyAudit(corpSafetyAuditCreated);
                LOGGER.debug("Creating a new child Csanotes with information: {}", csanotese);
                csanotesService.create(csanotese);
            }
        }
        return corpSafetyAuditCreated;
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public CorpSafetyAudit getById(Integer corpsafetyauditId) throws EntityNotFoundException {
        LOGGER.debug("Finding CorpSafetyAudit by id: {}", corpsafetyauditId);
        CorpSafetyAudit corpSafetyAudit = this.wmGenericDao.findById(corpsafetyauditId);
        if (corpSafetyAudit == null){
            LOGGER.debug("No CorpSafetyAudit found with id: {}", corpsafetyauditId);
            throw new EntityNotFoundException(String.valueOf(corpsafetyauditId));
        }
        return corpSafetyAudit;
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public CorpSafetyAudit findById(Integer corpsafetyauditId) {
        LOGGER.debug("Finding CorpSafetyAudit by id: {}", corpsafetyauditId);
        return this.wmGenericDao.findById(corpsafetyauditId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SafetyTransactionManager")
	@Override
	public CorpSafetyAudit update(CorpSafetyAudit corpSafetyAudit) throws EntityNotFoundException {
        LOGGER.debug("Updating CorpSafetyAudit with information: {}", corpSafetyAudit);
        this.wmGenericDao.update(corpSafetyAudit);

        Integer corpsafetyauditId = corpSafetyAudit.getId();

        return this.wmGenericDao.findById(corpsafetyauditId);
    }

    @Transactional(value = "SafetyTransactionManager")
	@Override
	public CorpSafetyAudit delete(Integer corpsafetyauditId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CorpSafetyAudit with id: {}", corpsafetyauditId);
        CorpSafetyAudit deleted = this.wmGenericDao.findById(corpsafetyauditId);
        if (deleted == null) {
            LOGGER.debug("No CorpSafetyAudit found with id: {}", corpsafetyauditId);
            throw new EntityNotFoundException(String.valueOf(corpsafetyauditId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public Page<CorpSafetyAudit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CorpSafetyAudits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
    @Override
    public Page<CorpSafetyAudit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CorpSafetyAudits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Safety for table CorpSafetyAudit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SafetyTransactionManager")
    @Override
    public Page<Csanotes> findAssociatedCsanoteses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated csanoteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("corpSafetyAudit.id = '" + id + "'");

        return csanotesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CsanotesService instance
	 */
	protected void setCsanotesService(CsanotesService service) {
        this.csanotesService = service;
    }

}

