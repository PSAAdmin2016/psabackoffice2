/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.safety.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.safety.CorpSafetyAudit;
import com.psabackoffice.safety.Csanotes;
import com.psabackoffice.safety.service.CorpSafetyAuditService;


/**
 * Controller object for domain model class CorpSafetyAudit.
 * @see CorpSafetyAudit
 */
@RestController("Safety.CorpSafetyAuditController")
@Api(value = "CorpSafetyAuditController", description = "Exposes APIs to work with CorpSafetyAudit resource.")
@RequestMapping("/Safety/CorpSafetyAudit")
public class CorpSafetyAuditController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CorpSafetyAuditController.class);

    @Autowired
	@Qualifier("Safety.CorpSafetyAuditService")
	private CorpSafetyAuditService corpSafetyAuditService;

	@ApiOperation(value = "Creates a new CorpSafetyAudit instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CorpSafetyAudit createCorpSafetyAudit(@RequestBody CorpSafetyAudit corpSafetyAudit) {
		LOGGER.debug("Create CorpSafetyAudit with information: {}" , corpSafetyAudit);

		corpSafetyAudit = corpSafetyAuditService.create(corpSafetyAudit);
		LOGGER.debug("Created CorpSafetyAudit with information: {}" , corpSafetyAudit);

	    return corpSafetyAudit;
	}


    @ApiOperation(value = "Returns the CorpSafetyAudit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CorpSafetyAudit getCorpSafetyAudit(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CorpSafetyAudit with id: {}" , id);

        CorpSafetyAudit foundCorpSafetyAudit = corpSafetyAuditService.getById(id);
        LOGGER.debug("CorpSafetyAudit details with id: {}" , foundCorpSafetyAudit);

        return foundCorpSafetyAudit;
    }

    @ApiOperation(value = "Updates the CorpSafetyAudit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CorpSafetyAudit editCorpSafetyAudit(@PathVariable("id") Integer id, @RequestBody CorpSafetyAudit corpSafetyAudit) throws EntityNotFoundException {
        LOGGER.debug("Editing CorpSafetyAudit with id: {}" , corpSafetyAudit.getId());

        corpSafetyAudit.setId(id);
        corpSafetyAudit = corpSafetyAuditService.update(corpSafetyAudit);
        LOGGER.debug("CorpSafetyAudit details with id: {}" , corpSafetyAudit);

        return corpSafetyAudit;
    }

    @ApiOperation(value = "Deletes the CorpSafetyAudit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCorpSafetyAudit(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CorpSafetyAudit with id: {}" , id);

        CorpSafetyAudit deletedCorpSafetyAudit = corpSafetyAuditService.delete(id);

        return deletedCorpSafetyAudit != null;
    }

    /**
     * @deprecated Use {@link #findCorpSafetyAudits(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CorpSafetyAudit instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CorpSafetyAudit> searchCorpSafetyAuditsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CorpSafetyAudits list");
        return corpSafetyAuditService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CorpSafetyAudit instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CorpSafetyAudit> findCorpSafetyAudits(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CorpSafetyAudits list");
        return corpSafetyAuditService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CorpSafetyAudit instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CorpSafetyAudit> filterCorpSafetyAudits(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CorpSafetyAudits list");
        return corpSafetyAuditService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCorpSafetyAudits(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return corpSafetyAuditService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CorpSafetyAudit instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCorpSafetyAudits( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CorpSafetyAudits");
		return corpSafetyAuditService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCorpSafetyAuditAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return corpSafetyAuditService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/csanoteses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the csanoteses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csanotes> findAssociatedCsanoteses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated csanoteses");
        return corpSafetyAuditService.findAssociatedCsanoteses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CorpSafetyAuditService instance
	 */
	protected void setCorpSafetyAuditService(CorpSafetyAuditService service) {
		this.corpSafetyAuditService = service;
	}

}

