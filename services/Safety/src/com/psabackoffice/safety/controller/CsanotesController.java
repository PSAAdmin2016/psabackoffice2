/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.safety.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.safety.Csanotes;
import com.psabackoffice.safety.service.CsanotesService;


/**
 * Controller object for domain model class Csanotes.
 * @see Csanotes
 */
@RestController("Safety.CsanotesController")
@Api(value = "CsanotesController", description = "Exposes APIs to work with Csanotes resource.")
@RequestMapping("/Safety/Csanotes")
public class CsanotesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CsanotesController.class);

    @Autowired
	@Qualifier("Safety.CsanotesService")
	private CsanotesService csanotesService;

	@ApiOperation(value = "Creates a new Csanotes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Csanotes createCsanotes(@RequestBody Csanotes csanotes) {
		LOGGER.debug("Create Csanotes with information: {}" , csanotes);

		csanotes = csanotesService.create(csanotes);
		LOGGER.debug("Created Csanotes with information: {}" , csanotes);

	    return csanotes;
	}


    @ApiOperation(value = "Returns the Csanotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csanotes getCsanotes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Csanotes with id: {}" , id);

        Csanotes foundCsanotes = csanotesService.getById(id);
        LOGGER.debug("Csanotes details with id: {}" , foundCsanotes);

        return foundCsanotes;
    }

    @ApiOperation(value = "Updates the Csanotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Csanotes editCsanotes(@PathVariable("id") Integer id, @RequestBody Csanotes csanotes) throws EntityNotFoundException {
        LOGGER.debug("Editing Csanotes with id: {}" , csanotes.getId());

        csanotes.setId(id);
        csanotes = csanotesService.update(csanotes);
        LOGGER.debug("Csanotes details with id: {}" , csanotes);

        return csanotes;
    }

    @ApiOperation(value = "Deletes the Csanotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCsanotes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Csanotes with id: {}" , id);

        Csanotes deletedCsanotes = csanotesService.delete(id);

        return deletedCsanotes != null;
    }

    /**
     * @deprecated Use {@link #findCsanotes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Csanotes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csanotes> searchCsanotesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Csanotes list");
        return csanotesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Csanotes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csanotes> findCsanotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Csanotes list");
        return csanotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Csanotes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Csanotes> filterCsanotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Csanotes list");
        return csanotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCsanotes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return csanotesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Csanotes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCsanotes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Csanotes");
		return csanotesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCsanotesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return csanotesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CsanotesService instance
	 */
	protected void setCsanotesService(CsanotesService service) {
		this.csanotesService = service;
	}

}

