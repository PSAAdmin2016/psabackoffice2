/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * FeedBack generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`FeedBack`")
public class FeedBack implements Serializable {

    private Integer id;
    private Integer fkUserId;
    private Integer fkFeedBackType;
    private Integer fkFbsubType;
    private Integer fkSeverity;
    private Integer fkStatus;
    private Timestamp timeStamp;
    private RefFbStatuses refFbStatuses;
    private RefFbSeverity refFbSeverity;
    private RefFbSubTypes refFbSubTypes;
    private RefFbTypes refFbTypes;
    private TblUserPsa tblUserPsa;
    private List<FeedBackNotes> feedBackNoteses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`fk_UserID`", nullable = true, scale = 0, precision = 10)
    public Integer getFkUserId() {
        return this.fkUserId;
    }

    public void setFkUserId(Integer fkUserId) {
        this.fkUserId = fkUserId;
    }

    @Column(name = "`fk_FeedBackType`", nullable = true, scale = 0, precision = 10)
    public Integer getFkFeedBackType() {
        return this.fkFeedBackType;
    }

    public void setFkFeedBackType(Integer fkFeedBackType) {
        this.fkFeedBackType = fkFeedBackType;
    }

    @Column(name = "`fk_FBSubType`", nullable = true, scale = 0, precision = 10)
    public Integer getFkFbsubType() {
        return this.fkFbsubType;
    }

    public void setFkFbsubType(Integer fkFbsubType) {
        this.fkFbsubType = fkFbsubType;
    }

    @Column(name = "`fk_Severity`", nullable = true, scale = 0, precision = 10)
    public Integer getFkSeverity() {
        return this.fkSeverity;
    }

    public void setFkSeverity(Integer fkSeverity) {
        this.fkSeverity = fkSeverity;
    }

    @Column(name = "`fk_Status`", nullable = true, scale = 0, precision = 10)
    public Integer getFkStatus() {
        return this.fkStatus;
    }

    public void setFkStatus(Integer fkStatus) {
        this.fkStatus = fkStatus;
    }

    @Column(name = "`TimeStamp`", nullable = true)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_Status`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public RefFbStatuses getRefFbStatuses() {
        return this.refFbStatuses;
    }

    public void setRefFbStatuses(RefFbStatuses refFbStatuses) {
        if(refFbStatuses != null) {
            this.fkStatus = refFbStatuses.getId();
        }

        this.refFbStatuses = refFbStatuses;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_Severity`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public RefFbSeverity getRefFbSeverity() {
        return this.refFbSeverity;
    }

    public void setRefFbSeverity(RefFbSeverity refFbSeverity) {
        if(refFbSeverity != null) {
            this.fkSeverity = refFbSeverity.getId();
        }

        this.refFbSeverity = refFbSeverity;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_FBSubType`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public RefFbSubTypes getRefFbSubTypes() {
        return this.refFbSubTypes;
    }

    public void setRefFbSubTypes(RefFbSubTypes refFbSubTypes) {
        if(refFbSubTypes != null) {
            this.fkFbsubType = refFbSubTypes.getId();
        }

        this.refFbSubTypes = refFbSubTypes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_FeedBackType`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public RefFbTypes getRefFbTypes() {
        return this.refFbTypes;
    }

    public void setRefFbTypes(RefFbTypes refFbTypes) {
        if(refFbTypes != null) {
            this.fkFeedBackType = refFbTypes.getId();
        }

        this.refFbTypes = refFbTypes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_UserID`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public TblUserPsa getTblUserPsa() {
        return this.tblUserPsa;
    }

    public void setTblUserPsa(TblUserPsa tblUserPsa) {
        if(tblUserPsa != null) {
            this.fkUserId = tblUserPsa.getId();
        }

        this.tblUserPsa = tblUserPsa;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "feedBack")
    public List<FeedBackNotes> getFeedBackNoteses() {
        return this.feedBackNoteses;
    }

    public void setFeedBackNoteses(List<FeedBackNotes> feedBackNoteses) {
        this.feedBackNoteses = feedBackNoteses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof FeedBack)) return false;
        final FeedBack feedBack = (FeedBack) o;
        return Objects.equals(getId(), feedBack.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

