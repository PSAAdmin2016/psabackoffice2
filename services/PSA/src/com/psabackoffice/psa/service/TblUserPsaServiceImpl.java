/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.ChatConversationMembers;
import com.psabackoffice.psa.ChatMessages;
import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.FeedBackNotes;
import com.psabackoffice.psa.Settingsuser;
import com.psabackoffice.psa.TblCrews;
import com.psabackoffice.psa.TblUserCreds;
import com.psabackoffice.psa.TblUserJobNumbers;
import com.psabackoffice.psa.TblUserPsa;
import com.psabackoffice.psa.TblUserRoles;


/**
 * ServiceImpl object for domain model class TblUserPsa.
 *
 * @see TblUserPsa
 */
@Service("PSA.TblUserPsaService")
@Validated
public class TblUserPsaServiceImpl implements TblUserPsaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblUserPsaServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.FeedBackNotesService")
	private FeedBackNotesService feedBackNotesService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserCredsService")
	private TblUserCredsService tblUserCredsService;

    @Lazy
    @Autowired
	@Qualifier("PSA.FeedBackService")
	private FeedBackService feedBackService;

    @Lazy
    @Autowired
	@Qualifier("PSA.SettingsuserService")
	private SettingsuserService settingsuserService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserJobNumbersService")
	private TblUserJobNumbersService tblUserJobNumbersService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblCrewsService")
	private TblCrewsService tblCrewsService;

    @Lazy
    @Autowired
	@Qualifier("PSA.ChatConversationMembersService")
	private ChatConversationMembersService chatConversationMembersService;

    @Lazy
    @Autowired
	@Qualifier("PSA.ChatMessagesService")
	private ChatMessagesService chatMessagesService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserRolesService")
	private TblUserRolesService tblUserRolesService;

    @Autowired
    @Qualifier("PSA.TblUserPsaDao")
    private WMGenericDao<TblUserPsa, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TblUserPsa, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public TblUserPsa create(TblUserPsa tblUserPsa) {
        LOGGER.debug("Creating a new TblUserPsa with information: {}", tblUserPsa);

        TblUserPsa tblUserPsaCreated = this.wmGenericDao.create(tblUserPsa);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tblUserPsaCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblUserPsa getById(Integer tbluserpsaId) throws EntityNotFoundException {
        LOGGER.debug("Finding TblUserPsa by id: {}", tbluserpsaId);
        return this.wmGenericDao.findById(tbluserpsaId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblUserPsa findById(Integer tbluserpsaId) {
        LOGGER.debug("Finding TblUserPsa by id: {}", tbluserpsaId);
        try {
            return this.wmGenericDao.findById(tbluserpsaId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No TblUserPsa found with id: {}", tbluserpsaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public TblUserPsa getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding TblUserPsa by unique keys: {}", emailMap);
        TblUserPsa tblUserPsa = this.wmGenericDao.findByUniqueKey(emailMap);

        if (tblUserPsa == null){
            LOGGER.debug("No TblUserPsa found with given unique key values: {}", emailMap);
            throw new EntityNotFoundException(String.valueOf(emailMap));
        }

        return tblUserPsa;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public TblUserPsa getByPciEmployeeId(String pciEmployeeId) {
        Map<String, Object> pciEmployeeIdMap = new HashMap<>();
        pciEmployeeIdMap.put("pciEmployeeId", pciEmployeeId);

        LOGGER.debug("Finding TblUserPsa by unique keys: {}", pciEmployeeIdMap);
        TblUserPsa tblUserPsa = this.wmGenericDao.findByUniqueKey(pciEmployeeIdMap);

        if (tblUserPsa == null){
            LOGGER.debug("No TblUserPsa found with given unique key values: {}", pciEmployeeIdMap);
            throw new EntityNotFoundException(String.valueOf(pciEmployeeIdMap));
        }

        return tblUserPsa;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public TblUserPsa update(TblUserPsa tblUserPsa) throws EntityNotFoundException {
        LOGGER.debug("Updating TblUserPsa with information: {}", tblUserPsa);

        List<ChatConversationMembers> chatConversationMemberses = tblUserPsa.getChatConversationMemberses();
        List<ChatMessages> chatMessageses = tblUserPsa.getChatMessageses();
        List<FeedBack> feedBacks = tblUserPsa.getFeedBacks();
        List<FeedBackNotes> feedBackNoteses = tblUserPsa.getFeedBackNoteses();
        List<Settingsuser> settingsusers = tblUserPsa.getSettingsusers();
        List<TblCrews> tblCrewsesForProjectManager = tblUserPsa.getTblCrewsesForProjectManager();
        List<TblCrews> tblCrewsesForAreaManager = tblUserPsa.getTblCrewsesForAreaManager();
        List<TblCrews> tblCrewsesForSiteManager = tblUserPsa.getTblCrewsesForSiteManager();
        List<TblCrews> tblCrewsesForGf = tblUserPsa.getTblCrewsesForGf();
        List<TblCrews> tblCrewsesForLeadman = tblUserPsa.getTblCrewsesForLeadman();
        List<TblCrews> tblCrewsesForConstructionManager = tblUserPsa.getTblCrewsesForConstructionManager();
        List<TblCrews> tblCrewsesForSuperintendent = tblUserPsa.getTblCrewsesForSuperintendent();
        TblCrews tblCrewsForForeman = tblUserPsa.getTblCrewsForForeman();
        TblUserCreds tblUserCreds = tblUserPsa.getTblUserCreds();
        List<TblUserJobNumbers> tblUserJobNumberses = tblUserPsa.getTblUserJobNumberses();
        List<TblUserRoles> tblUserRoleses = tblUserPsa.getTblUserRoleses();

        if(chatConversationMemberses != null && Hibernate.isInitialized(chatConversationMemberses)) {
            if(!chatConversationMemberses.isEmpty()) {
                for(ChatConversationMembers _chatConversationMembers : chatConversationMemberses) {
                    _chatConversationMembers.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(chatMessageses != null && Hibernate.isInitialized(chatMessageses)) {
            if(!chatMessageses.isEmpty()) {
                for(ChatMessages _chatMessages : chatMessageses) {
                    _chatMessages.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(feedBacks != null && Hibernate.isInitialized(feedBacks)) {
            if(!feedBacks.isEmpty()) {
                for(FeedBack _feedBack : feedBacks) {
                    _feedBack.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(feedBackNoteses != null && Hibernate.isInitialized(feedBackNoteses)) {
            if(!feedBackNoteses.isEmpty()) {
                for(FeedBackNotes _feedBackNotes : feedBackNoteses) {
                    _feedBackNotes.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(settingsusers != null && Hibernate.isInitialized(settingsusers)) {
            if(!settingsusers.isEmpty()) {
                for(Settingsuser _settingsuser : settingsusers) {
                    _settingsuser.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForProjectManager != null && Hibernate.isInitialized(tblCrewsesForProjectManager)) {
            if(!tblCrewsesForProjectManager.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForProjectManager) {
                    _tblCrews.setTblUserPsaByProjectManager(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForAreaManager != null && Hibernate.isInitialized(tblCrewsesForAreaManager)) {
            if(!tblCrewsesForAreaManager.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForAreaManager) {
                    _tblCrews.setTblUserPsaByAreaManager(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForSiteManager != null && Hibernate.isInitialized(tblCrewsesForSiteManager)) {
            if(!tblCrewsesForSiteManager.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForSiteManager) {
                    _tblCrews.setTblUserPsaBySiteManager(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForGf != null && Hibernate.isInitialized(tblCrewsesForGf)) {
            if(!tblCrewsesForGf.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForGf) {
                    _tblCrews.setTblUserPsaByGf(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForLeadman != null && Hibernate.isInitialized(tblCrewsesForLeadman)) {
            if(!tblCrewsesForLeadman.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForLeadman) {
                    _tblCrews.setTblUserPsaByLeadman(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForConstructionManager != null && Hibernate.isInitialized(tblCrewsesForConstructionManager)) {
            if(!tblCrewsesForConstructionManager.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForConstructionManager) {
                    _tblCrews.setTblUserPsaByConstructionManager(tblUserPsa);
                }
            }
        }

        if(tblCrewsesForSuperintendent != null && Hibernate.isInitialized(tblCrewsesForSuperintendent)) {
            if(!tblCrewsesForSuperintendent.isEmpty()) {
                for(TblCrews _tblCrews : tblCrewsesForSuperintendent) {
                    _tblCrews.setTblUserPsaBySuperintendent(tblUserPsa);
                }
            }
        }

        if(tblCrewsForForeman != null && Hibernate.isInitialized(tblCrewsForForeman)) {
            tblCrewsForForeman.setTblUserPsaByForeman(tblUserPsa);
        }

        if(tblUserCreds != null && Hibernate.isInitialized(tblUserCreds)) {
            tblUserCreds.setTblUserPsa(tblUserPsa);
        }

        if(tblUserJobNumberses != null && Hibernate.isInitialized(tblUserJobNumberses)) {
            if(!tblUserJobNumberses.isEmpty()) {
                for(TblUserJobNumbers _tblUserJobNumbers : tblUserJobNumberses) {
                    _tblUserJobNumbers.setTblUserPsa(tblUserPsa);
                }
            }
        }

        if(tblUserRoleses != null && Hibernate.isInitialized(tblUserRoleses)) {
            if(!tblUserRoleses.isEmpty()) {
                for(TblUserRoles _tblUserRoles : tblUserRoleses) {
                    _tblUserRoles.setTblUserPsa(tblUserPsa);
                }
            }
        }

        this.wmGenericDao.update(tblUserPsa);
        this.wmGenericDao.refresh(tblUserPsa);

        // Deleting children which are not present in the list.
        if(settingsusers != null && Hibernate.isInitialized(settingsusers) && !settingsusers.isEmpty()) {
            List<Settingsuser> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, Settingsuser.class,
                        new DaoUtils.ChildrenFilter("tblUserPsa", tblUserPsa, settingsusers)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(Settingsuser _settingsuser : _remainingChildren) {
                settingsuserService.delete(_settingsuser);
            }
            tblUserPsa.setSettingsusers(settingsusers);
        }

        // Deleting children which are not present in the list.
        if(tblUserRoleses != null && Hibernate.isInitialized(tblUserRoleses) && !tblUserRoleses.isEmpty()) {
            List<TblUserRoles> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, TblUserRoles.class,
                        new DaoUtils.ChildrenFilter("tblUserPsa", tblUserPsa, tblUserRoleses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(TblUserRoles _tblUserRoles : _remainingChildren) {
                tblUserRolesService.delete(_tblUserRoles);
            }
            tblUserPsa.setTblUserRoleses(tblUserRoleses);
        }

        return tblUserPsa;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public TblUserPsa delete(Integer tbluserpsaId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TblUserPsa with id: {}", tbluserpsaId);
        TblUserPsa deleted = this.wmGenericDao.findById(tbluserpsaId);
        if (deleted == null) {
            LOGGER.debug("No TblUserPsa found with id: {}", tbluserpsaId);
            throw new EntityNotFoundException(String.valueOf(tbluserpsaId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(TblUserPsa tblUserPsa) {
        LOGGER.debug("Deleting TblUserPsa with {}", tblUserPsa);
        this.wmGenericDao.delete(tblUserPsa);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<TblUserPsa> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblUserPsas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserPsa> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblUserPsas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table TblUserPsa to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatConversationMembers> findAssociatedChatConversationMemberses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatConversationMemberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return chatConversationMembersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatMessages> findAssociatedChatMessageses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatMessageses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return chatMessagesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBack> findAssociatedFeedBacks(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return feedBackService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBackNotes> findAssociatedFeedBackNoteses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBackNoteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return feedBackNotesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<Settingsuser> findAssociatedSettingsusers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated settingsusers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return settingsuserService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForProjectManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForProjectManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByProjectManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForAreaManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForAreaManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByAreaManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForSiteManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForSiteManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaBySiteManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForGf(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForGf");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByGf.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForLeadman(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForLeadman");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByLeadman.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForConstructionManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForConstructionManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByConstructionManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForSuperintendent(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForSuperintendent");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaBySuperintendent.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserJobNumbers> findAssociatedTblUserJobNumberses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserJobNumberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return tblUserJobNumbersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserRoles> findAssociatedTblUserRoleses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserRoleses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return tblUserRolesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackNotesService instance
	 */
	protected void setFeedBackNotesService(FeedBackNotesService service) {
        this.feedBackNotesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserCredsService instance
	 */
	protected void setTblUserCredsService(TblUserCredsService service) {
        this.tblUserCredsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackService instance
	 */
	protected void setFeedBackService(FeedBackService service) {
        this.feedBackService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SettingsuserService instance
	 */
	protected void setSettingsuserService(SettingsuserService service) {
        this.settingsuserService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserJobNumbersService instance
	 */
	protected void setTblUserJobNumbersService(TblUserJobNumbersService service) {
        this.tblUserJobNumbersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblCrewsService instance
	 */
	protected void setTblCrewsService(TblCrewsService service) {
        this.tblCrewsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatConversationMembersService instance
	 */
	protected void setChatConversationMembersService(ChatConversationMembersService service) {
        this.chatConversationMembersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatMessagesService instance
	 */
	protected void setChatMessagesService(ChatMessagesService service) {
        this.chatMessagesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserRolesService instance
	 */
	protected void setTblUserRolesService(TblUserRolesService service) {
        this.tblUserRolesService = service;
    }

}

