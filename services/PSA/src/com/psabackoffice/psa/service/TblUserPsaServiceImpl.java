/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.ChatConversationMembers;
import com.psabackoffice.psa.ChatMessages;
import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.FeedBackNotes;
import com.psabackoffice.psa.TblCrews;
import com.psabackoffice.psa.TblUserCreds;
import com.psabackoffice.psa.TblUserJobNumbers;
import com.psabackoffice.psa.TblUserPsa;


/**
 * ServiceImpl object for domain model class TblUserPsa.
 *
 * @see TblUserPsa
 */
@Service("PSA.TblUserPsaService")
public class TblUserPsaServiceImpl implements TblUserPsaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblUserPsaServiceImpl.class);

    @Autowired
	@Qualifier("PSA.TblCrewsService")
	private TblCrewsService tblCrewsService;

    @Autowired
	@Qualifier("PSA.ChatConversationMembersService")
	private ChatConversationMembersService chatConversationMembersService;

    @Autowired
	@Qualifier("PSA.TblUserCredsService")
	private TblUserCredsService tblUserCredsService;

    @Autowired
	@Qualifier("PSA.ChatMessagesService")
	private ChatMessagesService chatMessagesService;

    @Autowired
	@Qualifier("PSA.FeedBackNotesService")
	private FeedBackNotesService feedBackNotesService;

    @Autowired
	@Qualifier("PSA.FeedBackService")
	private FeedBackService feedBackService;

    @Autowired
	@Qualifier("PSA.TblUserJobNumbersService")
	private TblUserJobNumbersService tblUserJobNumbersService;

    @Autowired
    @Qualifier("PSA.TblUserPsaDao")
    private WMGenericDao<TblUserPsa, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TblUserPsa, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public TblUserPsa create(TblUserPsa tblUserPsa) {
        LOGGER.debug("Creating a new TblUserPsa with information: {}", tblUserPsa);
        TblUserPsa tblUserPsaCreated = this.wmGenericDao.create(tblUserPsa);
        if(tblUserPsaCreated.getChatConversationMemberses() != null) {
            for(ChatConversationMembers chatConversationMemberse : tblUserPsaCreated.getChatConversationMemberses()) {
                chatConversationMemberse.setTblUserPsa(tblUserPsaCreated);
                LOGGER.debug("Creating a new child ChatConversationMembers with information: {}", chatConversationMemberse);
                chatConversationMembersService.create(chatConversationMemberse);
            }
        }

        if(tblUserPsaCreated.getChatMessageses() != null) {
            for(ChatMessages chatMessagese : tblUserPsaCreated.getChatMessageses()) {
                chatMessagese.setTblUserPsa(tblUserPsaCreated);
                LOGGER.debug("Creating a new child ChatMessages with information: {}", chatMessagese);
                chatMessagesService.create(chatMessagese);
            }
        }

        if(tblUserPsaCreated.getFeedBacks() != null) {
            for(FeedBack feedBack : tblUserPsaCreated.getFeedBacks()) {
                feedBack.setTblUserPsa(tblUserPsaCreated);
                LOGGER.debug("Creating a new child FeedBack with information: {}", feedBack);
                feedBackService.create(feedBack);
            }
        }

        if(tblUserPsaCreated.getFeedBackNoteses() != null) {
            for(FeedBackNotes feedBackNotese : tblUserPsaCreated.getFeedBackNoteses()) {
                feedBackNotese.setTblUserPsa(tblUserPsaCreated);
                LOGGER.debug("Creating a new child FeedBackNotes with information: {}", feedBackNotese);
                feedBackNotesService.create(feedBackNotese);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForConstructionManager() != null) {
            for(TblCrews tblCrewsesForConstructionManager : tblUserPsaCreated.getTblCrewsesForConstructionManager()) {
                tblCrewsesForConstructionManager.setTblUserPsaByConstructionManager(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForConstructionManager);
                tblCrewsService.create(tblCrewsesForConstructionManager);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForSuperintendent() != null) {
            for(TblCrews tblCrewsesForSuperintendent : tblUserPsaCreated.getTblCrewsesForSuperintendent()) {
                tblCrewsesForSuperintendent.setTblUserPsaBySuperintendent(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForSuperintendent);
                tblCrewsService.create(tblCrewsesForSuperintendent);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForLeadman() != null) {
            for(TblCrews tblCrewsesForLeadman : tblUserPsaCreated.getTblCrewsesForLeadman()) {
                tblCrewsesForLeadman.setTblUserPsaByLeadman(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForLeadman);
                tblCrewsService.create(tblCrewsesForLeadman);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForProjectManager() != null) {
            for(TblCrews tblCrewsesForProjectManager : tblUserPsaCreated.getTblCrewsesForProjectManager()) {
                tblCrewsesForProjectManager.setTblUserPsaByProjectManager(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForProjectManager);
                tblCrewsService.create(tblCrewsesForProjectManager);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForAreaManager() != null) {
            for(TblCrews tblCrewsesForAreaManager : tblUserPsaCreated.getTblCrewsesForAreaManager()) {
                tblCrewsesForAreaManager.setTblUserPsaByAreaManager(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForAreaManager);
                tblCrewsService.create(tblCrewsesForAreaManager);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForForeman() != null) {
            for(TblCrews tblCrewsesForForeman : tblUserPsaCreated.getTblCrewsesForForeman()) {
                tblCrewsesForForeman.setTblUserPsaByForeman(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForForeman);
                tblCrewsService.create(tblCrewsesForForeman);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForSiteManager() != null) {
            for(TblCrews tblCrewsesForSiteManager : tblUserPsaCreated.getTblCrewsesForSiteManager()) {
                tblCrewsesForSiteManager.setTblUserPsaBySiteManager(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForSiteManager);
                tblCrewsService.create(tblCrewsesForSiteManager);
            }
        }

        if(tblUserPsaCreated.getTblCrewsesForGf() != null) {
            for(TblCrews tblCrewsesForGf : tblUserPsaCreated.getTblCrewsesForGf()) {
                tblCrewsesForGf.setTblUserPsaByGf(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", tblCrewsesForGf);
                tblCrewsService.create(tblCrewsesForGf);
            }
        }

        if(tblUserPsaCreated.getTblUserCreds() != null) {
            TblUserCreds tblUserCreds = tblUserPsaCreated.getTblUserCreds();
            LOGGER.debug("Creating a new child TblUserCreds with information: {}", tblUserCreds);
            tblUserCreds.setTblUserPsa(tblUserPsaCreated);
            tblUserCredsService.create(tblUserCreds);
        }

        if(tblUserPsaCreated.getTblUserJobNumberses() != null) {
            for(TblUserJobNumbers tblUserJobNumberse : tblUserPsaCreated.getTblUserJobNumberses()) {
                tblUserJobNumberse.setTblUserPsa(tblUserPsaCreated);
                LOGGER.debug("Creating a new child TblUserJobNumbers with information: {}", tblUserJobNumberse);
                tblUserJobNumbersService.create(tblUserJobNumberse);
            }
        }
        return tblUserPsaCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblUserPsa getById(Integer tbluserpsaId) throws EntityNotFoundException {
        LOGGER.debug("Finding TblUserPsa by id: {}", tbluserpsaId);
        TblUserPsa tblUserPsa = this.wmGenericDao.findById(tbluserpsaId);
        if (tblUserPsa == null){
            LOGGER.debug("No TblUserPsa found with id: {}", tbluserpsaId);
            throw new EntityNotFoundException(String.valueOf(tbluserpsaId));
        }
        return tblUserPsa;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblUserPsa findById(Integer tbluserpsaId) {
        LOGGER.debug("Finding TblUserPsa by id: {}", tbluserpsaId);
        return this.wmGenericDao.findById(tbluserpsaId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public TblUserPsa getByPciEmployeeId(String pciEmployeeId) {
        Map<String, Object> pciEmployeeIdMap = new HashMap<>();
        pciEmployeeIdMap.put("pciEmployeeId", pciEmployeeId);

        LOGGER.debug("Finding TblUserPsa by unique keys: {}", pciEmployeeIdMap);
        TblUserPsa tblUserPsa = this.wmGenericDao.findByUniqueKey(pciEmployeeIdMap);

        if (tblUserPsa == null){
            LOGGER.debug("No TblUserPsa found with given unique key values: {}", pciEmployeeIdMap);
            throw new EntityNotFoundException(String.valueOf(pciEmployeeIdMap));
        }

        return tblUserPsa;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public TblUserPsa getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding TblUserPsa by unique keys: {}", emailMap);
        TblUserPsa tblUserPsa = this.wmGenericDao.findByUniqueKey(emailMap);

        if (tblUserPsa == null){
            LOGGER.debug("No TblUserPsa found with given unique key values: {}", emailMap);
            throw new EntityNotFoundException(String.valueOf(emailMap));
        }

        return tblUserPsa;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public TblUserPsa update(TblUserPsa tblUserPsa) throws EntityNotFoundException {
        LOGGER.debug("Updating TblUserPsa with information: {}", tblUserPsa);
        this.wmGenericDao.update(tblUserPsa);

        Integer tbluserpsaId = tblUserPsa.getId();

        return this.wmGenericDao.findById(tbluserpsaId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public TblUserPsa delete(Integer tbluserpsaId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TblUserPsa with id: {}", tbluserpsaId);
        TblUserPsa deleted = this.wmGenericDao.findById(tbluserpsaId);
        if (deleted == null) {
            LOGGER.debug("No TblUserPsa found with id: {}", tbluserpsaId);
            throw new EntityNotFoundException(String.valueOf(tbluserpsaId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<TblUserPsa> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblUserPsas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserPsa> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblUserPsas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table TblUserPsa to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatConversationMembers> findAssociatedChatConversationMemberses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatConversationMemberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return chatConversationMembersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatMessages> findAssociatedChatMessageses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatMessageses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return chatMessagesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBack> findAssociatedFeedBacks(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return feedBackService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBackNotes> findAssociatedFeedBackNoteses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBackNoteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return feedBackNotesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForConstructionManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForConstructionManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByConstructionManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForSuperintendent(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForSuperintendent");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaBySuperintendent.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForLeadman(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForLeadman");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByLeadman.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForProjectManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForProjectManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByProjectManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForAreaManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForAreaManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByAreaManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForForeman(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForForeman");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByForeman.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForSiteManager(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForSiteManager");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaBySiteManager.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewsesForGf(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewsesForGf");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsaByGf.id = '" + id + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserJobNumbers> findAssociatedTblUserJobNumberses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserJobNumberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblUserPsa.id = '" + id + "'");

        return tblUserJobNumbersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblCrewsService instance
	 */
	protected void setTblCrewsService(TblCrewsService service) {
        this.tblCrewsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatConversationMembersService instance
	 */
	protected void setChatConversationMembersService(ChatConversationMembersService service) {
        this.chatConversationMembersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserCredsService instance
	 */
	protected void setTblUserCredsService(TblUserCredsService service) {
        this.tblUserCredsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatMessagesService instance
	 */
	protected void setChatMessagesService(ChatMessagesService service) {
        this.chatMessagesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackNotesService instance
	 */
	protected void setFeedBackNotesService(FeedBackNotesService service) {
        this.feedBackNotesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackService instance
	 */
	protected void setFeedBackService(FeedBackService service) {
        this.feedBackService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserJobNumbersService instance
	 */
	protected void setTblUserJobNumbersService(TblUserJobNumbersService service) {
        this.tblUserJobNumbersService = service;
    }

}

