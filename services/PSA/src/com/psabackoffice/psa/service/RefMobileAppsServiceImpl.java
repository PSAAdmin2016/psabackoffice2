/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefMobileApps;
import com.psabackoffice.psa.TblUserAssignedApps;


/**
 * ServiceImpl object for domain model class RefMobileApps.
 *
 * @see RefMobileApps
 */
@Service("PSA.RefMobileAppsService")
public class RefMobileAppsServiceImpl implements RefMobileAppsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefMobileAppsServiceImpl.class);

    @Autowired
	@Qualifier("PSA.TblUserAssignedAppsService")
	private TblUserAssignedAppsService tblUserAssignedAppsService;

    @Autowired
    @Qualifier("PSA.RefMobileAppsDao")
    private WMGenericDao<RefMobileApps, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefMobileApps, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefMobileApps create(RefMobileApps refMobileApps) {
        LOGGER.debug("Creating a new RefMobileApps with information: {}", refMobileApps);
        RefMobileApps refMobileAppsCreated = this.wmGenericDao.create(refMobileApps);
        if(refMobileAppsCreated.getTblUserAssignedAppses() != null) {
            for(TblUserAssignedApps tblUserAssignedAppse : refMobileAppsCreated.getTblUserAssignedAppses()) {
                tblUserAssignedAppse.setRefMobileApps(refMobileAppsCreated);
                LOGGER.debug("Creating a new child TblUserAssignedApps with information: {}", tblUserAssignedAppse);
                tblUserAssignedAppsService.create(tblUserAssignedAppse);
            }
        }
        return refMobileAppsCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefMobileApps getById(Integer refmobileappsId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefMobileApps by id: {}", refmobileappsId);
        RefMobileApps refMobileApps = this.wmGenericDao.findById(refmobileappsId);
        if (refMobileApps == null){
            LOGGER.debug("No RefMobileApps found with id: {}", refmobileappsId);
            throw new EntityNotFoundException(String.valueOf(refmobileappsId));
        }
        return refMobileApps;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefMobileApps findById(Integer refmobileappsId) {
        LOGGER.debug("Finding RefMobileApps by id: {}", refmobileappsId);
        return this.wmGenericDao.findById(refmobileappsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefMobileApps update(RefMobileApps refMobileApps) throws EntityNotFoundException {
        LOGGER.debug("Updating RefMobileApps with information: {}", refMobileApps);
        this.wmGenericDao.update(refMobileApps);

        Integer refmobileappsId = refMobileApps.getId();

        return this.wmGenericDao.findById(refmobileappsId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefMobileApps delete(Integer refmobileappsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefMobileApps with id: {}", refmobileappsId);
        RefMobileApps deleted = this.wmGenericDao.findById(refmobileappsId);
        if (deleted == null) {
            LOGGER.debug("No RefMobileApps found with id: {}", refmobileappsId);
            throw new EntityNotFoundException(String.valueOf(refmobileappsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefMobileApps> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefMobileApps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefMobileApps> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefMobileApps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefMobileApps to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserAssignedApps> findAssociatedTblUserAssignedAppses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserAssignedAppses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refMobileApps.id = '" + id + "'");

        return tblUserAssignedAppsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserAssignedAppsService instance
	 */
	protected void setTblUserAssignedAppsService(TblUserAssignedAppsService service) {
        this.tblUserAssignedAppsService = service;
    }

}

