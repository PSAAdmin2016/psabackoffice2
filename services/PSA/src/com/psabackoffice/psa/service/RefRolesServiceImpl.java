/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefRoles;
import com.psabackoffice.psa.RefRolesMobileFolders;
import com.psabackoffice.psa.TblUserPsa;


/**
 * ServiceImpl object for domain model class RefRoles.
 *
 * @see RefRoles
 */
@Service("PSA.RefRolesService")
public class RefRolesServiceImpl implements RefRolesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefRolesServiceImpl.class);

    @Autowired
	@Qualifier("PSA.RefRolesMobileFoldersService")
	private RefRolesMobileFoldersService refRolesMobileFoldersService;

    @Autowired
	@Qualifier("PSA.TblUserPsaService")
	private TblUserPsaService tblUserPsaService;

    @Autowired
    @Qualifier("PSA.RefRolesDao")
    private WMGenericDao<RefRoles, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefRoles, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefRoles create(RefRoles refRoles) {
        LOGGER.debug("Creating a new RefRoles with information: {}", refRoles);
        RefRoles refRolesCreated = this.wmGenericDao.create(refRoles);
        if(refRolesCreated.getRefRolesMobileFolderses() != null) {
            for(RefRolesMobileFolders refRolesMobileFolderse : refRolesCreated.getRefRolesMobileFolderses()) {
                refRolesMobileFolderse.setRefRoles(refRolesCreated);
                LOGGER.debug("Creating a new child RefRolesMobileFolders with information: {}", refRolesMobileFolderse);
                refRolesMobileFoldersService.create(refRolesMobileFolderse);
            }
        }

        if(refRolesCreated.getTblUserPsas() != null) {
            for(TblUserPsa tblUserPsa : refRolesCreated.getTblUserPsas()) {
                tblUserPsa.setRefRoles(refRolesCreated);
                LOGGER.debug("Creating a new child TblUserPsa with information: {}", tblUserPsa);
                tblUserPsaService.create(tblUserPsa);
            }
        }
        return refRolesCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefRoles getById(Integer refrolesId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefRoles by id: {}", refrolesId);
        RefRoles refRoles = this.wmGenericDao.findById(refrolesId);
        if (refRoles == null){
            LOGGER.debug("No RefRoles found with id: {}", refrolesId);
            throw new EntityNotFoundException(String.valueOf(refrolesId));
        }
        return refRoles;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefRoles findById(Integer refrolesId) {
        LOGGER.debug("Finding RefRoles by id: {}", refrolesId);
        return this.wmGenericDao.findById(refrolesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefRoles update(RefRoles refRoles) throws EntityNotFoundException {
        LOGGER.debug("Updating RefRoles with information: {}", refRoles);
        this.wmGenericDao.update(refRoles);

        Integer refrolesId = refRoles.getId();

        return this.wmGenericDao.findById(refrolesId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefRoles delete(Integer refrolesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefRoles with id: {}", refrolesId);
        RefRoles deleted = this.wmGenericDao.findById(refrolesId);
        if (deleted == null) {
            LOGGER.debug("No RefRoles found with id: {}", refrolesId);
            throw new EntityNotFoundException(String.valueOf(refrolesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefRoles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefRoles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefRoles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefRolesMobileFolders> findAssociatedRefRolesMobileFolderses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated refRolesMobileFolderses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refRoles.id = '" + id + "'");

        return refRolesMobileFoldersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserPsa> findAssociatedTblUserPsas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserPsas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refRoles.id = '" + id + "'");

        return tblUserPsaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefRolesMobileFoldersService instance
	 */
	protected void setRefRolesMobileFoldersService(RefRolesMobileFoldersService service) {
        this.refRolesMobileFoldersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserPsaService instance
	 */
	protected void setTblUserPsaService(TblUserPsaService service) {
        this.tblUserPsaService = service;
    }

}

