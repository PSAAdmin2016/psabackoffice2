/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefJobTitles;


/**
 * ServiceImpl object for domain model class RefJobTitles.
 *
 * @see RefJobTitles
 */
@Service("PSA.RefJobTitlesService")
@Validated
public class RefJobTitlesServiceImpl implements RefJobTitlesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefJobTitlesServiceImpl.class);


    @Autowired
    @Qualifier("PSA.RefJobTitlesDao")
    private WMGenericDao<RefJobTitles, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefJobTitles, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefJobTitles create(RefJobTitles refJobTitles) {
        LOGGER.debug("Creating a new RefJobTitles with information: {}", refJobTitles);

        RefJobTitles refJobTitlesCreated = this.wmGenericDao.create(refJobTitles);
        return refJobTitlesCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefJobTitles getById(Integer refjobtitlesId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefJobTitles by id: {}", refjobtitlesId);
        RefJobTitles refJobTitles = this.wmGenericDao.findById(refjobtitlesId);
        if (refJobTitles == null){
            LOGGER.debug("No RefJobTitles found with id: {}", refjobtitlesId);
            throw new EntityNotFoundException(String.valueOf(refjobtitlesId));
        }
        return refJobTitles;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefJobTitles findById(Integer refjobtitlesId) {
        LOGGER.debug("Finding RefJobTitles by id: {}", refjobtitlesId);
        return this.wmGenericDao.findById(refjobtitlesId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public RefJobTitles getByUniqueKeyId(int id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding RefJobTitles by unique keys: {}", uniqueKeyIdMap);
        RefJobTitles refJobTitles = this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);

        if (refJobTitles == null){
            LOGGER.debug("No RefJobTitles found with given unique key values: {}", uniqueKeyIdMap);
            throw new EntityNotFoundException(String.valueOf(uniqueKeyIdMap));
        }

        return refJobTitles;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefJobTitles update(RefJobTitles refJobTitles) throws EntityNotFoundException {
        LOGGER.debug("Updating RefJobTitles with information: {}", refJobTitles);
        this.wmGenericDao.update(refJobTitles);

        Integer refjobtitlesId = refJobTitles.getId();

        return this.wmGenericDao.findById(refjobtitlesId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefJobTitles delete(Integer refjobtitlesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefJobTitles with id: {}", refjobtitlesId);
        RefJobTitles deleted = this.wmGenericDao.findById(refjobtitlesId);
        if (deleted == null) {
            LOGGER.debug("No RefJobTitles found with id: {}", refjobtitlesId);
            throw new EntityNotFoundException(String.valueOf(refjobtitlesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefJobTitles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefJobTitles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefJobTitles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefJobTitles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefJobTitles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

