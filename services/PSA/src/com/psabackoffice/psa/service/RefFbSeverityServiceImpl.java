/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.RefFbSeverity;


/**
 * ServiceImpl object for domain model class RefFbSeverity.
 *
 * @see RefFbSeverity
 */
@Service("PSA.RefFbSeverityService")
@Validated
public class RefFbSeverityServiceImpl implements RefFbSeverityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefFbSeverityServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.FeedBackService")
	private FeedBackService feedBackService;

    @Autowired
    @Qualifier("PSA.RefFbSeverityDao")
    private WMGenericDao<RefFbSeverity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefFbSeverity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefFbSeverity create(RefFbSeverity refFbSeverity) {
        LOGGER.debug("Creating a new RefFbSeverity with information: {}", refFbSeverity);

        RefFbSeverity refFbSeverityCreated = this.wmGenericDao.create(refFbSeverity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refFbSeverityCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefFbSeverity getById(Integer reffbseverityId) {
        LOGGER.debug("Finding RefFbSeverity by id: {}", reffbseverityId);
        return this.wmGenericDao.findById(reffbseverityId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefFbSeverity findById(Integer reffbseverityId) {
        LOGGER.debug("Finding RefFbSeverity by id: {}", reffbseverityId);
        try {
            return this.wmGenericDao.findById(reffbseverityId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No RefFbSeverity found with id: {}", reffbseverityId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefFbSeverity update(RefFbSeverity refFbSeverity) {
        LOGGER.debug("Updating RefFbSeverity with information: {}", refFbSeverity);

        List<FeedBack> feedBacks = refFbSeverity.getFeedBacks();
        if(feedBacks != null && Hibernate.isInitialized(feedBacks)) {
            feedBacks.forEach(_feedBack -> _feedBack.setRefFbSeverity(refFbSeverity));
        }

        this.wmGenericDao.update(refFbSeverity);
        this.wmGenericDao.refresh(refFbSeverity);

        return refFbSeverity;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefFbSeverity delete(Integer reffbseverityId) {
        LOGGER.debug("Deleting RefFbSeverity with id: {}", reffbseverityId);
        RefFbSeverity deleted = this.wmGenericDao.findById(reffbseverityId);
        if (deleted == null) {
            LOGGER.debug("No RefFbSeverity found with id: {}", reffbseverityId);
            throw new EntityNotFoundException(String.valueOf(reffbseverityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(RefFbSeverity refFbSeverity) {
        LOGGER.debug("Deleting RefFbSeverity with {}", refFbSeverity);
        this.wmGenericDao.delete(refFbSeverity);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefFbSeverity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefFbSeverities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefFbSeverity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefFbSeverities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefFbSeverity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBack> findAssociatedFeedBacks(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refFbSeverity.id = '" + id + "'");

        return feedBackService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackService instance
	 */
	protected void setFeedBackService(FeedBackService service) {
        this.feedBackService = service;
    }

}

