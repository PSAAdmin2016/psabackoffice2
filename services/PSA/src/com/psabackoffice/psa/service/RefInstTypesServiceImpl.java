/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefInstTypes;


/**
 * ServiceImpl object for domain model class RefInstTypes.
 *
 * @see RefInstTypes
 */
@Service("PSA.RefInstTypesService")
public class RefInstTypesServiceImpl implements RefInstTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefInstTypesServiceImpl.class);


    @Autowired
    @Qualifier("PSA.RefInstTypesDao")
    private WMGenericDao<RefInstTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefInstTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefInstTypes create(RefInstTypes refInstTypes) {
        LOGGER.debug("Creating a new RefInstTypes with information: {}", refInstTypes);
        RefInstTypes refInstTypesCreated = this.wmGenericDao.create(refInstTypes);
        return refInstTypesCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefInstTypes getById(Integer refinsttypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefInstTypes by id: {}", refinsttypesId);
        RefInstTypes refInstTypes = this.wmGenericDao.findById(refinsttypesId);
        if (refInstTypes == null){
            LOGGER.debug("No RefInstTypes found with id: {}", refinsttypesId);
            throw new EntityNotFoundException(String.valueOf(refinsttypesId));
        }
        return refInstTypes;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefInstTypes findById(Integer refinsttypesId) {
        LOGGER.debug("Finding RefInstTypes by id: {}", refinsttypesId);
        return this.wmGenericDao.findById(refinsttypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefInstTypes update(RefInstTypes refInstTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating RefInstTypes with information: {}", refInstTypes);
        this.wmGenericDao.update(refInstTypes);

        Integer refinsttypesId = refInstTypes.getId();

        return this.wmGenericDao.findById(refinsttypesId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefInstTypes delete(Integer refinsttypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefInstTypes with id: {}", refinsttypesId);
        RefInstTypes deleted = this.wmGenericDao.findById(refinsttypesId);
        if (deleted == null) {
            LOGGER.debug("No RefInstTypes found with id: {}", refinsttypesId);
            throw new EntityNotFoundException(String.valueOf(refinsttypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefInstTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefInstTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefInstTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefInstTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefInstTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

