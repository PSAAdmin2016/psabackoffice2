/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefCraftClasses;
import com.psabackoffice.psa.TblUserPsa;


/**
 * ServiceImpl object for domain model class RefCraftClasses.
 *
 * @see RefCraftClasses
 */
@Service("PSA.RefCraftClassesService")
@Validated
public class RefCraftClassesServiceImpl implements RefCraftClassesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefCraftClassesServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserPsaService")
	private TblUserPsaService tblUserPsaService;

    @Autowired
    @Qualifier("PSA.RefCraftClassesDao")
    private WMGenericDao<RefCraftClasses, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefCraftClasses, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefCraftClasses create(RefCraftClasses refCraftClasses) {
        LOGGER.debug("Creating a new RefCraftClasses with information: {}", refCraftClasses);

        RefCraftClasses refCraftClassesCreated = this.wmGenericDao.create(refCraftClasses);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refCraftClassesCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefCraftClasses getById(Integer refcraftclassesId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefCraftClasses by id: {}", refcraftclassesId);
        return this.wmGenericDao.findById(refcraftclassesId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefCraftClasses findById(Integer refcraftclassesId) {
        LOGGER.debug("Finding RefCraftClasses by id: {}", refcraftclassesId);
        try {
            return this.wmGenericDao.findById(refcraftclassesId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No RefCraftClasses found with id: {}", refcraftclassesId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefCraftClasses update(RefCraftClasses refCraftClasses) throws EntityNotFoundException {
        LOGGER.debug("Updating RefCraftClasses with information: {}", refCraftClasses);

        List<TblUserPsa> tblUserPsas = refCraftClasses.getTblUserPsas();

        if(tblUserPsas != null && Hibernate.isInitialized(tblUserPsas)) {
            if(!tblUserPsas.isEmpty()) {
                for(TblUserPsa _tblUserPsa : tblUserPsas) {
                    _tblUserPsa.setRefCraftClasses(refCraftClasses);
                }
            }
        }

        this.wmGenericDao.update(refCraftClasses);
        this.wmGenericDao.refresh(refCraftClasses);

        return refCraftClasses;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefCraftClasses delete(Integer refcraftclassesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefCraftClasses with id: {}", refcraftclassesId);
        RefCraftClasses deleted = this.wmGenericDao.findById(refcraftclassesId);
        if (deleted == null) {
            LOGGER.debug("No RefCraftClasses found with id: {}", refcraftclassesId);
            throw new EntityNotFoundException(String.valueOf(refcraftclassesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(RefCraftClasses refCraftClasses) {
        LOGGER.debug("Deleting RefCraftClasses with {}", refCraftClasses);
        this.wmGenericDao.delete(refCraftClasses);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefCraftClasses> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefCraftClasses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefCraftClasses> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefCraftClasses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefCraftClasses to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserPsa> findAssociatedTblUserPsas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserPsas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refCraftClasses.id = '" + id + "'");

        return tblUserPsaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserPsaService instance
	 */
	protected void setTblUserPsaService(TblUserPsaService service) {
        this.tblUserPsaService = service;
    }

}

