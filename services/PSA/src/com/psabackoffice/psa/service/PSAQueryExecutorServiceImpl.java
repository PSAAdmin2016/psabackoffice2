/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.models.query.*;

@Service
public class PSAQueryExecutorServiceImpl implements PSAQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PSAQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("PSAWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetForemenBySuperResponse> executeGetForemenBySuper(Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetForemenBySuper", params, GetForemenBySuperResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetForemenBySuper(ExportType exportType, Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.exportNamedQueryData("GetForemenBySuper", params, exportType, GetForemenBySuperResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetSteelActivityTypesResponse> executeGetSteelActivityTypes(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSteelActivityTypes", params, GetSteelActivityTypesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetSteelActivityTypes(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSteelActivityTypes", params, exportType, GetSteelActivityTypesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<SuperintendentsResponse> executeSuperintendents(Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.executeNamedQuery("Superintendents", params, SuperintendentsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportSuperintendents(ExportType exportType, Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.exportNamedQueryData("Superintendents", params, exportType, SuperintendentsResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertUserPSA(InsertUserPsaRequest insertUserPsaRequest) {
        Map params = new HashMap(13);

        params.put("PerformanceEmployeeID", insertUserPsaRequest.getPerformanceEmployeeId());
        params.put("FirstName", insertUserPsaRequest.getFirstName());
        params.put("LastName", insertUserPsaRequest.getLastName());
        params.put("Email", insertUserPsaRequest.getEmail());
        params.put("Password", insertUserPsaRequest.getPassword());
        params.put("MobileUser", insertUserPsaRequest.getMobileUser());
        params.put("ActiveUser", insertUserPsaRequest.getActiveUser());
        params.put("ModifiedBy", insertUserPsaRequest.getModifiedBy());
        params.put("DisciplineId", insertUserPsaRequest.getDisciplineId());
        params.put("CraftId", insertUserPsaRequest.getCraftId());
        params.put("CraftClassId", insertUserPsaRequest.getCraftClassId());
        params.put("RoleId", insertUserPsaRequest.getRoleId());
        params.put("JobNumber", insertUserPsaRequest.getJobNumber());

        return queryExecutor.executeNamedQueryForUpdate("InsertUserPSA", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertAssignedJobNumber(InsertAssignedJobNumberRequest insertAssignedJobNumberRequest) {
        Map params = new HashMap(2);

        params.put("UserId", insertAssignedJobNumberRequest.getUserId());
        params.put("JobNumber", insertAssignedJobNumberRequest.getJobNumber());

        return queryExecutor.executeNamedQueryForUpdate("InsertAssignedJobNumber", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeUpdateChatAllLastRead(UpdateChatAllLastReadRequest updateChatAllLastReadRequest) {
        Map params = new HashMap(1);

        params.put("UserID", updateChatAllLastReadRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateChatAllLastRead", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeUpdateChatMessageStatus(UpdateChatMessageStatusRequest updateChatMessageStatusRequest) {
        Map params = new HashMap(2);

        params.put("ConversationID", updateChatMessageStatusRequest.getConversationId());
        params.put("UserID", updateChatMessageStatusRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateChatMessageStatus", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeDeleteUserAssignedApps(Integer userId, Integer mobileAppGroupId) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("MobileAppGroupID", mobileAppGroupId);

        return queryExecutor.executeNamedQueryForUpdate("DeleteUserAssignedApps", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetJobNumberCountByJobNumberResponse> executeGetJobNumberCountByJobNumber(Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.executeNamedQuery("GetJobNumberCountByJobNumber", params, GetJobNumberCountByJobNumberResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetJobNumberCountByJobNumber(ExportType exportType, Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.exportNamedQueryData("GetJobNumberCountByJobNumber", params, exportType, GetJobNumberCountByJobNumberResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetChatConversationsByLoggedInUserResponse> executeGetChatConversationsByLoggedInUser(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetChatConversationsByLoggedInUser", params, GetChatConversationsByLoggedInUserResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetChatConversationsByLoggedInUser(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetChatConversationsByLoggedInUser", params, exportType, GetChatConversationsByLoggedInUserResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetUsersManagersResponse> executeGetUsersManagers(Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.executeNamedQuery("GetUsersManagers", params, GetUsersManagersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetUsersManagers(ExportType exportType, Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.exportNamedQueryData("GetUsersManagers", params, exportType, GetUsersManagersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetChatMessagesByConversationIdResponse> executeGetChatMessagesByConversationID(Integer conversationId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ConversationID", conversationId);

        return queryExecutor.executeNamedQuery("GetChatMessagesByConversationID", params, GetChatMessagesByConversationIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetChatMessagesByConversationID(ExportType exportType, Integer conversationId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ConversationID", conversationId);

        return queryExecutor.exportNamedQueryData("GetChatMessagesByConversationID", params, exportType, GetChatMessagesByConversationIdResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertLoginFailure(InsertLoginFailureRequest insertLoginFailureRequest) {
        Map params = new HashMap(2);

        params.put("EnteredUsername", insertLoginFailureRequest.getEnteredUsername());
        params.put("EnteredPassword", insertLoginFailureRequest.getEnteredPassword());

        return queryExecutor.executeNamedQueryForUpdate("InsertLoginFailure", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetRolesByDisciplineResponse> executeGetRolesByDiscipline(Integer disciplineId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("DisciplineID", disciplineId);

        return queryExecutor.executeNamedQuery("GetRolesByDiscipline", params, GetRolesByDisciplineResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetRolesByDiscipline(ExportType exportType, Integer disciplineId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("DisciplineID", disciplineId);

        return queryExecutor.exportNamedQueryData("GetRolesByDiscipline", params, exportType, GetRolesByDisciplineResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertUserCreds(InsertUserCredsRequest insertUserCredsRequest) {
        Map params = new HashMap(3);

        params.put("UserID", insertUserCredsRequest.getUserId());
        params.put("UserName", insertUserCredsRequest.getUserName());
        params.put("Password", insertUserCredsRequest.getPassword());

        return queryExecutor.executeNamedQueryForUpdate("InsertUserCreds", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeUpdateUserCredsUserName(UpdateUserCredsUserNameRequest updateUserCredsUserNameRequest) {
        Map params = new HashMap(2);

        params.put("UserName", updateUserCredsUserNameRequest.getUserName());
        params.put("UserID", updateUserCredsUserNameRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateUserCredsUserName", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertLoginSuccess(InsertLoginSuccessRequest insertLoginSuccessRequest) {
        Map params = new HashMap(1);

        params.put("EnteredUsername", insertLoginSuccessRequest.getEnteredUsername());

        return queryExecutor.executeNamedQueryForUpdate("InsertLoginSuccess", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetChatAllLatestTimeStampResponse> executeGetChatAllLatestTimeStamp(String userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetChatAllLatestTimeStamp", params, GetChatAllLatestTimeStampResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetChatAllLatestTimeStamp(ExportType exportType, String userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetChatAllLatestTimeStamp", params, exportType, GetChatAllLatestTimeStampResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertFeedbackTicket(InsertFeedbackTicketRequest insertFeedbackTicketRequest) {
        Map params = new HashMap(4);

        params.put("UserID", insertFeedbackTicketRequest.getUserId());
        params.put("FeedbackType", insertFeedbackTicketRequest.getFeedbackType());
        params.put("FBSubType", insertFeedbackTicketRequest.getFbsubType());
        params.put("ErrorSeverity", insertFeedbackTicketRequest.getErrorSeverity());

        return queryExecutor.executeNamedQueryForUpdate("InsertFeedbackTicket", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetDefaultJobNumberResponse> executeGetDefaultJobNumber(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetDefaultJobNumber", params, GetDefaultJobNumberResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetDefaultJobNumber(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetDefaultJobNumber", params, exportType, GetDefaultJobNumberResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeUpdateUserPSA(UpdateUserPsaRequest updateUserPsaRequest) {
        Map params = new HashMap(13);

        params.put("PerformanceEmployeeId", updateUserPsaRequest.getPerformanceEmployeeId());
        params.put("FirstName", updateUserPsaRequest.getFirstName());
        params.put("LastName", updateUserPsaRequest.getLastName());
        params.put("Nickname", updateUserPsaRequest.getNickname());
        params.put("Email", updateUserPsaRequest.getEmail());
        params.put("ActiveUser", updateUserPsaRequest.getActiveUser());
        params.put("ModifiedBy", updateUserPsaRequest.getModifiedBy());
        params.put("DisciplineId", updateUserPsaRequest.getDisciplineId());
        params.put("CraftId", updateUserPsaRequest.getCraftId());
        params.put("CraftClassId", updateUserPsaRequest.getCraftClassId());
        params.put("RoleId", updateUserPsaRequest.getRoleId());
        params.put("DefaultJobNumberId", updateUserPsaRequest.getDefaultJobNumberId());
        params.put("UserID", updateUserPsaRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateUserPSA", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetFbnotesByFbidResponse> executeGetFBNotesByFBID(Integer feedbackId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FeedbackID", feedbackId);

        return queryExecutor.executeNamedQuery("GetFBNotesByFBID", params, GetFbnotesByFbidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetFBNotesByFBID(ExportType exportType, Integer feedbackId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FeedbackID", feedbackId);

        return queryExecutor.exportNamedQueryData("GetFBNotesByFBID", params, exportType, GetFbnotesByFbidResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertChatMessage(InsertChatMessageRequest insertChatMessageRequest) {
        Map params = new HashMap(3);

        params.put("ConversationID", insertChatMessageRequest.getConversationId());
        params.put("UserID", insertChatMessageRequest.getUserId());
        params.put("Message", insertChatMessageRequest.getMessage());

        return queryExecutor.executeNamedQueryForUpdate("InsertChatMessage", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeDeleteAssignedJobNumber(Integer userId, String jobNumber) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("JobNumber", jobNumber);

        return queryExecutor.executeNamedQueryForUpdate("DeleteAssignedJobNumber", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetUsersForemenResponse> executeGetUsersForemen(Integer jobNumber, String disciplineId, String pm, String constM, String siteM, String areaM, String super_, Pageable pageable) {
        Map params = new HashMap(7);

        params.put("JobNumber", jobNumber);
        params.put("DisciplineID", disciplineId);
        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);

        return queryExecutor.executeNamedQuery("GetUsersForemen", params, GetUsersForemenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetUsersForemen(ExportType exportType, Integer jobNumber, String disciplineId, String pm, String constM, String siteM, String areaM, String super_, Pageable pageable) {
        Map params = new HashMap(7);

        params.put("JobNumber", jobNumber);
        params.put("DisciplineID", disciplineId);
        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);

        return queryExecutor.exportNamedQueryData("GetUsersForemen", params, exportType, GetUsersForemenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetFbsubTypeByTypeResponse> executeGetFBSubTypeByType(Integer fbtype, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FBType", fbtype);

        return queryExecutor.executeNamedQuery("GetFBSubTypeByType", params, GetFbsubTypeByTypeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetFBSubTypeByType(ExportType exportType, Integer fbtype, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FBType", fbtype);

        return queryExecutor.exportNamedQueryData("GetFBSubTypeByType", params, exportType, GetFbsubTypeByTypeResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertFeedbackNotes(InsertFeedbackNotesRequest insertFeedbackNotesRequest) {
        Map params = new HashMap(2);

        params.put("UserID", insertFeedbackNotesRequest.getUserId());
        params.put("Notes", insertFeedbackNotesRequest.getNotes());

        return queryExecutor.executeNamedQueryForUpdate("InsertFeedbackNotes", params);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeUpdateUserCreds(UpdateUserCredsRequest updateUserCredsRequest) {
        Map params = new HashMap(3);

        params.put("UserName", updateUserCredsRequest.getUserName());
        params.put("Password", updateUserCredsRequest.getPassword());
        params.put("UserID", updateUserCredsRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateUserCreds", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetUsersSupersResponse> executeGetUsersSupers(Integer jobNumber, String disciplineId, String pm, String constM, String siteM, String areaM, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("JobNumber", jobNumber);
        params.put("DisciplineID", disciplineId);
        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);

        return queryExecutor.executeNamedQuery("GetUsersSupers", params, GetUsersSupersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetUsersSupers(ExportType exportType, Integer jobNumber, String disciplineId, String pm, String constM, String siteM, String areaM, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("JobNumber", jobNumber);
        params.put("DisciplineID", disciplineId);
        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);

        return queryExecutor.exportNamedQueryData("GetUsersSupers", params, exportType, GetUsersSupersResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertUserAssignedApps(InsertUserAssignedAppsRequest insertUserAssignedAppsRequest) {
        Map params = new HashMap(2);

        params.put("UserID", insertUserAssignedAppsRequest.getUserId());
        params.put("MobileAppGroupID", insertUserAssignedAppsRequest.getMobileAppGroupId());

        return queryExecutor.executeNamedQueryForUpdate("InsertUserAssignedApps", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetAssignedJobNumbersResponse> executeGetAssignedJobNumbers(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetAssignedJobNumbers", params, GetAssignedJobNumbersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetAssignedJobNumbers(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetAssignedJobNumbers", params, exportType, GetAssignedJobNumbersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ManagersResponse> executeManagers(Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.executeNamedQuery("Managers", params, ManagersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportManagers(ExportType exportType, Integer jobNumber, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("JobNumber", jobNumber);

        return queryExecutor.exportNamedQueryData("Managers", params, exportType, ManagersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetJobSitesResponse> executeGetJobSites(String siteName, String city, String state, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("SiteName", siteName);
        params.put("City", city);
        params.put("State", state);

        return queryExecutor.executeNamedQuery("GetJobSites", params, GetJobSitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetJobSites(ExportType exportType, String siteName, String city, String state, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("SiteName", siteName);
        params.put("City", city);
        params.put("State", state);

        return queryExecutor.exportNamedQueryData("GetJobSites", params, exportType, GetJobSitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetSettingDashUpdateIntResponse> executeGetSettingDashUpdateInt(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingDashUpdateInt", params, GetSettingDashUpdateIntResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetSettingDashUpdateInt(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingDashUpdateInt", params, exportType, GetSettingDashUpdateIntResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetChatAllLastReadResponse> executeGetChatAllLastRead(String userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetChatAllLastRead", params, GetChatAllLastReadResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetChatAllLastRead(ExportType exportType, String userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetChatAllLastRead", params, exportType, GetChatAllLastReadResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetChatRecipientNameResponse> executeGetChatRecipientName(Integer conversationId, Integer userId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("ConversationID", conversationId);
        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetChatRecipientName", params, GetChatRecipientNameResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetChatRecipientName(ExportType exportType, Integer conversationId, Integer userId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("ConversationID", conversationId);
        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetChatRecipientName", params, exportType, GetChatRecipientNameResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetPsausersResponse> executeGetPSAUsers(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetPSAUsers", params, GetPsausersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetPSAUsers(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetPSAUsers", params, exportType, GetPsausersResponse.class, pageable);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Integer executeInsertFeedbackTicketNotes(InsertFeedbackTicketNotesRequest insertFeedbackTicketNotesRequest) {
        Map params = new HashMap(3);

        params.put("TicketID", insertFeedbackTicketNotesRequest.getTicketId());
        params.put("UserID", insertFeedbackTicketNotesRequest.getUserId());
        params.put("Note", insertFeedbackTicketNotesRequest.getNote());

        return queryExecutor.executeNamedQueryForUpdate("InsertFeedbackTicketNotes", params);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<GetHelpMenuVideosResponse> executeGetHelpMenuVideos(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetHelpMenuVideos", params, GetHelpMenuVideosResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable exportGetHelpMenuVideos(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetHelpMenuVideos", params, exportType, GetHelpMenuVideosResponse.class, pageable);
    }

}


