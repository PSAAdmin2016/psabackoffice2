/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.RefFbSubTypes;


/**
 * ServiceImpl object for domain model class RefFbSubTypes.
 *
 * @see RefFbSubTypes
 */
@Service("PSA.RefFbSubTypesService")
@Validated
public class RefFbSubTypesServiceImpl implements RefFbSubTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefFbSubTypesServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.FeedBackService")
	private FeedBackService feedBackService;

    @Autowired
    @Qualifier("PSA.RefFbSubTypesDao")
    private WMGenericDao<RefFbSubTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefFbSubTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefFbSubTypes create(RefFbSubTypes refFbSubTypes) {
        LOGGER.debug("Creating a new RefFbSubTypes with information: {}", refFbSubTypes);

        RefFbSubTypes refFbSubTypesCreated = this.wmGenericDao.create(refFbSubTypes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refFbSubTypesCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefFbSubTypes getById(Integer reffbsubtypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefFbSubTypes by id: {}", reffbsubtypesId);
        return this.wmGenericDao.findById(reffbsubtypesId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefFbSubTypes findById(Integer reffbsubtypesId) {
        LOGGER.debug("Finding RefFbSubTypes by id: {}", reffbsubtypesId);
        try {
            return this.wmGenericDao.findById(reffbsubtypesId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No RefFbSubTypes found with id: {}", reffbsubtypesId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefFbSubTypes update(RefFbSubTypes refFbSubTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating RefFbSubTypes with information: {}", refFbSubTypes);

        List<FeedBack> feedBacks = refFbSubTypes.getFeedBacks();

        if(feedBacks != null && Hibernate.isInitialized(feedBacks)) {
            if(!feedBacks.isEmpty()) {
                for(FeedBack _feedBack : feedBacks) {
                    _feedBack.setRefFbSubTypes(refFbSubTypes);
                }
            }
        }

        this.wmGenericDao.update(refFbSubTypes);
        this.wmGenericDao.refresh(refFbSubTypes);

        // Deleting children which are not present in the list.
        if(feedBacks != null && Hibernate.isInitialized(feedBacks) && !feedBacks.isEmpty()) {
            List<FeedBack> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, FeedBack.class,
                        new DaoUtils.ChildrenFilter("refFbSubTypes", refFbSubTypes, feedBacks)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            for(FeedBack _feedBack : _remainingChildren) {
                feedBackService.delete(_feedBack);
            }
            refFbSubTypes.setFeedBacks(feedBacks);
        }

        return refFbSubTypes;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefFbSubTypes delete(Integer reffbsubtypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefFbSubTypes with id: {}", reffbsubtypesId);
        RefFbSubTypes deleted = this.wmGenericDao.findById(reffbsubtypesId);
        if (deleted == null) {
            LOGGER.debug("No RefFbSubTypes found with id: {}", reffbsubtypesId);
            throw new EntityNotFoundException(String.valueOf(reffbsubtypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(RefFbSubTypes refFbSubTypes) {
        LOGGER.debug("Deleting RefFbSubTypes with {}", refFbSubTypes);
        this.wmGenericDao.delete(refFbSubTypes);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefFbSubTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefFbSubTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefFbSubTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefFbSubTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefFbSubTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<FeedBack> findAssociatedFeedBacks(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feedBacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("refFbSubTypes.id = '" + id + "'");

        return feedBackService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeedBackService instance
	 */
	protected void setFeedBackService(FeedBackService service) {
        this.feedBackService = service;
    }

}

