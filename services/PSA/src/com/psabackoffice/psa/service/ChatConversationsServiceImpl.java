/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.ChatConversationMembers;
import com.psabackoffice.psa.ChatConversations;
import com.psabackoffice.psa.ChatMessages;


/**
 * ServiceImpl object for domain model class ChatConversations.
 *
 * @see ChatConversations
 */
@Service("PSA.ChatConversationsService")
@Validated
public class ChatConversationsServiceImpl implements ChatConversationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatConversationsServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.ChatConversationMembersService")
	private ChatConversationMembersService chatConversationMembersService;

    @Lazy
    @Autowired
	@Qualifier("PSA.ChatMessagesService")
	private ChatMessagesService chatMessagesService;

    @Autowired
    @Qualifier("PSA.ChatConversationsDao")
    private WMGenericDao<ChatConversations, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ChatConversations, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public ChatConversations create(ChatConversations chatConversations) {
        LOGGER.debug("Creating a new ChatConversations with information: {}", chatConversations);
        List<ChatConversationMembers> chatConversationMemberses = chatConversations.getChatConversationMemberses();
        List<ChatMessages> chatMessageses = chatConversations.getChatMessageses();

        ChatConversations chatConversationsCreated = this.wmGenericDao.create(chatConversations);
        if(chatConversationMemberses != null) {
            for(ChatConversationMembers _chatConversationMembers : chatConversationMemberses) {
                _chatConversationMembers.setChatConversations(chatConversationsCreated);
                LOGGER.debug("Creating a new child ChatConversationMembers with information: {}", _chatConversationMembers);
                chatConversationMembersService.create(_chatConversationMembers);
            }
        }

        if(chatMessageses != null) {
            for(ChatMessages _chatMessages : chatMessageses) {
                _chatMessages.setChatConversations(chatConversationsCreated);
                LOGGER.debug("Creating a new child ChatMessages with information: {}", _chatMessages);
                chatMessagesService.create(_chatMessages);
            }
        }
        return chatConversationsCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public ChatConversations getById(Integer chatconversationsId) throws EntityNotFoundException {
        LOGGER.debug("Finding ChatConversations by id: {}", chatconversationsId);
        ChatConversations chatConversations = this.wmGenericDao.findById(chatconversationsId);
        if (chatConversations == null){
            LOGGER.debug("No ChatConversations found with id: {}", chatconversationsId);
            throw new EntityNotFoundException(String.valueOf(chatconversationsId));
        }
        return chatConversations;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public ChatConversations findById(Integer chatconversationsId) {
        LOGGER.debug("Finding ChatConversations by id: {}", chatconversationsId);
        return this.wmGenericDao.findById(chatconversationsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public ChatConversations update(ChatConversations chatConversations) throws EntityNotFoundException {
        LOGGER.debug("Updating ChatConversations with information: {}", chatConversations);
        this.wmGenericDao.update(chatConversations);

        Integer chatconversationsId = chatConversations.getConversationId();

        return this.wmGenericDao.findById(chatconversationsId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public ChatConversations delete(Integer chatconversationsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ChatConversations with id: {}", chatconversationsId);
        ChatConversations deleted = this.wmGenericDao.findById(chatconversationsId);
        if (deleted == null) {
            LOGGER.debug("No ChatConversations found with id: {}", chatconversationsId);
            throw new EntityNotFoundException(String.valueOf(chatconversationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<ChatConversations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ChatConversations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatConversations> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ChatConversations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table ChatConversations to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatConversationMembers> findAssociatedChatConversationMemberses(Integer conversationId, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatConversationMemberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("chatConversations.conversationId = '" + conversationId + "'");

        return chatConversationMembersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<ChatMessages> findAssociatedChatMessageses(Integer conversationId, Pageable pageable) {
        LOGGER.debug("Fetching all associated chatMessageses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("chatConversations.conversationId = '" + conversationId + "'");

        return chatMessagesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatConversationMembersService instance
	 */
	protected void setChatConversationMembersService(ChatConversationMembersService service) {
        this.chatConversationMembersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatMessagesService instance
	 */
	protected void setChatMessagesService(ChatMessagesService service) {
        this.chatMessagesService = service;
    }

}

