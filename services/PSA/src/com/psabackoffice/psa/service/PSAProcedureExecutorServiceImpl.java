/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.psabackoffice.psa.models.procedure.*;

@Service
public class PSAProcedureExecutorServiceImpl implements PSAProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PSAProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("PSAWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToTrackerCivilResponse executeLandingToTrackerCivil(String jobNumber) {
        Map params = new HashMap(3);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToTrackerCivil", params, LandingToTrackerCivilResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToTrackerEquipResponse executeLandingToTrackerEquip(String jobNumber) {
        Map params = new HashMap(3);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToTrackerEquip", params, LandingToTrackerEquipResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public CreateNewJobDbResponse executeCreateNewJobDB(CreateNewJobDbRequest createNewJobDbRequest) {
        Map params = new HashMap(2);

        params.put("jobNumber", createNewJobDbRequest.getJobNumber());

        return procedureExecutor.executeNamedProcedure("CreateNewJobDB", params, CreateNewJobDbResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Void executeImportInstalledQuantitiesCivil(String jobNumber) {
        Map params = new HashMap(1);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("ImportInstalledQuantitiesCivil", params, Void.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public ImportInstalledQuantitiesPipeResponse executeImportInstalledQuantitiesPipe(Integer jobNumber, Integer userId) {
        Map params = new HashMap(4);

        params.put("JobNumber", jobNumber);
        params.put("UserID", userId);

        return procedureExecutor.executeNamedProcedure("ImportInstalledQuantitiesPipe", params, ImportInstalledQuantitiesPipeResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToPipeSpoolsResponse executeLandingToPipeSpools(String jobNumber) {
        Map params = new HashMap(3);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToPipeSpools", params, LandingToPipeSpoolsResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public CreateNewConversationResponse executeCreateNewConversation(CreateNewConversationRequest createNewConversationRequest) {
        Map params = new HashMap(4);

        params.put("varCreator", createNewConversationRequest.getVarCreator());
        params.put("varRecipient", createNewConversationRequest.getVarRecipient());

        return procedureExecutor.executeNamedProcedure("CreateNewConversation", params, CreateNewConversationResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Void executeImportInstalledQuantitiesEquip(String jobNumber) {
        Map params = new HashMap(1);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("ImportInstalledQuantitiesEquip", params, Void.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public Void executeImportInstalledQuantitiesSteel(String jobNumber) {
        Map params = new HashMap(1);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("ImportInstalledQuantitiesSteel", params, Void.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToWeldSpecProceduresResponse executeLandingToWeldSpecProcedures(String jobNumber) {
        Map params = new HashMap(3);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToWeldSpecProcedures", params, LandingToWeldSpecProceduresResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToTrackerSteelResponse executeLandingToTrackerSteel(String jobNumber) {
        Map params = new HashMap(3);

        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToTrackerSteel", params, LandingToTrackerSteelResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public ValidateLandingDataResponse executeValidateLandingData(String tableName, String jobNumber) {
        Map params = new HashMap(4);

        params.put("tableName", tableName);
        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("ValidateLandingData", params, ValidateLandingDataResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public LandingToTrackerPipeResponse executeLandingToTrackerPipe(String jobNumber) {
        Map params = new HashMap(3);

        params.put("JobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("LandingToTrackerPipe", params, LandingToTrackerPipeResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public GetImportTotalsResponse executeGetImportTotals(String tableNameLanding, String tableNameDestination, String jobNumber) {
        Map params = new HashMap(8);

        params.put("tableNameLanding", tableNameLanding);
        params.put("tableNameDestination", tableNameDestination);
        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("GetImportTotals", params, GetImportTotalsResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public CompareColumnsResponse executeCompareColumns(String tableName, String jobNumber) {
        Map params = new HashMap(5);

        params.put("tableName", tableName);
        params.put("jobNumber", jobNumber);

        return procedureExecutor.executeNamedProcedure("CompareColumns", params, CompareColumnsResponse.class);
    }

    @Transactional(value = "PSATransactionManager")
    @Override
    public CreateNewJobSeedsResponse executeCreateNewJobSeeds(CreateNewJobSeedsRequest createNewJobSeedsRequest) {
        Map params = new HashMap(2);

        params.put("jobNumber", createNewJobSeedsRequest.getJobNumber());

        return procedureExecutor.executeNamedProcedure("CreateNewJobSeeds", params, CreateNewJobSeedsResponse.class);
    }

}


