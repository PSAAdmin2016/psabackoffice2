/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefChatStatus;


/**
 * ServiceImpl object for domain model class RefChatStatus.
 *
 * @see RefChatStatus
 */
@Service("PSA.RefChatStatusService")
@Validated
public class RefChatStatusServiceImpl implements RefChatStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefChatStatusServiceImpl.class);


    @Autowired
    @Qualifier("PSA.RefChatStatusDao")
    private WMGenericDao<RefChatStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefChatStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefChatStatus create(RefChatStatus refChatStatus) {
        LOGGER.debug("Creating a new RefChatStatus with information: {}", refChatStatus);

        RefChatStatus refChatStatusCreated = this.wmGenericDao.create(refChatStatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refChatStatusCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefChatStatus getById(Integer refchatstatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding RefChatStatus by id: {}", refchatstatusId);
        return this.wmGenericDao.findById(refchatstatusId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefChatStatus findById(Integer refchatstatusId) {
        LOGGER.debug("Finding RefChatStatus by id: {}", refchatstatusId);
        try {
            return this.wmGenericDao.findById(refchatstatusId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No RefChatStatus found with id: {}", refchatstatusId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefChatStatus update(RefChatStatus refChatStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating RefChatStatus with information: {}", refChatStatus);

        this.wmGenericDao.update(refChatStatus);
        this.wmGenericDao.refresh(refChatStatus);

        return refChatStatus;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefChatStatus delete(Integer refchatstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefChatStatus with id: {}", refchatstatusId);
        RefChatStatus deleted = this.wmGenericDao.findById(refchatstatusId);
        if (deleted == null) {
            LOGGER.debug("No RefChatStatus found with id: {}", refchatstatusId);
            throw new EntityNotFoundException(String.valueOf(refchatstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(RefChatStatus refChatStatus) {
        LOGGER.debug("Deleting RefChatStatus with {}", refChatStatus);
        this.wmGenericDao.delete(refChatStatus);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefChatStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefChatStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefChatStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefChatStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefChatStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

