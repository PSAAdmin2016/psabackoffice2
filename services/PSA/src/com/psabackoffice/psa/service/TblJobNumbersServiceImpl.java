/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.TblCrews;
import com.psabackoffice.psa.TblJobNumbers;
import com.psabackoffice.psa.TblUserJobNumbers;
import com.psabackoffice.psa.TblUserPsa;


/**
 * ServiceImpl object for domain model class TblJobNumbers.
 *
 * @see TblJobNumbers
 */
@Service("PSA.TblJobNumbersService")
@Validated
public class TblJobNumbersServiceImpl implements TblJobNumbersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblJobNumbersServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserJobNumbersService")
	private TblUserJobNumbersService tblUserJobNumbersService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblCrewsService")
	private TblCrewsService tblCrewsService;

    @Lazy
    @Autowired
	@Qualifier("PSA.TblUserPsaService")
	private TblUserPsaService tblUserPsaService;

    @Autowired
    @Qualifier("PSA.TblJobNumbersDao")
    private WMGenericDao<TblJobNumbers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TblJobNumbers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public TblJobNumbers create(TblJobNumbers tblJobNumbers) {
        LOGGER.debug("Creating a new TblJobNumbers with information: {}", tblJobNumbers);
        List<TblCrews> tblCrewses = tblJobNumbers.getTblCrewses();
        List<TblUserJobNumbers> tblUserJobNumberses = tblJobNumbers.getTblUserJobNumberses();
        List<TblUserPsa> tblUserPsas = tblJobNumbers.getTblUserPsas();

        TblJobNumbers tblJobNumbersCreated = this.wmGenericDao.create(tblJobNumbers);
        if(tblCrewses != null) {
            for(TblCrews _tblCrews : tblCrewses) {
                _tblCrews.setTblJobNumbers(tblJobNumbersCreated);
                LOGGER.debug("Creating a new child TblCrews with information: {}", _tblCrews);
                tblCrewsService.create(_tblCrews);
            }
        }

        if(tblUserJobNumberses != null) {
            for(TblUserJobNumbers _tblUserJobNumbers : tblUserJobNumberses) {
                _tblUserJobNumbers.setTblJobNumbers(tblJobNumbersCreated);
                LOGGER.debug("Creating a new child TblUserJobNumbers with information: {}", _tblUserJobNumbers);
                tblUserJobNumbersService.create(_tblUserJobNumbers);
            }
        }

        if(tblUserPsas != null) {
            for(TblUserPsa _tblUserPsa : tblUserPsas) {
                _tblUserPsa.setTblJobNumbers(tblJobNumbersCreated);
                LOGGER.debug("Creating a new child TblUserPsa with information: {}", _tblUserPsa);
                tblUserPsaService.create(_tblUserPsa);
            }
        }
        return tblJobNumbersCreated;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblJobNumbers getById(Integer tbljobnumbersId) throws EntityNotFoundException {
        LOGGER.debug("Finding TblJobNumbers by id: {}", tbljobnumbersId);
        TblJobNumbers tblJobNumbers = this.wmGenericDao.findById(tbljobnumbersId);
        if (tblJobNumbers == null){
            LOGGER.debug("No TblJobNumbers found with id: {}", tbljobnumbersId);
            throw new EntityNotFoundException(String.valueOf(tbljobnumbersId));
        }
        return tblJobNumbers;
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public TblJobNumbers findById(Integer tbljobnumbersId) {
        LOGGER.debug("Finding TblJobNumbers by id: {}", tbljobnumbersId);
        return this.wmGenericDao.findById(tbljobnumbersId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public TblJobNumbers update(TblJobNumbers tblJobNumbers) throws EntityNotFoundException {
        LOGGER.debug("Updating TblJobNumbers with information: {}", tblJobNumbers);
        this.wmGenericDao.update(tblJobNumbers);

        Integer tbljobnumbersId = tblJobNumbers.getJobNumber();

        return this.wmGenericDao.findById(tbljobnumbersId);
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public TblJobNumbers delete(Integer tbljobnumbersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TblJobNumbers with id: {}", tbljobnumbersId);
        TblJobNumbers deleted = this.wmGenericDao.findById(tbljobnumbersId);
        if (deleted == null) {
            LOGGER.debug("No TblJobNumbers found with id: {}", tbljobnumbersId);
            throw new EntityNotFoundException(String.valueOf(tbljobnumbersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<TblJobNumbers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TblJobNumbers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblJobNumbers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TblJobNumbers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table TblJobNumbers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblCrews> findAssociatedTblCrewses(Integer jobNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblCrewses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblJobNumbers.jobNumber = '" + jobNumber + "'");

        return tblCrewsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserJobNumbers> findAssociatedTblUserJobNumberses(Integer jobNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserJobNumberses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblJobNumbers.jobNumber = '" + jobNumber + "'");

        return tblUserJobNumbersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<TblUserPsa> findAssociatedTblUserPsas(Integer jobNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated tblUserPsas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tblJobNumbers.jobNumber = '" + jobNumber + "'");

        return tblUserPsaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserJobNumbersService instance
	 */
	protected void setTblUserJobNumbersService(TblUserJobNumbersService service) {
        this.tblUserJobNumbersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblCrewsService instance
	 */
	protected void setTblCrewsService(TblCrewsService service) {
        this.tblCrewsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserPsaService instance
	 */
	protected void setTblUserPsaService(TblUserPsaService service) {
        this.tblUserPsaService = service;
    }

}

