/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.psa.RefWeldMaterials;


/**
 * ServiceImpl object for domain model class RefWeldMaterials.
 *
 * @see RefWeldMaterials
 */
@Service("PSA.RefWeldMaterialsService")
@Validated
public class RefWeldMaterialsServiceImpl implements RefWeldMaterialsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefWeldMaterialsServiceImpl.class);


    @Autowired
    @Qualifier("PSA.RefWeldMaterialsDao")
    private WMGenericDao<RefWeldMaterials, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RefWeldMaterials, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PSATransactionManager")
    @Override
	public RefWeldMaterials create(RefWeldMaterials refWeldMaterials) {
        LOGGER.debug("Creating a new RefWeldMaterials with information: {}", refWeldMaterials);

        RefWeldMaterials refWeldMaterialsCreated = this.wmGenericDao.create(refWeldMaterials);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(refWeldMaterialsCreated);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefWeldMaterials getById(Integer refweldmaterialsId) {
        LOGGER.debug("Finding RefWeldMaterials by id: {}", refweldmaterialsId);
        return this.wmGenericDao.findById(refweldmaterialsId);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public RefWeldMaterials findById(Integer refweldmaterialsId) {
        LOGGER.debug("Finding RefWeldMaterials by id: {}", refweldmaterialsId);
        try {
            return this.wmGenericDao.findById(refweldmaterialsId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No RefWeldMaterials found with id: {}", refweldmaterialsId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PSATransactionManager")
	@Override
	public RefWeldMaterials update(RefWeldMaterials refWeldMaterials) {
        LOGGER.debug("Updating RefWeldMaterials with information: {}", refWeldMaterials);

        this.wmGenericDao.update(refWeldMaterials);
        this.wmGenericDao.refresh(refWeldMaterials);

        return refWeldMaterials;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public RefWeldMaterials delete(Integer refweldmaterialsId) {
        LOGGER.debug("Deleting RefWeldMaterials with id: {}", refweldmaterialsId);
        RefWeldMaterials deleted = this.wmGenericDao.findById(refweldmaterialsId);
        if (deleted == null) {
            LOGGER.debug("No RefWeldMaterials found with id: {}", refweldmaterialsId);
            throw new EntityNotFoundException(String.valueOf(refweldmaterialsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "PSATransactionManager")
	@Override
	public void delete(RefWeldMaterials refWeldMaterials) {
        LOGGER.debug("Deleting RefWeldMaterials with {}", refWeldMaterials);
        this.wmGenericDao.delete(refWeldMaterials);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public Page<RefWeldMaterials> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RefWeldMaterials");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Page<RefWeldMaterials> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RefWeldMaterials");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PSA for table RefWeldMaterials to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PSATransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

