/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * TblCrews generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`tblCrews`", uniqueConstraints = {
            @UniqueConstraint(name = "`Foreman_UNIQUE`", columnNames = {"`Foreman`"})})
public class TblCrews implements Serializable {

    private Integer id;
    private Integer crewNumber;
    private Integer jobNumber;
    private Integer projectManager;
    private Integer constructionManager;
    private Integer siteManager;
    private Integer areaManager;
    private Integer superintendent;
    private Integer gf;
    private Integer foreman;
    private Integer leadman;
    private Integer disciplineId;
    private Short rev;
    private Timestamp timeStamp;
    private TblUserPsa tblUserPsaByConstructionManager;
    private TblUserPsa tblUserPsaBySuperintendent;
    private TblUserPsa tblUserPsaByForeman;
    private TblUserPsa tblUserPsaByProjectManager;
    private TblUserPsa tblUserPsaByAreaManager;
    private RefDisciplines refDisciplines;
    private TblJobNumbers tblJobNumbers;
    private TblUserPsa tblUserPsaBySiteManager;
    private TblUserPsa tblUserPsaByGf;
    private TblUserPsa tblUserPsaByLeadman;
    private List<TblCrewsRev> tblCrewsRevs;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`CrewNumber`", nullable = true, scale = 0, precision = 10)
    public Integer getCrewNumber() {
        return this.crewNumber;
    }

    public void setCrewNumber(Integer crewNumber) {
        this.crewNumber = crewNumber;
    }

    @Column(name = "`JobNumber`", nullable = true, scale = 0, precision = 10)
    public Integer getJobNumber() {
        return this.jobNumber;
    }

    public void setJobNumber(Integer jobNumber) {
        this.jobNumber = jobNumber;
    }

    @Column(name = "`ProjectManager`", nullable = true, scale = 0, precision = 10)
    public Integer getProjectManager() {
        return this.projectManager;
    }

    public void setProjectManager(Integer projectManager) {
        this.projectManager = projectManager;
    }

    @Column(name = "`ConstructionManager`", nullable = true, scale = 0, precision = 10)
    public Integer getConstructionManager() {
        return this.constructionManager;
    }

    public void setConstructionManager(Integer constructionManager) {
        this.constructionManager = constructionManager;
    }

    @Column(name = "`SiteManager`", nullable = true, scale = 0, precision = 10)
    public Integer getSiteManager() {
        return this.siteManager;
    }

    public void setSiteManager(Integer siteManager) {
        this.siteManager = siteManager;
    }

    @Column(name = "`AreaManager`", nullable = true, scale = 0, precision = 10)
    public Integer getAreaManager() {
        return this.areaManager;
    }

    public void setAreaManager(Integer areaManager) {
        this.areaManager = areaManager;
    }

    @Column(name = "`Superintendent`", nullable = true, scale = 0, precision = 10)
    public Integer getSuperintendent() {
        return this.superintendent;
    }

    public void setSuperintendent(Integer superintendent) {
        this.superintendent = superintendent;
    }

    @Column(name = "`GF`", nullable = true, scale = 0, precision = 10)
    public Integer getGf() {
        return this.gf;
    }

    public void setGf(Integer gf) {
        this.gf = gf;
    }

    @Column(name = "`Foreman`", nullable = true, scale = 0, precision = 10)
    public Integer getForeman() {
        return this.foreman;
    }

    public void setForeman(Integer foreman) {
        this.foreman = foreman;
    }

    @Column(name = "`Leadman`", nullable = true, scale = 0, precision = 10)
    public Integer getLeadman() {
        return this.leadman;
    }

    public void setLeadman(Integer leadman) {
        this.leadman = leadman;
    }

    @Column(name = "`DisciplineId`", nullable = true, scale = 0, precision = 10)
    public Integer getDisciplineId() {
        return this.disciplineId;
    }

    public void setDisciplineId(Integer disciplineId) {
        this.disciplineId = disciplineId;
    }

    @Column(name = "`Rev`", nullable = true, scale = 0, precision = 5)
    public Short getRev() {
        return this.rev;
    }

    public void setRev(Short rev) {
        this.rev = rev;
    }

    @Column(name = "`TimeStamp`", nullable = true)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ConstructionManager`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`ConstructionMtoUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByConstructionManager() {
        return this.tblUserPsaByConstructionManager;
    }

    public void setTblUserPsaByConstructionManager(TblUserPsa tblUserPsaByConstructionManager) {
        if(tblUserPsaByConstructionManager != null) {
            this.constructionManager = tblUserPsaByConstructionManager.getId();
        }

        this.tblUserPsaByConstructionManager = tblUserPsaByConstructionManager;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Superintendent`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`SuperToUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaBySuperintendent() {
        return this.tblUserPsaBySuperintendent;
    }

    public void setTblUserPsaBySuperintendent(TblUserPsa tblUserPsaBySuperintendent) {
        if(tblUserPsaBySuperintendent != null) {
            this.superintendent = tblUserPsaBySuperintendent.getId();
        }

        this.tblUserPsaBySuperintendent = tblUserPsaBySuperintendent;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Foreman`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`ForemanToUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByForeman() {
        return this.tblUserPsaByForeman;
    }

    public void setTblUserPsaByForeman(TblUserPsa tblUserPsaByForeman) {
        if(tblUserPsaByForeman != null) {
            this.foreman = tblUserPsaByForeman.getId();
        }

        this.tblUserPsaByForeman = tblUserPsaByForeman;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ProjectManager`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`PMtoUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByProjectManager() {
        return this.tblUserPsaByProjectManager;
    }

    public void setTblUserPsaByProjectManager(TblUserPsa tblUserPsaByProjectManager) {
        if(tblUserPsaByProjectManager != null) {
            this.projectManager = tblUserPsaByProjectManager.getId();
        }

        this.tblUserPsaByProjectManager = tblUserPsaByProjectManager;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`AreaManager`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`AreaMtoUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByAreaManager() {
        return this.tblUserPsaByAreaManager;
    }

    public void setTblUserPsaByAreaManager(TblUserPsa tblUserPsaByAreaManager) {
        if(tblUserPsaByAreaManager != null) {
            this.areaManager = tblUserPsaByAreaManager.getId();
        }

        this.tblUserPsaByAreaManager = tblUserPsaByAreaManager;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DisciplineId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`DisciplinIDTO_REFDisciplines`"))
    @Fetch(FetchMode.JOIN)
    public RefDisciplines getRefDisciplines() {
        return this.refDisciplines;
    }

    public void setRefDisciplines(RefDisciplines refDisciplines) {
        if(refDisciplines != null) {
            this.disciplineId = refDisciplines.getId();
        }

        this.refDisciplines = refDisciplines;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`JobNumber`", referencedColumnName = "`JobNumber`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`JobNumberToJobNumber`"))
    @Fetch(FetchMode.JOIN)
    public TblJobNumbers getTblJobNumbers() {
        return this.tblJobNumbers;
    }

    public void setTblJobNumbers(TblJobNumbers tblJobNumbers) {
        if(tblJobNumbers != null) {
            this.jobNumber = tblJobNumbers.getJobNumber();
        }

        this.tblJobNumbers = tblJobNumbers;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SiteManager`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`SiteMtoUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaBySiteManager() {
        return this.tblUserPsaBySiteManager;
    }

    public void setTblUserPsaBySiteManager(TblUserPsa tblUserPsaBySiteManager) {
        if(tblUserPsaBySiteManager != null) {
            this.siteManager = tblUserPsaBySiteManager.getId();
        }

        this.tblUserPsaBySiteManager = tblUserPsaBySiteManager;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`GF`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`GTtoUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByGf() {
        return this.tblUserPsaByGf;
    }

    public void setTblUserPsaByGf(TblUserPsa tblUserPsaByGf) {
        if(tblUserPsaByGf != null) {
            this.gf = tblUserPsaByGf.getId();
        }

        this.tblUserPsaByGf = tblUserPsaByGf;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Leadman`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`LeadmanToUserID`"))
    @Fetch(FetchMode.JOIN)
    public TblUserPsa getTblUserPsaByLeadman() {
        return this.tblUserPsaByLeadman;
    }

    public void setTblUserPsaByLeadman(TblUserPsa tblUserPsaByLeadman) {
        if(tblUserPsaByLeadman != null) {
            this.leadman = tblUserPsaByLeadman.getId();
        }

        this.tblUserPsaByLeadman = tblUserPsaByLeadman;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblCrews")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrewsRev> getTblCrewsRevs() {
        return this.tblCrewsRevs;
    }

    public void setTblCrewsRevs(List<TblCrewsRev> tblCrewsRevs) {
        this.tblCrewsRevs = tblCrewsRevs;
    }

    @PostPersist
    public void onPostPersist() {
        if(tblCrewsRevs != null) {
            for(TblCrewsRev tblCrewsRev : tblCrewsRevs) {
                tblCrewsRev.setTblCrews(this);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TblCrews)) return false;
        final TblCrews tblCrews = (TblCrews) o;
        return Objects.equals(getId(), tblCrews.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

