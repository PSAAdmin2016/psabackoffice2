/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PostPersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * TblUserPsa generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`tblUserPSA`", uniqueConstraints = {
            @UniqueConstraint(name = "`Email_UNIQUE`", columnNames = {"`Email`"}),
            @UniqueConstraint(name = "`pciEmployeeId_UNIQUE`", columnNames = {"`pciEmployeeId`"})})
public class TblUserPsa implements Serializable {

    private Integer id;
    private String pciEmployeeId;
    private String firstName;
    private String lastName;
    private String fullName;
    private String nickname;
    private String email;
    private Short active;
    private LocalDateTime createdDate;
    private Integer lastModifiedBy;
    private Integer fkDisciplineId;
    private Integer fkCraftId;
    private Integer fkCraftClassId;
    private Integer fkDefaultJobNumberId;
    private short rev;
    private Timestamp timeStamp;
    private RefDisciplines refDisciplines;
    private TblJobNumbers tblJobNumbers;
    private RefCraftClasses refCraftClasses;
    private RefCrafts refCrafts;
    private List<ChatConversationMembers> chatConversationMemberses;
    private List<ChatMessages> chatMessageses;
    private List<FeedBack> feedBacks;
    private List<FeedBackNotes> feedBackNoteses;
    private List<Settingsuser> settingsusers;
    private List<TblCrews> tblCrewsesForProjectManager;
    private List<TblCrews> tblCrewsesForAreaManager;
    private List<TblCrews> tblCrewsesForSiteManager;
    private List<TblCrews> tblCrewsesForGf;
    private List<TblCrews> tblCrewsesForLeadman;
    private List<TblCrews> tblCrewsesForConstructionManager;
    private List<TblCrews> tblCrewsesForSuperintendent;
    private TblCrews tblCrewsForForeman;
    private TblUserCreds tblUserCreds;
    private List<TblUserJobNumbers> tblUserJobNumberses;
    private List<TblUserRoles> tblUserRoleses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`pciEmployeeId`", nullable = true, length = 8)
    public String getPciEmployeeId() {
        return this.pciEmployeeId;
    }

    public void setPciEmployeeId(String pciEmployeeId) {
        this.pciEmployeeId = pciEmployeeId;
    }

    @Column(name = "`FirstName`", nullable = true, length = 32)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`LastName`", nullable = true, length = 32)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "`FullName`", nullable = true, length = 64)
    public String getFullName() {
        return this.fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "`Nickname`", nullable = true, length = 32)
    public String getNickname() {
        return this.nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    @Column(name = "`Email`", nullable = true, length = 120)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`Active`", nullable = true, scale = 0, precision = 3)
    public Short getActive() {
        return this.active;
    }

    public void setActive(Short active) {
        this.active = active;
    }

    @Column(name = "`CreatedDate`", nullable = true)
    public LocalDateTime getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`LastModifiedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    public void setLastModifiedBy(Integer lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
    }

    @Column(name = "`fk_DisciplineId`", nullable = true, scale = 0, precision = 10)
    public Integer getFkDisciplineId() {
        return this.fkDisciplineId;
    }

    public void setFkDisciplineId(Integer fkDisciplineId) {
        this.fkDisciplineId = fkDisciplineId;
    }

    @Column(name = "`fk_CraftId`", nullable = true, scale = 0, precision = 10)
    public Integer getFkCraftId() {
        return this.fkCraftId;
    }

    public void setFkCraftId(Integer fkCraftId) {
        this.fkCraftId = fkCraftId;
    }

    @Column(name = "`fk_CraftClassId`", nullable = true, scale = 0, precision = 10)
    public Integer getFkCraftClassId() {
        return this.fkCraftClassId;
    }

    public void setFkCraftClassId(Integer fkCraftClassId) {
        this.fkCraftClassId = fkCraftClassId;
    }

    @Column(name = "`fk_DefaultJobNumberId`", nullable = true, scale = 0, precision = 10)
    public Integer getFkDefaultJobNumberId() {
        return this.fkDefaultJobNumberId;
    }

    public void setFkDefaultJobNumberId(Integer fkDefaultJobNumberId) {
        this.fkDefaultJobNumberId = fkDefaultJobNumberId;
    }

    @Column(name = "`Rev`", nullable = false, scale = 0, precision = 3)
    public short getRev() {
        return this.rev;
    }

    public void setRev(short rev) {
        this.rev = rev;
    }

    @Column(name = "`TimeStamp`", nullable = true)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_DisciplineId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_DisciplineTO_REFDiscipline`"))
    @Fetch(FetchMode.JOIN)
    public RefDisciplines getRefDisciplines() {
        return this.refDisciplines;
    }

    public void setRefDisciplines(RefDisciplines refDisciplines) {
        if(refDisciplines != null) {
            this.fkDisciplineId = refDisciplines.getId();
        }

        this.refDisciplines = refDisciplines;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_DefaultJobNumberId`", referencedColumnName = "`JobNumber`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_DefaultJobNumberTO_tblJobNumbers`"))
    @Fetch(FetchMode.JOIN)
    public TblJobNumbers getTblJobNumbers() {
        return this.tblJobNumbers;
    }

    public void setTblJobNumbers(TblJobNumbers tblJobNumbers) {
        if(tblJobNumbers != null) {
            this.fkDefaultJobNumberId = tblJobNumbers.getJobNumber();
        }

        this.tblJobNumbers = tblJobNumbers;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_CraftClassId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_CraftClassTO_REFCraftClass`"))
    @Fetch(FetchMode.JOIN)
    public RefCraftClasses getRefCraftClasses() {
        return this.refCraftClasses;
    }

    public void setRefCraftClasses(RefCraftClasses refCraftClasses) {
        if(refCraftClasses != null) {
            this.fkCraftClassId = refCraftClasses.getId();
        }

        this.refCraftClasses = refCraftClasses;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_CraftId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_CraftsTO_REFCrafts`"))
    @Fetch(FetchMode.JOIN)
    public RefCrafts getRefCrafts() {
        return this.refCrafts;
    }

    public void setRefCrafts(RefCrafts refCrafts) {
        if(refCrafts != null) {
            this.fkCraftId = refCrafts.getId();
        }

        this.refCrafts = refCrafts;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<ChatConversationMembers> getChatConversationMemberses() {
        return this.chatConversationMemberses;
    }

    public void setChatConversationMemberses(List<ChatConversationMembers> chatConversationMemberses) {
        this.chatConversationMemberses = chatConversationMemberses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<ChatMessages> getChatMessageses() {
        return this.chatMessageses;
    }

    public void setChatMessageses(List<ChatMessages> chatMessageses) {
        this.chatMessageses = chatMessageses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<FeedBack> getFeedBacks() {
        return this.feedBacks;
    }

    public void setFeedBacks(List<FeedBack> feedBacks) {
        this.feedBacks = feedBacks;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<FeedBackNotes> getFeedBackNoteses() {
        return this.feedBackNoteses;
    }

    public void setFeedBackNoteses(List<FeedBackNotes> feedBackNoteses) {
        this.feedBackNoteses = feedBackNoteses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<Settingsuser> getSettingsusers() {
        return this.settingsusers;
    }

    public void setSettingsusers(List<Settingsuser> settingsusers) {
        this.settingsusers = settingsusers;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByProjectManager")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForProjectManager() {
        return this.tblCrewsesForProjectManager;
    }

    public void setTblCrewsesForProjectManager(List<TblCrews> tblCrewsesForProjectManager) {
        this.tblCrewsesForProjectManager = tblCrewsesForProjectManager;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByAreaManager")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForAreaManager() {
        return this.tblCrewsesForAreaManager;
    }

    public void setTblCrewsesForAreaManager(List<TblCrews> tblCrewsesForAreaManager) {
        this.tblCrewsesForAreaManager = tblCrewsesForAreaManager;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaBySiteManager")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForSiteManager() {
        return this.tblCrewsesForSiteManager;
    }

    public void setTblCrewsesForSiteManager(List<TblCrews> tblCrewsesForSiteManager) {
        this.tblCrewsesForSiteManager = tblCrewsesForSiteManager;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByGf")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForGf() {
        return this.tblCrewsesForGf;
    }

    public void setTblCrewsesForGf(List<TblCrews> tblCrewsesForGf) {
        this.tblCrewsesForGf = tblCrewsesForGf;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByLeadman")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForLeadman() {
        return this.tblCrewsesForLeadman;
    }

    public void setTblCrewsesForLeadman(List<TblCrews> tblCrewsesForLeadman) {
        this.tblCrewsesForLeadman = tblCrewsesForLeadman;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByConstructionManager")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForConstructionManager() {
        return this.tblCrewsesForConstructionManager;
    }

    public void setTblCrewsesForConstructionManager(List<TblCrews> tblCrewsesForConstructionManager) {
        this.tblCrewsesForConstructionManager = tblCrewsesForConstructionManager;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsaBySuperintendent")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblCrews> getTblCrewsesForSuperintendent() {
        return this.tblCrewsesForSuperintendent;
    }

    public void setTblCrewsesForSuperintendent(List<TblCrews> tblCrewsesForSuperintendent) {
        this.tblCrewsesForSuperintendent = tblCrewsesForSuperintendent;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "tblUserPsaByForeman")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public TblCrews getTblCrewsForForeman() {
        return this.tblCrewsForForeman;
    }

    public void setTblCrewsForForeman(TblCrews tblCrewsForForeman) {
        this.tblCrewsForForeman = tblCrewsForForeman;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public TblUserCreds getTblUserCreds() {
        return this.tblUserCreds;
    }

    public void setTblUserCreds(TblUserCreds tblUserCreds) {
        this.tblUserCreds = tblUserCreds;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<TblUserJobNumbers> getTblUserJobNumberses() {
        return this.tblUserJobNumberses;
    }

    public void setTblUserJobNumberses(List<TblUserJobNumbers> tblUserJobNumberses) {
        this.tblUserJobNumberses = tblUserJobNumberses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "tblUserPsa")
    @Cascade({CascadeType.SAVE_UPDATE})
    public List<TblUserRoles> getTblUserRoleses() {
        return this.tblUserRoleses;
    }

    public void setTblUserRoleses(List<TblUserRoles> tblUserRoleses) {
        this.tblUserRoleses = tblUserRoleses;
    }

    @PostPersist
    public void onPostPersist() {
        if(chatConversationMemberses != null) {
            for(ChatConversationMembers chatConversationMembers : chatConversationMemberses) {
                chatConversationMembers.setTblUserPsa(this);
            }
        }
        if(chatMessageses != null) {
            for(ChatMessages chatMessages : chatMessageses) {
                chatMessages.setTblUserPsa(this);
            }
        }
        if(feedBacks != null) {
            for(FeedBack feedBack : feedBacks) {
                feedBack.setTblUserPsa(this);
            }
        }
        if(feedBackNoteses != null) {
            for(FeedBackNotes feedBackNotes : feedBackNoteses) {
                feedBackNotes.setTblUserPsa(this);
            }
        }
        if(settingsusers != null) {
            for(Settingsuser settingsuser : settingsusers) {
                settingsuser.setTblUserPsa(this);
            }
        }
        if(tblCrewsesForProjectManager != null) {
            for(TblCrews tblCrews : tblCrewsesForProjectManager) {
                tblCrews.setTblUserPsaByProjectManager(this);
            }
        }
        if(tblCrewsesForAreaManager != null) {
            for(TblCrews tblCrews : tblCrewsesForAreaManager) {
                tblCrews.setTblUserPsaByAreaManager(this);
            }
        }
        if(tblCrewsesForSiteManager != null) {
            for(TblCrews tblCrews : tblCrewsesForSiteManager) {
                tblCrews.setTblUserPsaBySiteManager(this);
            }
        }
        if(tblCrewsesForGf != null) {
            for(TblCrews tblCrews : tblCrewsesForGf) {
                tblCrews.setTblUserPsaByGf(this);
            }
        }
        if(tblCrewsesForLeadman != null) {
            for(TblCrews tblCrews : tblCrewsesForLeadman) {
                tblCrews.setTblUserPsaByLeadman(this);
            }
        }
        if(tblCrewsesForConstructionManager != null) {
            for(TblCrews tblCrews : tblCrewsesForConstructionManager) {
                tblCrews.setTblUserPsaByConstructionManager(this);
            }
        }
        if(tblCrewsesForSuperintendent != null) {
            for(TblCrews tblCrews : tblCrewsesForSuperintendent) {
                tblCrews.setTblUserPsaBySuperintendent(this);
            }
        }
        if(tblCrewsForForeman != null) {
            tblCrewsForForeman.setTblUserPsaByForeman(this);
        }
        if(tblUserCreds != null) {
            tblUserCreds.setTblUserPsa(this);
        }
        if(tblUserJobNumberses != null) {
            for(TblUserJobNumbers tblUserJobNumbers : tblUserJobNumberses) {
                tblUserJobNumbers.setTblUserPsa(this);
            }
        }
        if(tblUserRoleses != null) {
            for(TblUserRoles tblUserRoles : tblUserRoleses) {
                tblUserRoles.setTblUserPsa(this);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TblUserPsa)) return false;
        final TblUserPsa tblUserPsa = (TblUserPsa) o;
        return Objects.equals(getId(), tblUserPsa.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

