/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.psabackoffice.psa.service.PSAProcedureExecutorService;
import com.psabackoffice.psa.models.procedure.*;

@RestController(value = "PSA.ProcedureExecutionController")
@RequestMapping("/PSA/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PSAProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/LandingToTrackerCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Copies all rows from Civil Landing table to Civil Tracker")
    public LandingToTrackerCivilResponse executeLandingToTrackerCivil(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToTrackerCivil");
        LandingToTrackerCivilResponse _result = procedureService.executeLandingToTrackerCivil(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToTrackerCivil, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/LandingToTrackerEquip", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Inserts records from LandingTrackerEquip into EquipTrackerDetails")
    public LandingToTrackerEquipResponse executeLandingToTrackerEquip(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToTrackerEquip");
        LandingToTrackerEquipResponse _result = procedureService.executeLandingToTrackerEquip(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToTrackerEquip, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/CreateNewJobDB", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Job#### Schema, Tables, Indexes, FK Constraints.")
    public List<CreateNewJobDbResponse> executeCreateNewJobDB(@Valid @RequestBody CreateNewJobDbRequest createNewJobDbRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CreateNewJobDB");
        CreateNewJobDbResponse _result = procedureService.executeCreateNewJobDB(createNewJobDbRequest);
        LOGGER.debug("got the result for v1 named procedure: CreateNewJobDB, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ImportInstalledQuantitiesCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "create FAs for progress claimed in the imported tracker")
    public Void executeImportInstalledQuantitiesCivil(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ImportInstalledQuantitiesCivil");
        Void _result = procedureService.executeImportInstalledQuantitiesCivil(jobNumber);
        LOGGER.debug("got the result for named procedure: ImportInstalledQuantitiesCivil, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ImportInstalledQuantitiesPipe", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "create FAs for progress claimed in the imported tracker")
    public Void executeImportInstalledQuantitiesPipe(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ImportInstalledQuantitiesPipe");
        Void _result = procedureService.executeImportInstalledQuantitiesPipe(jobNumber);
        LOGGER.debug("got the result for named procedure: ImportInstalledQuantitiesPipe, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/LandingToPipeSpools", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Moves data in SpoolListLanding to REF_SpoolList")
    public LandingToPipeSpoolsResponse executeLandingToPipeSpools(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToPipeSpools");
        LandingToPipeSpoolsResponse _result = procedureService.executeLandingToPipeSpools(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToPipeSpools, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/CreateNewConversation", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public List<CreateNewConversationResponse> executeCreateNewConversation(@Valid @RequestBody CreateNewConversationRequest createNewConversationRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CreateNewConversation");
        CreateNewConversationResponse _result = procedureService.executeCreateNewConversation(createNewConversationRequest);
        LOGGER.debug("got the result for v1 named procedure: CreateNewConversation, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ImportInstalledQuantitiesEquip", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "create FAs for progress claimed in the imported tracker")
    public Void executeImportInstalledQuantitiesEquip(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ImportInstalledQuantitiesEquip");
        Void _result = procedureService.executeImportInstalledQuantitiesEquip(jobNumber);
        LOGGER.debug("got the result for named procedure: ImportInstalledQuantitiesEquip, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ImportInstalledQuantitiesSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "create FAs for progress claimed in the imported tracker")
    public Void executeImportInstalledQuantitiesSteel(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ImportInstalledQuantitiesSteel");
        Void _result = procedureService.executeImportInstalledQuantitiesSteel(jobNumber);
        LOGGER.debug("got the result for named procedure: ImportInstalledQuantitiesSteel, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/LandingToWeldSpecProcedures", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Copy rows from LandingWeldSpecProcedures to REF_WeldSpecProcedures")
    public LandingToWeldSpecProceduresResponse executeLandingToWeldSpecProcedures(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToWeldSpecProcedures");
        LandingToWeldSpecProceduresResponse _result = procedureService.executeLandingToWeldSpecProcedures(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToWeldSpecProcedures, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/LandingToTrackerSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Copies all rows from SteelLanding table to Steel Tracker")
    public LandingToTrackerSteelResponse executeLandingToTrackerSteel(@RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToTrackerSteel");
        LandingToTrackerSteelResponse _result = procedureService.executeLandingToTrackerSteel(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToTrackerSteel, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ValidateLandingData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Validate the data in the landing table for bad fields   (eg. single and double quotes)")
    public List<ValidateLandingDataResponse> executeValidateLandingData(@RequestParam(value = "tableName", required = false) String tableName, @RequestParam(value = "jobNumber", required = false) String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ValidateLandingData");
        ValidateLandingDataResponse _result = procedureService.executeValidateLandingData(tableName, jobNumber);
        LOGGER.debug("got the result for v1 named procedure: ValidateLandingData, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/LandingToTrackerPipe", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Inserts data from Landing table into trackerDetails")
    public LandingToTrackerPipeResponse executeLandingToTrackerPipe(@RequestParam(value = "JobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: LandingToTrackerPipe");
        LandingToTrackerPipeResponse _result = procedureService.executeLandingToTrackerPipe(jobNumber);
        LOGGER.debug("got the result for named procedure: LandingToTrackerPipe, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/GetImportTotals", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all calculated totals for the new import table in Landing")
    public List<GetImportTotalsResponse> executeGetImportTotals(@RequestParam(value = "tableNameLanding", required = false) String tableNameLanding, @RequestParam(value = "tableNameDestination", required = false) String tableNameDestination, @RequestParam(value = "jobNumber", required = false) String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: GetImportTotals");
        GetImportTotalsResponse _result = procedureService.executeGetImportTotals(tableNameLanding, tableNameDestination, jobNumber);
        LOGGER.debug("got the result for v1 named procedure: GetImportTotals, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/CompareColumns", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "compares the column names of the imported data in the landing table to the column names of the landing table.")
    public CompareColumnsResponse executeCompareColumns(@RequestParam(value = "tableName") String tableName, @RequestParam(value = "jobNumber") String jobNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CompareColumns");
        CompareColumnsResponse _result = procedureService.executeCompareColumns(tableName, jobNumber);
        LOGGER.debug("got the result for named procedure: CompareColumns, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/CreateNewJobSeeds", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Seeds all the needed tables of a new Job DB")
    public List<CreateNewJobSeedsResponse> executeCreateNewJobSeeds(@Valid @RequestBody CreateNewJobSeedsRequest createNewJobSeedsRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CreateNewJobSeeds");
        CreateNewJobSeedsResponse _result = procedureService.executeCreateNewJobSeeds(createNewJobSeedsRequest);
        LOGGER.debug("got the result for v1 named procedure: CreateNewJobSeeds, result:{}", _result);
        return Collections.singletonList(_result);
    }

}


