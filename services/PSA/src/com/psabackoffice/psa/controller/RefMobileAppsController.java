/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefMobileApps;
import com.psabackoffice.psa.TblUserAssignedApps;
import com.psabackoffice.psa.service.RefMobileAppsService;


/**
 * Controller object for domain model class RefMobileApps.
 * @see RefMobileApps
 */
@RestController("PSA.RefMobileAppsController")
@Api(value = "RefMobileAppsController", description = "Exposes APIs to work with RefMobileApps resource.")
@RequestMapping("/PSA/RefMobileApps")
public class RefMobileAppsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefMobileAppsController.class);

    @Autowired
	@Qualifier("PSA.RefMobileAppsService")
	private RefMobileAppsService refMobileAppsService;

	@ApiOperation(value = "Creates a new RefMobileApps instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public RefMobileApps createRefMobileApps(@RequestBody RefMobileApps refMobileApps) {
		LOGGER.debug("Create RefMobileApps with information: {}" , refMobileApps);

		refMobileApps = refMobileAppsService.create(refMobileApps);
		LOGGER.debug("Created RefMobileApps with information: {}" , refMobileApps);

	    return refMobileApps;
	}


    @ApiOperation(value = "Returns the RefMobileApps instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefMobileApps getRefMobileApps(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefMobileApps with id: {}" , id);

        RefMobileApps foundRefMobileApps = refMobileAppsService.getById(id);
        LOGGER.debug("RefMobileApps details with id: {}" , foundRefMobileApps);

        return foundRefMobileApps;
    }

    @ApiOperation(value = "Updates the RefMobileApps instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefMobileApps editRefMobileApps(@PathVariable("id") Integer id, @RequestBody RefMobileApps refMobileApps) throws EntityNotFoundException {
        LOGGER.debug("Editing RefMobileApps with id: {}" , refMobileApps.getId());

        refMobileApps.setId(id);
        refMobileApps = refMobileAppsService.update(refMobileApps);
        LOGGER.debug("RefMobileApps details with id: {}" , refMobileApps);

        return refMobileApps;
    }

    @ApiOperation(value = "Deletes the RefMobileApps instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefMobileApps(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefMobileApps with id: {}" , id);

        RefMobileApps deletedRefMobileApps = refMobileAppsService.delete(id);

        return deletedRefMobileApps != null;
    }

    /**
     * @deprecated Use {@link #findRefMobileApps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefMobileApps instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefMobileApps> searchRefMobileAppsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefMobileApps list");
        return refMobileAppsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefMobileApps instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefMobileApps> findRefMobileApps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefMobileApps list");
        return refMobileAppsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefMobileApps instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefMobileApps> filterRefMobileApps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefMobileApps list");
        return refMobileAppsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefMobileApps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refMobileAppsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefMobileApps instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefMobileApps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefMobileApps");
		return refMobileAppsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefMobileAppsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refMobileAppsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblUserAssignedAppses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblUserAssignedAppses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserAssignedApps> findAssociatedTblUserAssignedAppses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblUserAssignedAppses");
        return refMobileAppsService.findAssociatedTblUserAssignedAppses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefMobileAppsService instance
	 */
	protected void setRefMobileAppsService(RefMobileAppsService service) {
		this.refMobileAppsService = service;
	}

}

