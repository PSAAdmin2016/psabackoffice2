/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.RefFbSubTypes;
import com.psabackoffice.psa.service.RefFbSubTypesService;


/**
 * Controller object for domain model class RefFbSubTypes.
 * @see RefFbSubTypes
 */
@RestController("PSA.RefFbSubTypesController")
@Api(value = "RefFbSubTypesController", description = "Exposes APIs to work with RefFbSubTypes resource.")
@RequestMapping("/PSA/RefFbSubTypes")
public class RefFbSubTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefFbSubTypesController.class);

    @Autowired
	@Qualifier("PSA.RefFbSubTypesService")
	private RefFbSubTypesService refFbSubTypesService;

	@ApiOperation(value = "Creates a new RefFbSubTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public RefFbSubTypes createRefFbSubTypes(@RequestBody RefFbSubTypes refFbSubTypes) {
		LOGGER.debug("Create RefFbSubTypes with information: {}" , refFbSubTypes);

		refFbSubTypes = refFbSubTypesService.create(refFbSubTypes);
		LOGGER.debug("Created RefFbSubTypes with information: {}" , refFbSubTypes);

	    return refFbSubTypes;
	}


    @ApiOperation(value = "Returns the RefFbSubTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefFbSubTypes getRefFbSubTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefFbSubTypes with id: {}" , id);

        RefFbSubTypes foundRefFbSubTypes = refFbSubTypesService.getById(id);
        LOGGER.debug("RefFbSubTypes details with id: {}" , foundRefFbSubTypes);

        return foundRefFbSubTypes;
    }

    @ApiOperation(value = "Updates the RefFbSubTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefFbSubTypes editRefFbSubTypes(@PathVariable("id") Integer id, @RequestBody RefFbSubTypes refFbSubTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing RefFbSubTypes with id: {}" , refFbSubTypes.getId());

        refFbSubTypes.setId(id);
        refFbSubTypes = refFbSubTypesService.update(refFbSubTypes);
        LOGGER.debug("RefFbSubTypes details with id: {}" , refFbSubTypes);

        return refFbSubTypes;
    }

    @ApiOperation(value = "Deletes the RefFbSubTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefFbSubTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefFbSubTypes with id: {}" , id);

        RefFbSubTypes deletedRefFbSubTypes = refFbSubTypesService.delete(id);

        return deletedRefFbSubTypes != null;
    }

    /**
     * @deprecated Use {@link #findRefFbSubTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefFbSubTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSubTypes> searchRefFbSubTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefFbSubTypes list");
        return refFbSubTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefFbSubTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSubTypes> findRefFbSubTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefFbSubTypes list");
        return refFbSubTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefFbSubTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSubTypes> filterRefFbSubTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefFbSubTypes list");
        return refFbSubTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefFbSubTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refFbSubTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefFbSubTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefFbSubTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefFbSubTypes");
		return refFbSubTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefFbSubTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refFbSubTypesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/feedBacks", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the feedBacks instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FeedBack> findAssociatedFeedBacks(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated feedBacks");
        return refFbSubTypesService.findAssociatedFeedBacks(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefFbSubTypesService instance
	 */
	protected void setRefFbSubTypesService(RefFbSubTypesService service) {
		this.refFbSubTypesService = service;
	}

}

