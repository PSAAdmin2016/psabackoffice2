/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.ChatConversationMembers;
import com.psabackoffice.psa.ChatMessages;
import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.FeedBackNotes;
import com.psabackoffice.psa.TblCrews;
import com.psabackoffice.psa.TblUserAssignedApps;
import com.psabackoffice.psa.TblUserJobNumbers;
import com.psabackoffice.psa.TblUserPsa;
import com.psabackoffice.psa.TblUserPsarev;
import com.psabackoffice.psa.service.TblUserPsaService;


/**
 * Controller object for domain model class TblUserPsa.
 * @see TblUserPsa
 */
@RestController("PSA.TblUserPsaController")
@Api(value = "TblUserPsaController", description = "Exposes APIs to work with TblUserPsa resource.")
@RequestMapping("/PSA/TblUserPsa")
public class TblUserPsaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblUserPsaController.class);

    @Autowired
	@Qualifier("PSA.TblUserPsaService")
	private TblUserPsaService tblUserPsaService;

	@ApiOperation(value = "Creates a new TblUserPsa instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TblUserPsa createTblUserPsa(@RequestBody TblUserPsa tblUserPsa) {
		LOGGER.debug("Create TblUserPsa with information: {}" , tblUserPsa);

		tblUserPsa = tblUserPsaService.create(tblUserPsa);
		LOGGER.debug("Created TblUserPsa with information: {}" , tblUserPsa);

	    return tblUserPsa;
	}


    @ApiOperation(value = "Returns the TblUserPsa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblUserPsa getTblUserPsa(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TblUserPsa with id: {}" , id);

        TblUserPsa foundTblUserPsa = tblUserPsaService.getById(id);
        LOGGER.debug("TblUserPsa details with id: {}" , foundTblUserPsa);

        return foundTblUserPsa;
    }

    @ApiOperation(value = "Updates the TblUserPsa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblUserPsa editTblUserPsa(@PathVariable("id") Integer id, @RequestBody TblUserPsa tblUserPsa) throws EntityNotFoundException {
        LOGGER.debug("Editing TblUserPsa with id: {}" , tblUserPsa.getId());

        tblUserPsa.setId(id);
        tblUserPsa = tblUserPsaService.update(tblUserPsa);
        LOGGER.debug("TblUserPsa details with id: {}" , tblUserPsa);

        return tblUserPsa;
    }

    @ApiOperation(value = "Deletes the TblUserPsa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblUserPsa(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TblUserPsa with id: {}" , id);

        TblUserPsa deletedTblUserPsa = tblUserPsaService.delete(id);

        return deletedTblUserPsa != null;
    }

    @RequestMapping(value = "/pciEmployeeId/{pciEmployeeId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TblUserPsa with given unique key values.")
    public TblUserPsa getByPciEmployeeId(@PathVariable("pciEmployeeId") String pciEmployeeId) {
        LOGGER.debug("Getting TblUserPsa with uniques key PciEmployeeId");
        return tblUserPsaService.getByPciEmployeeId(pciEmployeeId);
    }

    @RequestMapping(value = "/email/{email}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TblUserPsa with given unique key values.")
    public TblUserPsa getByEmail(@PathVariable("email") String email) {
        LOGGER.debug("Getting TblUserPsa with uniques key Email");
        return tblUserPsaService.getByEmail(email);
    }

    /**
     * @deprecated Use {@link #findTblUserPsas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblUserPsa instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserPsa> searchTblUserPsasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblUserPsas list");
        return tblUserPsaService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblUserPsa instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserPsa> findTblUserPsas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblUserPsas list");
        return tblUserPsaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblUserPsa instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserPsa> filterTblUserPsas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblUserPsas list");
        return tblUserPsaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblUserPsas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblUserPsaService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TblUserPsa instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblUserPsas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblUserPsas");
		return tblUserPsaService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblUserPsaAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblUserPsaService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/chatConversationMemberses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the chatConversationMemberses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatConversationMembers> findAssociatedChatConversationMemberses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated chatConversationMemberses");
        return tblUserPsaService.findAssociatedChatConversationMemberses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/chatMessageses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the chatMessageses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatMessages> findAssociatedChatMessageses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated chatMessageses");
        return tblUserPsaService.findAssociatedChatMessageses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/feedBacks", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the feedBacks instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FeedBack> findAssociatedFeedBacks(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated feedBacks");
        return tblUserPsaService.findAssociatedFeedBacks(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/feedBackNoteses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the feedBackNoteses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FeedBackNotes> findAssociatedFeedBackNoteses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated feedBackNoteses");
        return tblUserPsaService.findAssociatedFeedBackNoteses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForForeman", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForForeman instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForForeman(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForForeman");
        return tblUserPsaService.findAssociatedTblCrewsesForForeman(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForGf", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForGf instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForGf(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForGf");
        return tblUserPsaService.findAssociatedTblCrewsesForGf(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForSuperintendent", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForSuperintendent instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForSuperintendent(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForSuperintendent");
        return tblUserPsaService.findAssociatedTblCrewsesForSuperintendent(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForAreaManager", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForAreaManager instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForAreaManager(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForAreaManager");
        return tblUserPsaService.findAssociatedTblCrewsesForAreaManager(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForSiteManager", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForSiteManager instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForSiteManager(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForSiteManager");
        return tblUserPsaService.findAssociatedTblCrewsesForSiteManager(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForConstructionManager", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForConstructionManager instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForConstructionManager(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForConstructionManager");
        return tblUserPsaService.findAssociatedTblCrewsesForConstructionManager(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForProjectManager", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForProjectManager instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForProjectManager(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForProjectManager");
        return tblUserPsaService.findAssociatedTblCrewsesForProjectManager(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblCrewsesForLeadman", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblCrewsesForLeadman instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblCrews> findAssociatedTblCrewsesForLeadman(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblCrewsesForLeadman");
        return tblUserPsaService.findAssociatedTblCrewsesForLeadman(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblUserAssignedAppses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblUserAssignedAppses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserAssignedApps> findAssociatedTblUserAssignedAppses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblUserAssignedAppses");
        return tblUserPsaService.findAssociatedTblUserAssignedAppses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblUserJobNumberses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblUserJobNumberses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserJobNumbers> findAssociatedTblUserJobNumberses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblUserJobNumberses");
        return tblUserPsaService.findAssociatedTblUserJobNumberses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/tblUserPsarevs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tblUserPsarevs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserPsarev> findAssociatedTblUserPsarevs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tblUserPsarevs");
        return tblUserPsaService.findAssociatedTblUserPsarevs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserPsaService instance
	 */
	protected void setTblUserPsaService(TblUserPsaService service) {
		this.tblUserPsaService = service;
	}

}

