/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.ChatConversationMembers;
import com.psabackoffice.psa.ChatConversations;
import com.psabackoffice.psa.ChatMessages;
import com.psabackoffice.psa.service.ChatConversationsService;


/**
 * Controller object for domain model class ChatConversations.
 * @see ChatConversations
 */
@RestController("PSA.ChatConversationsController")
@Api(value = "ChatConversationsController", description = "Exposes APIs to work with ChatConversations resource.")
@RequestMapping("/PSA/ChatConversations")
public class ChatConversationsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatConversationsController.class);

    @Autowired
	@Qualifier("PSA.ChatConversationsService")
	private ChatConversationsService chatConversationsService;

	@ApiOperation(value = "Creates a new ChatConversations instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ChatConversations createChatConversations(@RequestBody ChatConversations chatConversations) {
		LOGGER.debug("Create ChatConversations with information: {}" , chatConversations);

		chatConversations = chatConversationsService.create(chatConversations);
		LOGGER.debug("Created ChatConversations with information: {}" , chatConversations);

	    return chatConversations;
	}

    @ApiOperation(value = "Returns the ChatConversations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ChatConversations getChatConversations(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ChatConversations with id: {}" , id);

        ChatConversations foundChatConversations = chatConversationsService.getById(id);
        LOGGER.debug("ChatConversations details with id: {}" , foundChatConversations);

        return foundChatConversations;
    }

    @ApiOperation(value = "Updates the ChatConversations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ChatConversations editChatConversations(@PathVariable("id") Integer id, @RequestBody ChatConversations chatConversations) throws EntityNotFoundException {
        LOGGER.debug("Editing ChatConversations with id: {}" , chatConversations.getConversationId());

        chatConversations.setConversationId(id);
        chatConversations = chatConversationsService.update(chatConversations);
        LOGGER.debug("ChatConversations details with id: {}" , chatConversations);

        return chatConversations;
    }

    @ApiOperation(value = "Deletes the ChatConversations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteChatConversations(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ChatConversations with id: {}" , id);

        ChatConversations deletedChatConversations = chatConversationsService.delete(id);

        return deletedChatConversations != null;
    }

    /**
     * @deprecated Use {@link #findChatConversations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ChatConversations instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatConversations> searchChatConversationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ChatConversations list");
        return chatConversationsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ChatConversations instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatConversations> findChatConversations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ChatConversations list");
        return chatConversationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ChatConversations instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatConversations> filterChatConversations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ChatConversations list");
        return chatConversationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportChatConversations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return chatConversationsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ChatConversations instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countChatConversations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ChatConversations");
		return chatConversationsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getChatConversationsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return chatConversationsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/chatConversationMemberses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the chatConversationMemberses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatConversationMembers> findAssociatedChatConversationMemberses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated chatConversationMemberses");
        return chatConversationsService.findAssociatedChatConversationMemberses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/chatMessageses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the chatMessageses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChatMessages> findAssociatedChatMessageses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated chatMessageses");
        return chatConversationsService.findAssociatedChatMessageses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChatConversationsService instance
	 */
	protected void setChatConversationsService(ChatConversationsService service) {
		this.chatConversationsService = service;
	}

}

