/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefPipeDemoTypes;
import com.psabackoffice.psa.service.RefPipeDemoTypesService;


/**
 * Controller object for domain model class RefPipeDemoTypes.
 * @see RefPipeDemoTypes
 */
@RestController("PSA.RefPipeDemoTypesController")
@Api(value = "RefPipeDemoTypesController", description = "Exposes APIs to work with RefPipeDemoTypes resource.")
@RequestMapping("/PSA/RefPipeDemoTypes")
public class RefPipeDemoTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefPipeDemoTypesController.class);

    @Autowired
	@Qualifier("PSA.RefPipeDemoTypesService")
	private RefPipeDemoTypesService refPipeDemoTypesService;

	@ApiOperation(value = "Creates a new RefPipeDemoTypes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefPipeDemoTypes createRefPipeDemoTypes(@RequestBody RefPipeDemoTypes refPipeDemoTypes) {
		LOGGER.debug("Create RefPipeDemoTypes with information: {}" , refPipeDemoTypes);

		refPipeDemoTypes = refPipeDemoTypesService.create(refPipeDemoTypes);
		LOGGER.debug("Created RefPipeDemoTypes with information: {}" , refPipeDemoTypes);

	    return refPipeDemoTypes;
	}

    @ApiOperation(value = "Returns the RefPipeDemoTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefPipeDemoTypes getRefPipeDemoTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefPipeDemoTypes with id: {}" , id);

        RefPipeDemoTypes foundRefPipeDemoTypes = refPipeDemoTypesService.getById(id);
        LOGGER.debug("RefPipeDemoTypes details with id: {}" , foundRefPipeDemoTypes);

        return foundRefPipeDemoTypes;
    }

    @ApiOperation(value = "Updates the RefPipeDemoTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefPipeDemoTypes editRefPipeDemoTypes(@PathVariable("id") Integer id, @RequestBody RefPipeDemoTypes refPipeDemoTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing RefPipeDemoTypes with id: {}" , refPipeDemoTypes.getId());

        refPipeDemoTypes.setId(id);
        refPipeDemoTypes = refPipeDemoTypesService.update(refPipeDemoTypes);
        LOGGER.debug("RefPipeDemoTypes details with id: {}" , refPipeDemoTypes);

        return refPipeDemoTypes;
    }

    @ApiOperation(value = "Deletes the RefPipeDemoTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefPipeDemoTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefPipeDemoTypes with id: {}" , id);

        RefPipeDemoTypes deletedRefPipeDemoTypes = refPipeDemoTypesService.delete(id);

        return deletedRefPipeDemoTypes != null;
    }

    /**
     * @deprecated Use {@link #findRefPipeDemoTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefPipeDemoTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeDemoTypes> searchRefPipeDemoTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefPipeDemoTypes list");
        return refPipeDemoTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefPipeDemoTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeDemoTypes> findRefPipeDemoTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefPipeDemoTypes list");
        return refPipeDemoTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefPipeDemoTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeDemoTypes> filterRefPipeDemoTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefPipeDemoTypes list");
        return refPipeDemoTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefPipeDemoTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refPipeDemoTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefPipeDemoTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefPipeDemoTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefPipeDemoTypes");
		return refPipeDemoTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefPipeDemoTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refPipeDemoTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefPipeDemoTypesService instance
	 */
	protected void setRefPipeDemoTypesService(RefPipeDemoTypesService service) {
		this.refPipeDemoTypesService = service;
	}

}

