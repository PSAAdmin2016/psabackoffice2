/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefWeldMaterials;
import com.psabackoffice.psa.service.RefWeldMaterialsService;


/**
 * Controller object for domain model class RefWeldMaterials.
 * @see RefWeldMaterials
 */
@RestController("PSA.RefWeldMaterialsController")
@Api(value = "RefWeldMaterialsController", description = "Exposes APIs to work with RefWeldMaterials resource.")
@RequestMapping("/PSA/RefWeldMaterials")
public class RefWeldMaterialsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefWeldMaterialsController.class);

    @Autowired
	@Qualifier("PSA.RefWeldMaterialsService")
	private RefWeldMaterialsService refWeldMaterialsService;

	@ApiOperation(value = "Creates a new RefWeldMaterials instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefWeldMaterials createRefWeldMaterials(@RequestBody RefWeldMaterials refWeldMaterials) {
		LOGGER.debug("Create RefWeldMaterials with information: {}" , refWeldMaterials);

		refWeldMaterials = refWeldMaterialsService.create(refWeldMaterials);
		LOGGER.debug("Created RefWeldMaterials with information: {}" , refWeldMaterials);

	    return refWeldMaterials;
	}

    @ApiOperation(value = "Returns the RefWeldMaterials instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefWeldMaterials getRefWeldMaterials(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefWeldMaterials with id: {}" , id);

        RefWeldMaterials foundRefWeldMaterials = refWeldMaterialsService.getById(id);
        LOGGER.debug("RefWeldMaterials details with id: {}" , foundRefWeldMaterials);

        return foundRefWeldMaterials;
    }

    @ApiOperation(value = "Updates the RefWeldMaterials instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefWeldMaterials editRefWeldMaterials(@PathVariable("id") Integer id, @RequestBody RefWeldMaterials refWeldMaterials) throws EntityNotFoundException {
        LOGGER.debug("Editing RefWeldMaterials with id: {}" , refWeldMaterials.getId());

        refWeldMaterials.setId(id);
        refWeldMaterials = refWeldMaterialsService.update(refWeldMaterials);
        LOGGER.debug("RefWeldMaterials details with id: {}" , refWeldMaterials);

        return refWeldMaterials;
    }

    @ApiOperation(value = "Deletes the RefWeldMaterials instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefWeldMaterials(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefWeldMaterials with id: {}" , id);

        RefWeldMaterials deletedRefWeldMaterials = refWeldMaterialsService.delete(id);

        return deletedRefWeldMaterials != null;
    }

    /**
     * @deprecated Use {@link #findRefWeldMaterials(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefWeldMaterials instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldMaterials> searchRefWeldMaterialsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefWeldMaterials list");
        return refWeldMaterialsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefWeldMaterials instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldMaterials> findRefWeldMaterials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefWeldMaterials list");
        return refWeldMaterialsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefWeldMaterials instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldMaterials> filterRefWeldMaterials(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefWeldMaterials list");
        return refWeldMaterialsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefWeldMaterials(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refWeldMaterialsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefWeldMaterials instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefWeldMaterials( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefWeldMaterials");
		return refWeldMaterialsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefWeldMaterialsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refWeldMaterialsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefWeldMaterialsService instance
	 */
	protected void setRefWeldMaterialsService(RefWeldMaterialsService service) {
		this.refWeldMaterialsService = service;
	}

}

