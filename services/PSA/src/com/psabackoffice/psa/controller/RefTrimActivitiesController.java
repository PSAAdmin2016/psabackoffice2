/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefTrimActivities;
import com.psabackoffice.psa.service.RefTrimActivitiesService;


/**
 * Controller object for domain model class RefTrimActivities.
 * @see RefTrimActivities
 */
@RestController("PSA.RefTrimActivitiesController")
@Api(value = "RefTrimActivitiesController", description = "Exposes APIs to work with RefTrimActivities resource.")
@RequestMapping("/PSA/RefTrimActivities")
public class RefTrimActivitiesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefTrimActivitiesController.class);

    @Autowired
	@Qualifier("PSA.RefTrimActivitiesService")
	private RefTrimActivitiesService refTrimActivitiesService;

	@ApiOperation(value = "Creates a new RefTrimActivities instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefTrimActivities createRefTrimActivities(@RequestBody RefTrimActivities refTrimActivities) {
		LOGGER.debug("Create RefTrimActivities with information: {}" , refTrimActivities);

		refTrimActivities = refTrimActivitiesService.create(refTrimActivities);
		LOGGER.debug("Created RefTrimActivities with information: {}" , refTrimActivities);

	    return refTrimActivities;
	}

    @ApiOperation(value = "Returns the RefTrimActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefTrimActivities getRefTrimActivities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefTrimActivities with id: {}" , id);

        RefTrimActivities foundRefTrimActivities = refTrimActivitiesService.getById(id);
        LOGGER.debug("RefTrimActivities details with id: {}" , foundRefTrimActivities);

        return foundRefTrimActivities;
    }

    @ApiOperation(value = "Updates the RefTrimActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefTrimActivities editRefTrimActivities(@PathVariable("id") Integer id, @RequestBody RefTrimActivities refTrimActivities) throws EntityNotFoundException {
        LOGGER.debug("Editing RefTrimActivities with id: {}" , refTrimActivities.getId());

        refTrimActivities.setId(id);
        refTrimActivities = refTrimActivitiesService.update(refTrimActivities);
        LOGGER.debug("RefTrimActivities details with id: {}" , refTrimActivities);

        return refTrimActivities;
    }

    @ApiOperation(value = "Deletes the RefTrimActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefTrimActivities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefTrimActivities with id: {}" , id);

        RefTrimActivities deletedRefTrimActivities = refTrimActivitiesService.delete(id);

        return deletedRefTrimActivities != null;
    }

    /**
     * @deprecated Use {@link #findRefTrimActivities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefTrimActivities instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefTrimActivities> searchRefTrimActivitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefTrimActivities list");
        return refTrimActivitiesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefTrimActivities instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefTrimActivities> findRefTrimActivities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefTrimActivities list");
        return refTrimActivitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefTrimActivities instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefTrimActivities> filterRefTrimActivities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefTrimActivities list");
        return refTrimActivitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefTrimActivities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refTrimActivitiesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefTrimActivities instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefTrimActivities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefTrimActivities");
		return refTrimActivitiesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefTrimActivitiesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refTrimActivitiesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefTrimActivitiesService instance
	 */
	protected void setRefTrimActivitiesService(RefTrimActivitiesService service) {
		this.refTrimActivitiesService = service;
	}

}

