/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefSteelTypes;
import com.psabackoffice.psa.service.RefSteelTypesService;


/**
 * Controller object for domain model class RefSteelTypes.
 * @see RefSteelTypes
 */
@RestController("PSA.RefSteelTypesController")
@Api(value = "RefSteelTypesController", description = "Exposes APIs to work with RefSteelTypes resource.")
@RequestMapping("/PSA/RefSteelTypes")
public class RefSteelTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefSteelTypesController.class);

    @Autowired
	@Qualifier("PSA.RefSteelTypesService")
	private RefSteelTypesService refSteelTypesService;

	@ApiOperation(value = "Creates a new RefSteelTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public RefSteelTypes createRefSteelTypes(@RequestBody RefSteelTypes refSteelTypes) {
		LOGGER.debug("Create RefSteelTypes with information: {}" , refSteelTypes);

		refSteelTypes = refSteelTypesService.create(refSteelTypes);
		LOGGER.debug("Created RefSteelTypes with information: {}" , refSteelTypes);

	    return refSteelTypes;
	}


    @ApiOperation(value = "Returns the RefSteelTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefSteelTypes getRefSteelTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefSteelTypes with id: {}" , id);

        RefSteelTypes foundRefSteelTypes = refSteelTypesService.getById(id);
        LOGGER.debug("RefSteelTypes details with id: {}" , foundRefSteelTypes);

        return foundRefSteelTypes;
    }

    @ApiOperation(value = "Updates the RefSteelTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefSteelTypes editRefSteelTypes(@PathVariable("id") Integer id, @RequestBody RefSteelTypes refSteelTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing RefSteelTypes with id: {}" , refSteelTypes.getId());

        refSteelTypes.setId(id);
        refSteelTypes = refSteelTypesService.update(refSteelTypes);
        LOGGER.debug("RefSteelTypes details with id: {}" , refSteelTypes);

        return refSteelTypes;
    }

    @ApiOperation(value = "Deletes the RefSteelTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefSteelTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefSteelTypes with id: {}" , id);

        RefSteelTypes deletedRefSteelTypes = refSteelTypesService.delete(id);

        return deletedRefSteelTypes != null;
    }

    /**
     * @deprecated Use {@link #findRefSteelTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefSteelTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefSteelTypes> searchRefSteelTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefSteelTypes list");
        return refSteelTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefSteelTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefSteelTypes> findRefSteelTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefSteelTypes list");
        return refSteelTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefSteelTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefSteelTypes> filterRefSteelTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefSteelTypes list");
        return refSteelTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefSteelTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refSteelTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefSteelTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefSteelTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefSteelTypes");
		return refSteelTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefSteelTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refSteelTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefSteelTypesService instance
	 */
	protected void setRefSteelTypesService(RefSteelTypesService service) {
		this.refSteelTypesService = service;
	}

}

