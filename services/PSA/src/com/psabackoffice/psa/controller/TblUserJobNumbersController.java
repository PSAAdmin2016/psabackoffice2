/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.TblUserJobNumbers;
import com.psabackoffice.psa.service.TblUserJobNumbersService;


/**
 * Controller object for domain model class TblUserJobNumbers.
 * @see TblUserJobNumbers
 */
@RestController("PSA.TblUserJobNumbersController")
@Api(value = "TblUserJobNumbersController", description = "Exposes APIs to work with TblUserJobNumbers resource.")
@RequestMapping("/PSA/TblUserJobNumbers")
public class TblUserJobNumbersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TblUserJobNumbersController.class);

    @Autowired
	@Qualifier("PSA.TblUserJobNumbersService")
	private TblUserJobNumbersService tblUserJobNumbersService;

	@ApiOperation(value = "Creates a new TblUserJobNumbers instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TblUserJobNumbers createTblUserJobNumbers(@RequestBody TblUserJobNumbers tblUserJobNumbers) {
		LOGGER.debug("Create TblUserJobNumbers with information: {}" , tblUserJobNumbers);

		tblUserJobNumbers = tblUserJobNumbersService.create(tblUserJobNumbers);
		LOGGER.debug("Created TblUserJobNumbers with information: {}" , tblUserJobNumbers);

	    return tblUserJobNumbers;
	}


    @ApiOperation(value = "Returns the TblUserJobNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblUserJobNumbers getTblUserJobNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TblUserJobNumbers with id: {}" , id);

        TblUserJobNumbers foundTblUserJobNumbers = tblUserJobNumbersService.getById(id);
        LOGGER.debug("TblUserJobNumbers details with id: {}" , foundTblUserJobNumbers);

        return foundTblUserJobNumbers;
    }

    @ApiOperation(value = "Updates the TblUserJobNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TblUserJobNumbers editTblUserJobNumbers(@PathVariable("id") Integer id, @RequestBody TblUserJobNumbers tblUserJobNumbers) throws EntityNotFoundException {
        LOGGER.debug("Editing TblUserJobNumbers with id: {}" , tblUserJobNumbers.getId());

        tblUserJobNumbers.setId(id);
        tblUserJobNumbers = tblUserJobNumbersService.update(tblUserJobNumbers);
        LOGGER.debug("TblUserJobNumbers details with id: {}" , tblUserJobNumbers);

        return tblUserJobNumbers;
    }

    @ApiOperation(value = "Deletes the TblUserJobNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTblUserJobNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TblUserJobNumbers with id: {}" , id);

        TblUserJobNumbers deletedTblUserJobNumbers = tblUserJobNumbersService.delete(id);

        return deletedTblUserJobNumbers != null;
    }

    /**
     * @deprecated Use {@link #findTblUserJobNumbers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TblUserJobNumbers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserJobNumbers> searchTblUserJobNumbersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TblUserJobNumbers list");
        return tblUserJobNumbersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblUserJobNumbers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserJobNumbers> findTblUserJobNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblUserJobNumbers list");
        return tblUserJobNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TblUserJobNumbers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TblUserJobNumbers> filterTblUserJobNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TblUserJobNumbers list");
        return tblUserJobNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTblUserJobNumbers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tblUserJobNumbersService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TblUserJobNumbers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTblUserJobNumbers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TblUserJobNumbers");
		return tblUserJobNumbersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTblUserJobNumbersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tblUserJobNumbersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TblUserJobNumbersService instance
	 */
	protected void setTblUserJobNumbersService(TblUserJobNumbersService service) {
		this.tblUserJobNumbersService = service;
	}

}

