/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.FeedBack;
import com.psabackoffice.psa.RefFbSeverity;
import com.psabackoffice.psa.service.RefFbSeverityService;


/**
 * Controller object for domain model class RefFbSeverity.
 * @see RefFbSeverity
 */
@RestController("PSA.RefFbSeverityController")
@Api(value = "RefFbSeverityController", description = "Exposes APIs to work with RefFbSeverity resource.")
@RequestMapping("/PSA/RefFbSeverity")
public class RefFbSeverityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefFbSeverityController.class);

    @Autowired
	@Qualifier("PSA.RefFbSeverityService")
	private RefFbSeverityService refFbSeverityService;

	@ApiOperation(value = "Creates a new RefFbSeverity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefFbSeverity createRefFbSeverity(@RequestBody RefFbSeverity refFbSeverity) {
		LOGGER.debug("Create RefFbSeverity with information: {}" , refFbSeverity);

		refFbSeverity = refFbSeverityService.create(refFbSeverity);
		LOGGER.debug("Created RefFbSeverity with information: {}" , refFbSeverity);

	    return refFbSeverity;
	}

    @ApiOperation(value = "Returns the RefFbSeverity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefFbSeverity getRefFbSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefFbSeverity with id: {}" , id);

        RefFbSeverity foundRefFbSeverity = refFbSeverityService.getById(id);
        LOGGER.debug("RefFbSeverity details with id: {}" , foundRefFbSeverity);

        return foundRefFbSeverity;
    }

    @ApiOperation(value = "Updates the RefFbSeverity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefFbSeverity editRefFbSeverity(@PathVariable("id") Integer id, @RequestBody RefFbSeverity refFbSeverity) throws EntityNotFoundException {
        LOGGER.debug("Editing RefFbSeverity with id: {}" , refFbSeverity.getId());

        refFbSeverity.setId(id);
        refFbSeverity = refFbSeverityService.update(refFbSeverity);
        LOGGER.debug("RefFbSeverity details with id: {}" , refFbSeverity);

        return refFbSeverity;
    }

    @ApiOperation(value = "Deletes the RefFbSeverity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefFbSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefFbSeverity with id: {}" , id);

        RefFbSeverity deletedRefFbSeverity = refFbSeverityService.delete(id);

        return deletedRefFbSeverity != null;
    }

    /**
     * @deprecated Use {@link #findRefFbSeverities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefFbSeverity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSeverity> searchRefFbSeveritiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefFbSeverities list");
        return refFbSeverityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefFbSeverity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSeverity> findRefFbSeverities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefFbSeverities list");
        return refFbSeverityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefFbSeverity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefFbSeverity> filterRefFbSeverities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefFbSeverities list");
        return refFbSeverityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefFbSeverities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refFbSeverityService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefFbSeverity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefFbSeverities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefFbSeverities");
		return refFbSeverityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefFbSeverityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refFbSeverityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/feedBacks", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the feedBacks instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FeedBack> findAssociatedFeedBacks(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated feedBacks");
        return refFbSeverityService.findAssociatedFeedBacks(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefFbSeverityService instance
	 */
	protected void setRefFbSeverityService(RefFbSeverityService service) {
		this.refFbSeverityService = service;
	}

}

