/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.psa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.psa.RefPipeSizes;
import com.psabackoffice.psa.service.RefPipeSizesService;


/**
 * Controller object for domain model class RefPipeSizes.
 * @see RefPipeSizes
 */
@RestController("PSA.RefPipeSizesController")
@Api(value = "RefPipeSizesController", description = "Exposes APIs to work with RefPipeSizes resource.")
@RequestMapping("/PSA/RefPipeSizes")
public class RefPipeSizesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefPipeSizesController.class);

    @Autowired
	@Qualifier("PSA.RefPipeSizesService")
	private RefPipeSizesService refPipeSizesService;

	@ApiOperation(value = "Creates a new RefPipeSizes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefPipeSizes createRefPipeSizes(@RequestBody RefPipeSizes refPipeSizes) {
		LOGGER.debug("Create RefPipeSizes with information: {}" , refPipeSizes);

		refPipeSizes = refPipeSizesService.create(refPipeSizes);
		LOGGER.debug("Created RefPipeSizes with information: {}" , refPipeSizes);

	    return refPipeSizes;
	}

    @ApiOperation(value = "Returns the RefPipeSizes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public RefPipeSizes getRefPipeSizes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RefPipeSizes with id: {}" , id);

        RefPipeSizes foundRefPipeSizes = refPipeSizesService.getById(id);
        LOGGER.debug("RefPipeSizes details with id: {}" , foundRefPipeSizes);

        return foundRefPipeSizes;
    }

    @ApiOperation(value = "Updates the RefPipeSizes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefPipeSizes editRefPipeSizes(@PathVariable("id") Integer id, @RequestBody RefPipeSizes refPipeSizes) {
        LOGGER.debug("Editing RefPipeSizes with id: {}" , refPipeSizes.getId());

        refPipeSizes.setId(id);
        refPipeSizes = refPipeSizesService.update(refPipeSizes);
        LOGGER.debug("RefPipeSizes details with id: {}" , refPipeSizes);

        return refPipeSizes;
    }

    @ApiOperation(value = "Deletes the RefPipeSizes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteRefPipeSizes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RefPipeSizes with id: {}" , id);

        RefPipeSizes deletedRefPipeSizes = refPipeSizesService.delete(id);

        return deletedRefPipeSizes != null;
    }

    /**
     * @deprecated Use {@link #findRefPipeSizes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefPipeSizes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeSizes> searchRefPipeSizesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefPipeSizes list by query filter:{}", (Object) queryFilters);
        return refPipeSizesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefPipeSizes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeSizes> findRefPipeSizes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefPipeSizes list by filter:", query);
        return refPipeSizesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefPipeSizes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefPipeSizes> filterRefPipeSizes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefPipeSizes list by filter", query);
        return refPipeSizesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefPipeSizes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refPipeSizesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefPipeSizes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefPipeSizes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefPipeSizes");
		return refPipeSizesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefPipeSizesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refPipeSizesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefPipeSizesService instance
	 */
	protected void setRefPipeSizesService(RefPipeSizesService service) {
		this.refPipeSizesService = service;
	}

}

