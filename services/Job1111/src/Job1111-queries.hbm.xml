<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="GetQuantitiesTestPackagePipe">
        <![CDATA[
        SELECT ptd.TestPackageNumber, 

count(ptd.BidID) AS ItemsTotal, 

TRUNCATE(sum(pte.RFTHours),6) AS RFTHours,
TRUNCATE(sum(pte.HydroHours),6) AS HydroHours,
TRUNCATE(sum(pte.CTOHours),6) AS CTOHours,

SUM(ert.RFTInstalled) AS RFTInstalled, 
SUM(ert.HydroInstalled) AS HydroInstalled, 
SUM(ert.CTOInstalled) AS CTOInstalled,

TRUNCATE(sum(ert.EarnedRFTHours),6) AS EarnedRFTHours, 
TRUNCATE(sum(ert.EarnedHydroHours),6) AS EarnedHydroHours, 
TRUNCATE(sum(ert.EarnedCTOHours),6) AS EarnedCTOHours,

ROUND((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) - SUM(COALESCE(er.EarnedAllHours,0)), 2) AS LooseHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT er0.BidID, 
		SUM(er0.EarnedAllHours) AS EarnedAllHours 
		FROM(SELECT BidID,
			
		###Earned Hours Calculations ###
			(
			IF(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0) + sum(COALESCE(cse.InstalledQuantity,0)) > ptd.TakeOffQuantity, /*Is Installed Greater then TakeOff*/
			/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cse.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
			/*FALSE*/ COALESCE((COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
			) 
            +
			IF(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0) + sum(COALESCE(cscb.InstalledQuantity,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscb.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0) + sum(COALESCE(csw.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csw.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0) + sum(COALESCE(cscs.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscs.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0) + sum(COALESCE(csco.InstalledQuantity,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csco.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0) + sum(COALESCE(cscut.InstalledQuantity ,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscut.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0) + sum(COALESCE(cst.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cst.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0) + sum(COALESCE(cssu.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cssu.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(ptd.TakeOffQuantity * pd.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0) + sum(COALESCE(csd.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csd.InstalledQuantity,0)),0) * (ptd.EstimatedHours / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(ptd.TakeOffQuantity * pd.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0)) * (ptd.EstimatedHours / ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(ptd.TakeOffQuantity * pm.FAPercentCompleted,0) + COALESCE(pmm.MiscQuantity,0) + sum(COALESCE(csm.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csm.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(ptd.TakeOffQuantity * pm.FAPercentCompleted,0) + COALESCE(pmm.MiscQuantity,0)) * (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				) 
			) AS EarnedAllHours

			FROM SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
		
			LEFT JOIN `Job1111`.PipeFA pe
				ON pe.ActivityID = sas.ActivityID AND sas.ActivityType = 11 AND pe.FARework = 0

			LEFT JOIN `Job1111`.PipeFA pcb
				ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND pw.WeldRework = 0

			LEFT JOIN `Job1111`.PipeFA pcs
				ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeFA pco
				ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeFA pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA pt
				ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA psu
				ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA pd
				ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53)
			
			LEFT JOIN `Job1111`.PipeFA pm
				ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0


	LEFT JOIN `Job1111`.PipeTrackerDetails ptd
		ON ptd.BidID = sas.fk_BidIDAssigned


/* #### Begining of Misc activities assigned joins #### */	
	LEFT JOIN `Job1111`.PipeMisc pme
		ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmcb
		ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmw
		ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmcs
		ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmco
		ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
		
	LEFT JOIN `Job1111`.PipeMisc pmcut
		ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0

	LEFT JOIN `Job1111`.PipeMisc pmt
		ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
	   
	LEFT JOIN `Job1111`.PipeMisc pmsu
		ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivityType = "S" AND pmsu.MiscRework = 0

	LEFT JOIN `Job1111`.PipeMisc pmd
		ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
        
	LEFT JOIN `Job1111`.PipeMisc pmm
		ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0
				
			/* #### Begining of Cumulative Past sums Calculation #### */	
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pme
					ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (11,91)
				HAVING InstalledQuantity > 0) cse
				ON sas.ActivityType IN (11,91) AND sas.fk_BidIDAssigned = cse.fk_BidIDAssigned AND cse.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0		
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (21,91)
				HAVING InstalledQuantity > 0) cscb
				ON sas.ActivityType IN (21,91) AND sas.fk_BidIDAssigned = cscb.fk_BidIDAssigned AND cscb.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pw.WeldPercentCompleted * pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeWeld pw
					ON pw.ActivityID = sas.ActivityID AND WeldRework = 0
				LEFT JOIN PipeMisc pmw
					ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (22,91)
				HAVING InstalledQuantity > 0) csw
				ON sas.ActivityType IN (22,91) AND sas.fk_BidIDAssigned = csw.fk_BidIDAssigned AND csw.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0	
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (24,91)
				HAVING InstalledQuantity > 0) cscs
				ON sas.ActivityType IN (24,91) AND sas.fk_BidIDAssigned = cscs.fk_BidIDAssigned AND cscs.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0	
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (25,91)
				HAVING InstalledQuantity > 0) csco
				ON sas.ActivityType IN (25,91) AND sas.fk_BidIDAssigned = csco.fk_BidIDAssigned AND csco.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmcut
					ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (23,91)
				HAVING InstalledQuantity > 0) cscut
				ON sas.ActivityType IN (23,91) AND sas.fk_BidIDAssigned = cscut.fk_BidIDAssigned AND cscut.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmt
					ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (31,32,33,39,91)
				HAVING InstalledQuantity > 0) cst
				ON sas.ActivityType IN (31,32,33,39,91) AND sas.fk_BidIDAssigned = cst.fk_BidIDAssigned AND cst.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmsu
					ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivityType = "S" AND pmsu.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (38,91)
				HAVING InstalledQuantity > 0) cssu
				ON sas.ActivityType IN (32,91) AND sas.fk_BidIDAssigned = cssu.fk_BidIDAssigned AND cssu.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmd
					ON pmd.ActivityID = sas.ActivityID AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (51,52,53,91)
				HAVING InstalledQuantity > 0) csd
				ON sas.ActivityType IN (51,52,53,91) AND sas.fk_BidIDAssigned = csd.fk_BidIDAssigned AND csd.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pm.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pm
					ON pm.ActivityID = sas.ActivityID AND ptd.ActivityType = "MISC" AND pm.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (90,91)
				HAVING InstalledQuantity > 0) csm
				ON sas.ActivityType IN (90,91) AND sas.fk_BidIDAssigned = csm.fk_BidIDAssigned AND csm.ActivityID < sas.ActivityID


		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY sas.ActivityID) er0
GROUP BY er0.BidID) er
	ON er.BidID = ptd.BidID


LEFT JOIN (SELECT BidID,
		sum(COALESCE(pteR.InstalledReadyForTesting, 0)) AS RFTInstalled,
		sum(COALESCE(pteH.InstalledHydro, 0)) AS HydroInstalled,
		sum(COALESCE(pteC.InstalledClientTurnover, 0)) AS CTOInstalled,

		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent') * pteR.InstalledReadyForTesting, 0)) AS EarnedRFTHours,
		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent') * pteH.InstalledHydro, 0)) AS EarnedHydroHours,
		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent') * pteC.InstalledClientTurnover, 0)) AS EarnedCTOHours

		FROM `PipeTrackerDetails` ptd

		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteR
			ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 AND ptd.ActivityType != "D"
			
		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteH
			ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 AND ptd.ActivityType != "D"
			
		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledClientTurnover
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteC
			ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 AND ptd.ActivityType != "D"
		
        WHERE ptd.TestPackageNumber = :TestPackage			
		GROUP BY ptd.BidID) ert
	ON ert.BidID = ptd.BidID
 
 
LEFT JOIN (SELECT ptd.BidID,
			COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent'),0) AS TestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent')),0) AS RFTHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent')),0) AS HydroHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent')),0) AS CTOHours
			FROM PipeTrackerDetails ptd
			WHERE ptd.ActivityType != 'D'
            AND ptd.TestPackageNumber = :TestPackage) pte
	ON pte.BidID = ptd.BidID
  
    
WHERE ptd.TestPackageNumber = :TestPackage
GROUP BY ptd.TestPackageNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.TestPackageNumber, 

count(ptd.BidID) AS ItemsTotal, 

TRUNCATE(sum(pte.RFTHours),6) AS RFTHours,
TRUNCATE(sum(pte.HydroHours),6) AS HydroHours,
TRUNCATE(sum(pte.CTOHours),6) AS CTOHours,

SUM(ert.RFTInstalled) AS RFTInstalled, 
SUM(ert.HydroInstalled) AS HydroInstalled, 
SUM(ert.CTOInstalled) AS CTOInstalled,

TRUNCATE(sum(ert.EarnedRFTHours),6) AS EarnedRFTHours, 
TRUNCATE(sum(ert.EarnedHydroHours),6) AS EarnedHydroHours, 
TRUNCATE(sum(ert.EarnedCTOHours),6) AS EarnedCTOHours,

ROUND((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) - SUM(COALESCE(er.EarnedAllHours,0)), 2) AS LooseHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT er0.BidID, 
		SUM(er0.EarnedAllHours) AS EarnedAllHours 
		FROM(SELECT BidID,
			
		###Earned Hours Calculations ###
			(
			IF(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0) + sum(COALESCE(cse.InstalledQuantity,0)) > ptd.TakeOffQuantity, /*Is Installed Greater then TakeOff*/
			/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cse.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
			/*FALSE*/ COALESCE((COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
			) 
            +
			IF(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0) + sum(COALESCE(cscb.InstalledQuantity,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscb.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0) + sum(COALESCE(csw.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csw.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0) + sum(COALESCE(cscs.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscs.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0) + sum(COALESCE(csco.InstalledQuantity,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csco.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity), 0)
				)
			+
			IF(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0) + sum(COALESCE(cscut.InstalledQuantity ,0))	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cscut.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0) + sum(COALESCE(cst.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cst.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0) + sum(COALESCE(cssu.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(cssu.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(ptd.TakeOffQuantity * pd.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0) + sum(COALESCE(csd.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csd.InstalledQuantity,0)),0) * (ptd.EstimatedHours / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(ptd.TakeOffQuantity * pd.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0)) * (ptd.EstimatedHours / ptd.TakeOffQuantity),0)
				)
			+
			IF(COALESCE(ptd.TakeOffQuantity * pm.FAPercentCompleted,0) + COALESCE(pmm.MiscQuantity,0) + sum(COALESCE(csm.InstalledQuantity,0)) > ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
				/*TRUE*/ GREATEST(ptd.TakeOffQuantity - sum(COALESCE(csm.InstalledQuantity,0)),0) * (ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent') / ptd.TakeOffQuantity),
				/*FALSE*/ COALESCE((COALESCE(ptd.TakeOffQuantity * pm.FAPercentCompleted,0) + COALESCE(pmm.MiscQuantity,0)) * (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity),0)
				) 
			) AS EarnedAllHours

			FROM SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
		
			LEFT JOIN `Job1111`.PipeFA pe
				ON pe.ActivityID = sas.ActivityID AND sas.ActivityType = 11 AND pe.FARework = 0

			LEFT JOIN `Job1111`.PipeFA pcb
				ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND pw.WeldRework = 0

			LEFT JOIN `Job1111`.PipeFA pcs
				ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeFA pco
				ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0
		 
			LEFT JOIN `Job1111`.PipeFA pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA pt
				ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA psu
				ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0
				
			LEFT JOIN `Job1111`.PipeFA pd
				ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53)
			
			LEFT JOIN `Job1111`.PipeFA pm
				ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0


	LEFT JOIN `Job1111`.PipeTrackerDetails ptd
		ON ptd.BidID = sas.fk_BidIDAssigned


/* #### Begining of Misc activities assigned joins #### */	
	LEFT JOIN `Job1111`.PipeMisc pme
		ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmcb
		ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmw
		ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmcs
		ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
	
	LEFT JOIN `Job1111`.PipeMisc pmco
		ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
		
	LEFT JOIN `Job1111`.PipeMisc pmcut
		ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0

	LEFT JOIN `Job1111`.PipeMisc pmt
		ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
	   
	LEFT JOIN `Job1111`.PipeMisc pmsu
		ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivityType = "S" AND pmsu.MiscRework = 0

	LEFT JOIN `Job1111`.PipeMisc pmd
		ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
        
	LEFT JOIN `Job1111`.PipeMisc pmm
		ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0
				
			/* #### Begining of Cumulative Past sums Calculation #### */	
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pme
					ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (11,91)
				HAVING InstalledQuantity > 0) cse
				ON sas.ActivityType IN (11,91) AND sas.fk_BidIDAssigned = cse.fk_BidIDAssigned AND cse.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0		
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (21,91)
				HAVING InstalledQuantity > 0) cscb
				ON sas.ActivityType IN (21,91) AND sas.fk_BidIDAssigned = cscb.fk_BidIDAssigned AND cscb.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pw.WeldPercentCompleted * pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeWeld pw
					ON pw.ActivityID = sas.ActivityID AND WeldRework = 0
				LEFT JOIN PipeMisc pmw
					ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (22,91)
				HAVING InstalledQuantity > 0) csw
				ON sas.ActivityType IN (22,91) AND sas.fk_BidIDAssigned = csw.fk_BidIDAssigned AND csw.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0	
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (24,91)
				HAVING InstalledQuantity > 0) cscs
				ON sas.ActivityType IN (24,91) AND sas.fk_BidIDAssigned = cscs.fk_BidIDAssigned AND cscs.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0	
				LEFT JOIN PipeMisc pmc
					ON pmc.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmc.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (25,91)
				HAVING InstalledQuantity > 0) csco
				ON sas.ActivityType IN (25,91) AND sas.fk_BidIDAssigned = csco.fk_BidIDAssigned AND csco.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmcut
					ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (23,91)
				HAVING InstalledQuantity > 0) cscut
				ON sas.ActivityType IN (23,91) AND sas.fk_BidIDAssigned = cscut.fk_BidIDAssigned AND cscut.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmt
					ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (31,32,33,39,91)
				HAVING InstalledQuantity > 0) cst
				ON sas.ActivityType IN (31,32,33,39,91) AND sas.fk_BidIDAssigned = cst.fk_BidIDAssigned AND cst.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmsu
					ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivityType = "S" AND pmsu.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (38,91)
				HAVING InstalledQuantity > 0) cssu
				ON sas.ActivityType IN (32,91) AND sas.fk_BidIDAssigned = cssu.fk_BidIDAssigned AND cssu.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pmd
					ON pmd.ActivityID = sas.ActivityID AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (51,52,53,91)
				HAVING InstalledQuantity > 0) csd
				ON sas.ActivityType IN (51,52,53,91) AND sas.fk_BidIDAssigned = csd.fk_BidIDAssigned AND csd.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(pfa.FAQuantity * pfa.FAPercentCompleted,0) + COALESCE(pm.MiscQuantity,0)) AS InstalledQuantity
				FROM SubmissionActivityStatus sas
				JOIN PipeTrackerDetails ptd
					ON ptd.BidID = sas.fk_BidIDAssigned AND ptd.TestPackageNumber = :TestPackage
				LEFT JOIN PipeFA pfa
					ON pfa.ActivityID = sas.ActivityID AND pfa.FARework = 0
				LEFT JOIN PipeMisc pm
					ON pm.ActivityID = sas.ActivityID AND ptd.ActivityType = "MISC" AND pm.MiscRework = 0
				WHERE sas.fk_ActivityStatus IN (5,12)
				AND sas.ActivityType IN (90,91)
				HAVING InstalledQuantity > 0) csm
				ON sas.ActivityType IN (90,91) AND sas.fk_BidIDAssigned = csm.fk_BidIDAssigned AND csm.ActivityID < sas.ActivityID


		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY sas.ActivityID) er0
GROUP BY er0.BidID) er
	ON er.BidID = ptd.BidID


LEFT JOIN (SELECT BidID,
		sum(COALESCE(pteR.InstalledReadyForTesting, 0)) AS RFTInstalled,
		sum(COALESCE(pteH.InstalledHydro, 0)) AS HydroInstalled,
		sum(COALESCE(pteC.InstalledClientTurnover, 0)) AS CTOInstalled,

		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent') * pteR.InstalledReadyForTesting, 0)) AS EarnedRFTHours,
		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent') * pteH.InstalledHydro, 0)) AS EarnedHydroHours,
		sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent') * pteC.InstalledClientTurnover, 0)) AS EarnedCTOHours

		FROM `PipeTrackerDetails` ptd

		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteR
			ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 AND ptd.ActivityType != "D"
			
		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteH
			ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 AND ptd.ActivityType != "D"
			
		LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledClientTurnover
					FROM PipeTesting pte
					JOIN SubmissionActivityStatus sas
						ON sas.ActivityID = pte.ActivityID AND pte.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12) AND pte.TestingRework = 0) pteC
			ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 AND ptd.ActivityType != "D"
		
        WHERE ptd.TestPackageNumber = :TestPackage			
		GROUP BY ptd.BidID) ert
	ON ert.BidID = ptd.BidID
 
 
LEFT JOIN (SELECT ptd.BidID,
			COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent'),0) AS TestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent')),0) AS RFTHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent')),0) AS HydroHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent')),0) AS CTOHours
			FROM PipeTrackerDetails ptd
			WHERE ptd.ActivityType != 'D'
            AND ptd.TestPackageNumber = :TestPackage) pte
	ON pte.BidID = ptd.BidID
  
    
WHERE ptd.TestPackageNumber = :TestPackage
GROUP BY ptd.TestPackageNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteel">
        <![CDATA[
        SELECT sas.SubmissionID, std.BidID,

SUM(COALESCE(stls.FAQuantity,0)) AS ShakeQuantity,
SUM(COALESCE(stle.FAQuantity,0)) AS ErectQuantity,
SUM(COALESCE(stle.FAPercentCompleted,0)) AS ErectPercent,
SUM(COALESCE(stlb.FAQuantity,0)) AS BoltoutQuantity,
SUM(COALESCE(stlb.FAPercentCompleted,0)) AS BoltoutPercent,
SUM(COALESCE(stli.FAQuantity,0)) AS ImpQuantity,
SUM(COALESCE(stli.FAPercentCompleted,0)) AS ImpPercent,
SUM(COALESCE(stlw.FAQuantity,0)) AS WeldQuantity,
SUM(COALESCE(stlw.FAPercentCompleted,0)) AS WeldPercent,
SUM(COALESCE(stlsell.FAQuantity,0)) AS SellQuantity,
SUM(COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)) AS DemoQuantity,
SUM(COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0)) AS MiscQuantity,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

        
#### Assigned Activities Joins #####    
JOIN SteelTrackerDetails std
	ON std.BidID = sas.fk_BidIDAssigned
    
LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65 AND stlsell.FARework = 0
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.SubmissionID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteel__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, std.BidID,

SUM(COALESCE(stls.FAQuantity,0)) AS ShakeQuantity,
SUM(COALESCE(stle.FAQuantity,0)) AS ErectQuantity,
SUM(COALESCE(stle.FAPercentCompleted,0)) AS ErectPercent,
SUM(COALESCE(stlb.FAQuantity,0)) AS BoltoutQuantity,
SUM(COALESCE(stlb.FAPercentCompleted,0)) AS BoltoutPercent,
SUM(COALESCE(stli.FAQuantity,0)) AS ImpQuantity,
SUM(COALESCE(stli.FAPercentCompleted,0)) AS ImpPercent,
SUM(COALESCE(stlw.FAQuantity,0)) AS WeldQuantity,
SUM(COALESCE(stlw.FAPercentCompleted,0)) AS WeldPercent,
SUM(COALESCE(stlsell.FAQuantity,0)) AS SellQuantity,
SUM(COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)) AS DemoQuantity,
SUM(COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0)) AS MiscQuantity,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

        
#### Assigned Activities Joins #####    
JOIN SteelTrackerDetails std
	ON std.BidID = sas.fk_BidIDAssigned
    
LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65 AND stlsell.FARework = 0
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.SubmissionID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageSteel">
        <![CDATA[
        SELECT std.BidID, std.TestPackageNumber,

### Quantity ####
sum(std.TakeOffQuantity) AS SellPunchCount,

### Hours ####
sum(std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')) AS SellPunchHours,

### Installed Quantity ####
LEAST( 
IF(stlsell.SellTestPackageNumber IS NOT NULL,
##TRUE##
std.TakeOffQuantity,
##FALSE##
IF(stlfasell.FAQuantity IS NOT NULL, SUM(stlfasell.FAQuantity), 0)
), std.TakeOffQuantity) AS InstalledSell,

### Earned Hours ###
(sum(std.SteelHours) * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / sum(std.TakeOffQuantity) )
*
LEAST( 
IF(stlsell.SellTestPackageNumber IS NOT NULL,
##TRUE##
std.TakeOffQuantity,
##FALSE##
IF(stlfasell.FAQuantity IS NOT NULL, SUM(stlfasell.FAQuantity), 0)
), std.TakeOffQuantity) AS EarnedSellPunchHours,

SUM(
((std.SteelHours + std.WeldHours) * (1 - (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'))
) - COALESCE(er.EarnedHours,0)
) AS LooseHours



FROM SteelTrackerDetails std
LEFT JOIN (SELECT SUM(stlfa.FAQuantity) AS FAQuantity, sas.fk_BidIDAssigned AS BidID 
			FROM SteelFA stlfa
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = stlfa.ActivityID AND sas.fk_ActivityStatus IN (5,12)
			WHERE stlfa.ActivityType = 65 AND stlfa.FARework = 0
            GROUP BY sas.fk_BidIDAssigned ) stlfasell
	ON stlfasell.BidID = std.BidID

LEFT JOIN (SELECT DISTINCT SellTestPackageNumber
			FROM SteelSellPackage stlsell
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = stlsell.ActivityID AND sas.fk_ActivityStatus IN (5,12)) stlsell
	ON stlsell.SellTestPackageNumber = std.TestPackageNumber

LEFT JOIN (SELECT BidID,
		### Earned Hour Quantities ###
		SUM(er0.EarnedHours) AS EarnedHours

		FROM(SELECT BidID, 
			### Earned Hour Quantities ###
			(
			IF(COALESCE(stls.FAQuantity,0) * COALESCE(stls.FAPercentCompleted,0) + SUM(COALESCE(css.InstalledQuantity,0)
			) > std.TakeOffQuantity,
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(css.InstalledQuantity,0))),0) * (std.SteelHours * ', ShakePercent,' / std.TakeOffQuantity),
			/*FALSE*/
			COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity) * (stls.FAQuantity * stls.FAPercentCompleted),0)
			) 
			+
			IF(COALESCE(stle.FAQuantity,0) * COALESCE(stle.FAPercentCompleted,0) + SUM(COALESCE(cse.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(cse.InstalledQuantity,0))),0) * (std.SteelHours * ', ErectPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity) * (stle.FAQuantity * stle.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stlb.FAQuantity,0) * COALESCE(stlb.FAPercentCompleted,0) + SUM(COALESCE(csb.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csb.InstalledQuantity,0))),0) * (std.SteelHours * ', BoltOutPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity) * (stlb.FAQuantity * stlb.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stli.FAQuantity,0) * COALESCE(stli.FAPercentCompleted,0) + SUM(COALESCE(csi.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csi.InstalledQuantity,0))),0) * (std.SteelHours * ', ImpPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity) * (stli.FAQuantity * stli.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stlw.FAQuantity,0) * COALESCE(stlw.FAPercentCompleted,0) + SUM(COALESCE(csw.InstalledQuantity,0)
			) > std.WeldCount,/*Is New + cumlitive quantity greater then WeldCount*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.WeldCount,0) - SUM(COALESCE(csw.InstalledQuantity,0))),0) * (std.WeldHours / NULLIF(std.WeldCount,0)),
			/*FALSE*/
			(COALESCE((std.WeldHours / NULLIF(std.WeldCount,0)) * (stlw.FAQuantity * stlw.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stld.DemoPercentCompleted,0) * std.TakeOffQuantity + SUM(COALESCE(csd.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csd.InstalledQuantity,0))),0) * (std.SteelHours / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours / std.TakeOffQuantity) * (stld.DemoPercentCompleted * std.TakeOffQuantity) ,0))
			) 
			+
			IF(COALESCE(stlm.MiscPercentCompleted,0) * std.TakeOffQuantity + SUM(COALESCE(csm.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csm.InstalledQuantity,0))),0) * (std.SteelHours / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours / std.TakeOffQuantity) * (stlm.MiscPercentCompleted * std.TakeOffQuantity) ,0))
			) 
			) AS EarnedHours
			 

			FROM SubmissionActivityStatus sas
					
			JOIN SteelTrackerDetails std
				ON std.BidID = sas.fk_BidIDAssigned

			LEFT JOIN SteelFA stls
				ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0

			LEFT JOIN SteelFA stle
				ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0

			LEFT JOIN SteelFA stlb
				ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0

			LEFT JOIN SteelFA stli
				ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
				
			LEFT JOIN SteelFA stlw
				ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0

			LEFT JOIN SteelDemo stld
				ON stld.ActivityID = sas.ActivityID
				
			LEFT JOIN SteelMisc stlm
				ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

			/* #### Begining of Cumulative Past sums Calculation #### */
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) css
				ON sas.ActivityType = 61 AND sas.fk_BidIDAssigned = css.fk_BidIDAssigned AND css.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) cse
				ON sas.ActivityType = 62 AND sas.fk_BidIDAssigned = cse.fk_BidIDAssigned AND cse.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csb
								ON sas.ActivityType = 63 AND sas.fk_BidIDAssigned = csb.fk_BidIDAssigned AND csb.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csi
				ON sas.ActivityType = 64 AND sas.fk_BidIDAssigned = csi.fk_BidIDAssigned AND csi.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csw
				ON sas.ActivityType = 68 AND sas.fk_BidIDAssigned = csw.fk_BidIDAssigned AND csw.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelDemo stld
							ON stld.ActivityID = sas.ActivityID 
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csd
				ON sas.ActivityType = 67 AND sas.fk_BidIDAssigned = csd.fk_BidIDAssigned AND csd.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(MiscPercentCompleted * std.TakeOffQuantity,0) ) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelMisc stlm
							ON stlm.ActivityID = sas.ActivityID 
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csm
				ON sas.ActivityType = 96 AND sas.fk_BidIDAssigned = csm.fk_BidIDAssigned AND csm.ActivityID < sas.ActivityID

			WHERE sas.fk_ActivityStatus IN (5,12)
			AND sas.ActivityType IN (60,61,62,63,64,66,67,68,96) 
			GROUP BY sas.ActivityID)er0
		GROUP BY er0.BidID) er
	ON er.BidID = std.BidID
  
WHERE std.TestPackageNumber = :TestPackage
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.BidID, std.TestPackageNumber,

### Quantity ####
sum(std.TakeOffQuantity) AS SellPunchCount,

### Hours ####
sum(std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')) AS SellPunchHours,

### Installed Quantity ####
LEAST( 
IF(stlsell.SellTestPackageNumber IS NOT NULL,
##TRUE##
std.TakeOffQuantity,
##FALSE##
IF(stlfasell.FAQuantity IS NOT NULL, SUM(stlfasell.FAQuantity), 0)
), std.TakeOffQuantity) AS InstalledSell,

### Earned Hours ###
(sum(std.SteelHours) * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / sum(std.TakeOffQuantity) )
*
LEAST( 
IF(stlsell.SellTestPackageNumber IS NOT NULL,
##TRUE##
std.TakeOffQuantity,
##FALSE##
IF(stlfasell.FAQuantity IS NOT NULL, SUM(stlfasell.FAQuantity), 0)
), std.TakeOffQuantity) AS EarnedSellPunchHours,

SUM(
((std.SteelHours + std.WeldHours) * (1 - (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'))
) - COALESCE(er.EarnedHours,0)
) AS LooseHours



FROM SteelTrackerDetails std
LEFT JOIN (SELECT SUM(stlfa.FAQuantity) AS FAQuantity, sas.fk_BidIDAssigned AS BidID 
			FROM SteelFA stlfa
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = stlfa.ActivityID AND sas.fk_ActivityStatus IN (5,12)
			WHERE stlfa.ActivityType = 65 AND stlfa.FARework = 0
            GROUP BY sas.fk_BidIDAssigned ) stlfasell
	ON stlfasell.BidID = std.BidID

LEFT JOIN (SELECT DISTINCT SellTestPackageNumber
			FROM SteelSellPackage stlsell
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = stlsell.ActivityID AND sas.fk_ActivityStatus IN (5,12)) stlsell
	ON stlsell.SellTestPackageNumber = std.TestPackageNumber

LEFT JOIN (SELECT BidID,
		### Earned Hour Quantities ###
		SUM(er0.EarnedHours) AS EarnedHours

		FROM(SELECT BidID, 
			### Earned Hour Quantities ###
			(
			IF(COALESCE(stls.FAQuantity,0) * COALESCE(stls.FAPercentCompleted,0) + SUM(COALESCE(css.InstalledQuantity,0)
			) > std.TakeOffQuantity,
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(css.InstalledQuantity,0))),0) * (std.SteelHours * ', ShakePercent,' / std.TakeOffQuantity),
			/*FALSE*/
			COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity) * (stls.FAQuantity * stls.FAPercentCompleted),0)
			) 
			+
			IF(COALESCE(stle.FAQuantity,0) * COALESCE(stle.FAPercentCompleted,0) + SUM(COALESCE(cse.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(cse.InstalledQuantity,0))),0) * (std.SteelHours * ', ErectPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity) * (stle.FAQuantity * stle.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stlb.FAQuantity,0) * COALESCE(stlb.FAPercentCompleted,0) + SUM(COALESCE(csb.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csb.InstalledQuantity,0))),0) * (std.SteelHours * ', BoltOutPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity) * (stlb.FAQuantity * stlb.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stli.FAQuantity,0) * COALESCE(stli.FAPercentCompleted,0) + SUM(COALESCE(csi.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csi.InstalledQuantity,0))),0) * (std.SteelHours * ', ImpPercent,' / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity) * (stli.FAQuantity * stli.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stlw.FAQuantity,0) * COALESCE(stlw.FAPercentCompleted,0) + SUM(COALESCE(csw.InstalledQuantity,0)
			) > std.WeldCount,/*Is New + cumlitive quantity greater then WeldCount*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.WeldCount,0) - SUM(COALESCE(csw.InstalledQuantity,0))),0) * (std.WeldHours / NULLIF(std.WeldCount,0)),
			/*FALSE*/
			(COALESCE((std.WeldHours / NULLIF(std.WeldCount,0)) * (stlw.FAQuantity * stlw.FAPercentCompleted),0))
			) 
			+
			IF(COALESCE(stld.DemoPercentCompleted,0) * std.TakeOffQuantity + SUM(COALESCE(csd.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csd.InstalledQuantity,0))),0) * (std.SteelHours / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours / std.TakeOffQuantity) * (stld.DemoPercentCompleted * std.TakeOffQuantity) ,0))
			) 
			+
			IF(COALESCE(stlm.MiscPercentCompleted,0) * std.TakeOffQuantity + SUM(COALESCE(csm.InstalledQuantity,0)
			) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
			/*TRUE*/ 
			GREATEST((COALESCE(std.TakeOffQuantity,0) - SUM(COALESCE(csm.InstalledQuantity,0))),0) * (std.SteelHours / std.TakeOffQuantity),
			/*FALSE*/
			(COALESCE((std.SteelHours / std.TakeOffQuantity) * (stlm.MiscPercentCompleted * std.TakeOffQuantity) ,0))
			) 
			) AS EarnedHours
			 

			FROM SubmissionActivityStatus sas
					
			JOIN SteelTrackerDetails std
				ON std.BidID = sas.fk_BidIDAssigned

			LEFT JOIN SteelFA stls
				ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0

			LEFT JOIN SteelFA stle
				ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0

			LEFT JOIN SteelFA stlb
				ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0

			LEFT JOIN SteelFA stli
				ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
				
			LEFT JOIN SteelFA stlw
				ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0

			LEFT JOIN SteelDemo stld
				ON stld.ActivityID = sas.ActivityID
				
			LEFT JOIN SteelMisc stlm
				ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

			/* #### Begining of Cumulative Past sums Calculation #### */
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) css
				ON sas.ActivityType = 61 AND sas.fk_BidIDAssigned = css.fk_BidIDAssigned AND css.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) cse
				ON sas.ActivityType = 62 AND sas.fk_BidIDAssigned = cse.fk_BidIDAssigned AND cse.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csb
								ON sas.ActivityType = 63 AND sas.fk_BidIDAssigned = csb.fk_BidIDAssigned AND csb.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csi
				ON sas.ActivityType = 64 AND sas.fk_BidIDAssigned = csi.fk_BidIDAssigned AND csi.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(FAQuantity * FAPercentCompleted,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelFA stlfa
							ON stlfa.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND FARework = 0
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csw
				ON sas.ActivityType = 68 AND sas.fk_BidIDAssigned = csw.fk_BidIDAssigned AND csw.ActivityID < sas.ActivityID

			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelDemo stld
							ON stld.ActivityID = sas.ActivityID 
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csd
				ON sas.ActivityType = 67 AND sas.fk_BidIDAssigned = csd.fk_BidIDAssigned AND csd.ActivityID < sas.ActivityID
				
			LEFT JOIN (SELECT sas.ActivityID, sas.fk_BidIDAssigned, (COALESCE(MiscPercentCompleted * std.TakeOffQuantity,0) ) AS InstalledQuantity
						FROM SubmissionActivityStatus sas
						JOIN SteelMisc stlm
							ON stlm.ActivityID = sas.ActivityID 
						LEFT JOIN SteelTrackerDetails std
							ON std.BidID = sas.fk_BidIDAssigned 
						WHERE sas.fk_ActivityStatus IN (5,12)
						HAVING InstalledQuantity > 0) csm
				ON sas.ActivityType = 96 AND sas.fk_BidIDAssigned = csm.fk_BidIDAssigned AND csm.ActivityID < sas.ActivityID

			WHERE sas.fk_ActivityStatus IN (5,12)
			AND sas.ActivityType IN (60,61,62,63,64,66,67,68,96) 
			GROUP BY sas.ActivityID)er0
		GROUP BY er0.BidID) er
	ON er.BidID = std.BidID
  
WHERE std.TestPackageNumber = :TestPackage) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingPipeHydroPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'PipeHydroHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeHydroPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'PipeHydroHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSettingPipeHydroPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='PipeHydroHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelCondensed">
        <![CDATA[
        SELECT SortGroup1, PieceMark, 
sum(ShakeQuantity) AS ShakeQuantity, 
sum(ErectQuantity) AS ErectQuantity, 
sum(BoltoutQuantity) AS BoltoutQuantity, 
sum(ImpQuantity) AS ImpQuantity, 
sum(WeldQuantity) AS WeldQuantity, 
sum(SellQuantity) AS SellQuantity, 
sum(DemoQuantity) AS DemoQuantity, 
sum(MiscQuantity) AS MiscQuantity, 
ReceivedTime 
FROM(SELECT  
std.SortGroup1, std.PieceMark, 
sum(COALESCE(stls.FAQuantity,0)) AS ShakeQuantity,
0 AS ErectQuantity,
0 AS BoltoutQuantity,
0 AS ImpQuantity,
0 AS WeldQuantity,
0 AS SellQuantity,
0 AS DemoQuantity,
0 AS MiscQuantity,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityID = 61
JOIN SteelTrackerDetails std
	ON std.BidID = stls.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,
TRUNCATE(sum(COALESCE(stle.FAQuantity * stle.FAPercentCompleted,0)),2),
0,0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.Activitytype = 62
JOIN SteelTrackerDetails std
	ON std.BidID = stle.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,
TRUNCATE(sum(COALESCE(stlb.FAQuantity * stlb.FAPercentCompleted,0)),2),
0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63
JOIN SteelTrackerDetails std
	ON std.BidID = stlb.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,
TRUNCATE(sum(COALESCE(stli.FAQuantity * stli.FAPercentCompleted,0)),2),
0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64
JOIN SteelTrackerDetails std
	ON std.BidID = stli.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,0,
TRUNCATE(sum(COALESCE(stlw.FAQuantity * stlw.FAPercentCompleted,0)),2),
0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68
JOIN SteelTrackerDetails std
	ON std.BidID = stlw.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlsell.FAQuantity,0)),2),
0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65
JOIN SteelTrackerDetails std
	ON std.BidID = stlsell.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.Description,
0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)),2),
0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.Description,
0,0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0)),2),

sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stlm.MiscBidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)
) t
GROUP BY t.SortGroup1, t.PieceMark, Date(t.ReceivedTime)
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelCondensed__count">
        <![CDATA[
        select count(*) from (SELECT SortGroup1, PieceMark, 
sum(ShakeQuantity) AS ShakeQuantity, 
sum(ErectQuantity) AS ErectQuantity, 
sum(BoltoutQuantity) AS BoltoutQuantity, 
sum(ImpQuantity) AS ImpQuantity, 
sum(WeldQuantity) AS WeldQuantity, 
sum(SellQuantity) AS SellQuantity, 
sum(DemoQuantity) AS DemoQuantity, 
sum(MiscQuantity) AS MiscQuantity, 
ReceivedTime 
FROM(SELECT  
std.SortGroup1, std.PieceMark, 
sum(COALESCE(stls.FAQuantity,0)) AS ShakeQuantity,
0 AS ErectQuantity,
0 AS BoltoutQuantity,
0 AS ImpQuantity,
0 AS WeldQuantity,
0 AS SellQuantity,
0 AS DemoQuantity,
0 AS MiscQuantity,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityID = 61
JOIN SteelTrackerDetails std
	ON std.BidID = stls.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,
TRUNCATE(sum(COALESCE(stle.FAQuantity * stle.FAPercentCompleted,0)),2),
0,0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.Activitytype = 62
JOIN SteelTrackerDetails std
	ON std.BidID = stle.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,
TRUNCATE(sum(COALESCE(stlb.FAQuantity * stlb.FAPercentCompleted,0)),2),
0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63
JOIN SteelTrackerDetails std
	ON std.BidID = stlb.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,
TRUNCATE(sum(COALESCE(stli.FAQuantity * stli.FAPercentCompleted,0)),2),
0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64
JOIN SteelTrackerDetails std
	ON std.BidID = stli.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,0,
TRUNCATE(sum(COALESCE(stlw.FAQuantity * stlw.FAPercentCompleted,0)),2),
0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68
JOIN SteelTrackerDetails std
	ON std.BidID = stlw.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.PieceMark,
0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlsell.FAQuantity,0)),2),
0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65
JOIN SteelTrackerDetails std
	ON std.BidID = stlsell.FABidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.Description,
0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0)),2),
0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)   



UNION 



SELECT  
std.SortGroup1, std.Description,
0,0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0)),2),

sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stlm.MiscBidID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY SortGroup1, PieceMark, Date(sd.ReceivedTime)
) t
GROUP BY t.SortGroup1, t.PieceMark, Date(t.ReceivedTime)) wmTempTable
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingApproval">
        <![CDATA[
        SELECT t.* 
FROM (
SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, pw.WeldSpool1 AS Spool1, pw.WeldSpool2 AS Spool2, 
pw.WeldLineNumber AS Line1, pw.WeldDrawingNumber AS Drawing1, pw.WeldSheetNumber AS Sheet1, 
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS Drawing2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pw.WeldSize AS Size, pw.WeldNotes AS Notes,
 COALESCE(pw.WeldPercentCompleted,0) AS Quantity
, 'N/A' AS Area, 1.00 AS PercentClaim, pw.WeldRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus 
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pw.WeldSpool2
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
pfa.FABidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
ptd.Size AS Size, pfa.FANotes, 
CASE 

WHEN (sas.ActivityType = 38) THEN
	(pfa.FAQuantity * pfa.FAPercentCompleted)
WHEN (sas.ActivityType IN (51,52,53,90)) THEN
	(ptd.TakeOffQuantity * pfa.FAPercentCompleted)
ELSE
	(pfa.FAQuantity)
END 
AS Quantity,

 'N/A' AS Area, FAPercentCompleted AS PercentClaim, pfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus      
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
LEFT JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, pte.TestingTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS Line1, 'N/A' AS DrawingNumber, pte.TestingRework AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
'N/A' AS Size , pte.TestingNotes, 1 AS Quantity, 
'N/A' AS Area, 1.00 AS PercentClaim, pte.TestingRework AS Rework
            
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeTesting pte
	ON pte.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
pm.MiscLineNumber, pm.MiscDrawingNumber, pm.MiscSheetNumber, 
pm.MiscLineNumber AS Line2, pm.MiscDrawingNumber AS DWG2, pm.MiscSheetNumber AS Sheet2,
'N/A' AS MiscSize , pm.MiscNotes, pm.MiscQuantity AS Quantity,
'N/A' AS Area, 1.00 AS PercentClaim, pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus	
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stlfa.FABidID AS BidID, std.PieceMark AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlfa.FANotes, stlfa.FAQuantity AS Quantity, std.SortGroup1, stlfa.FAPercentCompleted AS PercentClaim, stlfa.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stlfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stld.DemoBidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stld.DemoNotes, 1 AS Quantity, std.Area, DemoPercentCompleted AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, stlsp.SellTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsp.SellNotes, 1 AS Quantity, 'N/A' AS Area, 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSellPackage stlsp
	ON stlsp.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stlm.MiscBidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlm.MiscNotes, 1 AS Quantity, 'N/A' AS Area, MiscPercentCompleted AS PercentClaim, stlm.MiscRework AS Rework
 
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
cfa.FABidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cfa.FANotes, IF(cfa.ActivityType = 70, (cfa.FAPercentCompleted * ctd.TakeOffQuantity), cfa.FAQuantity) AS Quantity, 'N/A' AS Area, cfa.FAPercentCompleted AS PercentClaim, cfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID =  cfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)




UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, csp.SellTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
csp.SellNotes, 1 AS Quantity, 'N/A' AS Area, 1.00 PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilSellPackage csp
	ON csp.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'EQUIP' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
efa.FABidID AS BidID, 'N/A' AS Spool1, etd.ComponentNumber AS Spool2, 
etd.Description AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
efa.FANotes, (etd.TakeOffQuantity * efa.FAPercentCompleted) AS Quantity, 'N/A' AS Area, efa.FAPercentCompleted AS PercentClaim, efa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = efa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)
) t
WHERE CRAFT LIKE :Craft
AND ForemanName LIKE :ForemanName
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="Craft" type="java.lang.String"/>
    <query-param name="ForemanName" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingApproval__count">
        <![CDATA[
        select count(*) from (SELECT t.* 
FROM (
SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, pw.WeldSpool1 AS Spool1, pw.WeldSpool2 AS Spool2, 
pw.WeldLineNumber AS Line1, pw.WeldDrawingNumber AS Drawing1, pw.WeldSheetNumber AS Sheet1, 
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS Drawing2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pw.WeldSize AS Size, pw.WeldNotes AS Notes,
 COALESCE(pw.WeldPercentCompleted,0) AS Quantity
, 'N/A' AS Area, 1.00 AS PercentClaim, pw.WeldRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus 
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pw.WeldSpool2
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
pfa.FABidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
ptd.Size AS Size, pfa.FANotes, 
CASE 

WHEN (sas.ActivityType = 38) THEN
	(pfa.FAQuantity * pfa.FAPercentCompleted)
WHEN (sas.ActivityType IN (51,52,53,90)) THEN
	(ptd.TakeOffQuantity * pfa.FAPercentCompleted)
ELSE
	(pfa.FAQuantity)
END 
AS Quantity,

 'N/A' AS Area, FAPercentCompleted AS PercentClaim, pfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus      
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
LEFT JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, pte.TestingTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS Line1, 'N/A' AS DrawingNumber, pte.TestingRework AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
'N/A' AS Size , pte.TestingNotes, 1 AS Quantity, 
'N/A' AS Area, 1.00 AS PercentClaim, pte.TestingRework AS Rework
            
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeTesting pte
	ON pte.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
pm.MiscLineNumber, pm.MiscDrawingNumber, pm.MiscSheetNumber, 
pm.MiscLineNumber AS Line2, pm.MiscDrawingNumber AS DWG2, pm.MiscSheetNumber AS Sheet2,
'N/A' AS MiscSize , pm.MiscNotes, pm.MiscQuantity AS Quantity,
'N/A' AS Area, 1.00 AS PercentClaim, pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus	
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stlfa.FABidID AS BidID, std.PieceMark AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlfa.FANotes, stlfa.FAQuantity AS Quantity, std.SortGroup1, stlfa.FAPercentCompleted AS PercentClaim, stlfa.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stlfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stld.DemoBidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stld.DemoNotes, 1 AS Quantity, std.Area, DemoPercentCompleted AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, stlsp.SellTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsp.SellNotes, 1 AS Quantity, 'N/A' AS Area, 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSellPackage stlsp
	ON stlsp.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
stlm.MiscBidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlm.MiscNotes, 1 AS Quantity, 'N/A' AS Area, MiscPercentCompleted AS PercentClaim, stlm.MiscRework AS Rework
 
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
cfa.FABidID AS BidID, 'N/A' AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cfa.FANotes, IF(cfa.ActivityType = 70, (cfa.FAPercentCompleted * ctd.TakeOffQuantity), cfa.FAQuantity) AS Quantity, 'N/A' AS Area, cfa.FAPercentCompleted AS PercentClaim, cfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID =  cfa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)




UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
null AS BidID, csp.SellTestPackageNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
csp.SellNotes, 1 AS Quantity, 'N/A' AS Area, 1.00 PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilSellPackage csp
	ON csp.ActivityID = sas.ActivityID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'EQUIP' AS Craft, u.FullName AS ForemanName, sd.CompleteTime,
efa.FABidID AS BidID, 'N/A' AS Spool1, etd.ComponentNumber AS Spool2, 
etd.Description AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
efa.FANotes, (etd.TakeOffQuantity * efa.FAPercentCompleted) AS Quantity, 'N/A' AS Area, efa.FAPercentCompleted AS PercentClaim, efa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = efa.FABidID
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11,44)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)
) t
WHERE CRAFT LIKE :Craft
AND ForemanName LIKE :ForemanName) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="Craft" type="java.lang.String"/>
    <query-param name="ForemanName" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingPipeCTOPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'PipeCTOHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeCTOPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'PipeCTOHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilFA">
        <![CDATA[
        SELECT cfa.* 
FROM CivilFA cfa
WHERE ActivityID = :ActivityID

UNION

SELECT cfar.fk_OrgActivityId, cfar.FABidID, cfar.FAQuantity, cfar.FAPercentCompleted,  cfar.FARework, cfar.FANotes, cfar.ActivityType, cfar.FATimeInForm, cfar.Rev, cfar.TimeStamp
FROM CivilFAREV cfar
WHERE cfar.fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilFA__count">
        <![CDATA[
        select count(*) from (SELECT cfa.* 
FROM CivilFA cfa
WHERE ActivityID = :ActivityID

UNION

SELECT cfar.fk_OrgActivityId, cfar.FABidID, cfar.FAQuantity, cfar.FAPercentCompleted,  cfar.FARework, cfar.FANotes, cfar.ActivityType, cfar.FATimeInForm, cfar.Rev, cfar.TimeStamp
FROM CivilFAREV cfar
WHERE cfar.fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPREquip">
        <![CDATA[
        SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

etd.ComponentNumber AS TagNumber, 
etd.Description,
CONCAT(efa.FAPercentCompleted * 100,"%") AS QuantityInstalled,
ats.Status AS CurrentStatus,
efa.FARework AS Rework,
efa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID 
JOIN EquipTrackerDetails etd
    ON etd.BidID = efa.FABidID
        

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPREquip__count">
        <![CDATA[
        select count(*) from (SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

etd.ComponentNumber AS TagNumber, 
etd.Description,
CONCAT(efa.FAPercentCompleted * 100,"%") AS QuantityInstalled,
ats.Status AS CurrentStatus,
efa.FARework AS Rework,
efa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID 
JOIN EquipTrackerDetails etd
    ON etd.BidID = efa.FABidID
        

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelImp">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelImpHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdateSteelFA">
        <![CDATA[
        UPDATE `SteelFA` 
SET  
`FABidID`= :BidID,
`FAQuantity`= :Quantity,
`FAPercentCompleted`= :PercentCompleted,
`FARework`= :Rework, 
`FANotes`= :Notes , 
`ActivityType`= :ActivityType 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Short"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityType" type="java.lang.Short"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeWeld">
        <![CDATA[
        SELECT pw.* 
FROM PipeWeld pw
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pwr.fk_OrgActivityId, 
pwr.WeldSpool1, pwr.WeldSpool2, pwr.WeldDrawingNumber, pwr.WeldLineNumber, pwr.WeldSheetNumber, pwr.WeldTimeInForm, pwr.WeldLineSpec, pwr.WeldNumber, pwr.WeldStencil, pwr.WeldSize, pwr.WeldThickness, 
pwr.WeldType, pwr.WeldPosition, pwr.WeldMaterial, pwr.WeldProcedure, pwr.WeldComplete, pwr.WeldShared, pwr.WeldPercentCompleted, pwr.WeldRework, pwr.WeldNotes, 
pwr.ActivityType, pwr.Rev, pwr.TimeStamp
FROM PipeWeldREV pwr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeWeld__count">
        <![CDATA[
        select count(*) from (SELECT pw.* 
FROM PipeWeld pw
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pwr.fk_OrgActivityId, 
pwr.WeldSpool1, pwr.WeldSpool2, pwr.WeldDrawingNumber, pwr.WeldLineNumber, pwr.WeldSheetNumber, pwr.WeldTimeInForm, pwr.WeldLineSpec, pwr.WeldNumber, pwr.WeldStencil, pwr.WeldSize, pwr.WeldThickness, 
pwr.WeldType, pwr.WeldPosition, pwr.WeldMaterial, pwr.WeldProcedure, pwr.WeldComplete, pwr.WeldShared, pwr.WeldPercentCompleted, pwr.WeldRework, pwr.WeldNotes, 
pwr.ActivityType, pwr.Rev, pwr.TimeStamp
FROM PipeWeldREV pwr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewFAs">
        <![CDATA[
        SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status, 
ptd.Description AS Description, 'Pipe' AS Craft,  NULL AS BidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

LEFT JOIN PipeFA pfa
    ON pfa.ActivityID = sas.ActivityID
LEFT JOIN PipeTrackerDetails ptd
    ON ptd.BidID = pfa.FABidID


WHERE sas.ActivityType IN (11,21,22,23,24,25,31,32,33,38,39,41,42,43,51,52,53,59,90,91,92)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,at.ActivityType AS ActivityTypeName, sd.ReceivedTime, 
CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
CASE sas.ActivityType
WHEN 67 THEN
	std.Description
WHEN 66 THEN
	'Sell Package'
WHEN 96 THEN
	'MISC'
ELSE
	NULL
END AS Description, 
'Steel' AS Craft, stld.DemoBidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelSellPackage stlsell
	ON stlsell.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
    
LEFT JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.ActivityType IN (66,67,96)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
IF(sas.ActivityType IN (70,71), ctd.Description, IF(sas.ActivityType = 72, 'Sell Package', 'MISC') ) AS Description, 
'Civil' AS Craft, cfa.FABidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
LEFT JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID
    
LEFT JOIN CivilTrackerDetails ctd
	ON ctd.BidID = cfa.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.fk_ActivityStatus in (1,4,6,8,10)
AND sas.ActivityType IN (70,71,72)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
etd.Description, 'Equip' AS Craft, efa.FABidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
    
LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = efa.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



ORDER BY ActivityID DESC
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewFAs__count">
        <![CDATA[
        select count(*) from (SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status, 
ptd.Description AS Description, 'Pipe' AS Craft,  NULL AS BidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

LEFT JOIN PipeFA pfa
    ON pfa.ActivityID = sas.ActivityID
LEFT JOIN PipeTrackerDetails ptd
    ON ptd.BidID = pfa.FABidID


WHERE sas.ActivityType IN (11,21,22,23,24,25,31,32,33,38,39,41,42,43,51,52,53,59,90,91,92)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,at.ActivityType AS ActivityTypeName, sd.ReceivedTime, 
CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
CASE sas.ActivityType
WHEN 67 THEN
	std.Description
WHEN 66 THEN
	'Sell Package'
WHEN 96 THEN
	'MISC'
ELSE
	NULL
END AS Description, 
'Steel' AS Craft, stld.DemoBidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelSellPackage stlsell
	ON stlsell.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
    
LEFT JOIN SteelTrackerDetails std
	ON std.BidID = stld.DemoBidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.ActivityType IN (66,67,96)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
IF(sas.ActivityType IN (70,71), ctd.Description, IF(sas.ActivityType = 72, 'Sell Package', 'MISC') ) AS Description, 
'Civil' AS Craft, cfa.FABidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
LEFT JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID
    
LEFT JOIN CivilTrackerDetails ctd
	ON ctd.BidID = cfa.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.fk_ActivityStatus in (1,4,6,8,10)
AND sas.ActivityType IN (70,71,72)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



UNION



SELECT sd.SubmissionID, sas.ActivityID, sas.ActivityType, sas.fk_ActivityStatus,
at.ActivityType AS ActivityTypeName, sd.ReceivedTime, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
etd.Description, 'Equip' AS Craft, efa.FABidID

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
    
LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = efa.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID


LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)



ORDER BY ActivityID DESC) wmTempTable
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelDemo">
        <![CDATA[
        UPDATE `SteelDemo` 
SET 
`DemoBidID`= :BidID, 
`DemoPercentCompleted`= :Percentcompleted, 
`DemoNotes`= :Notes
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Percentcompleted" type="java.math.BigDecimal"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageCivil">
        <![CDATA[
        SELECT ctd.BidID, ctd.TestPackageNumber, 

#### Count ####
count(ctd.BidID) AS SellPunchCount,

#### Hours ####
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,

#### Installed Count ####
sum(COALESCE(ers.InstalledSellPunch,0)) AS SellPunchInstalled,

#### Earned Hours ####
sum(IF(ers.InstalledSellPunch = 1, 
/*TRUE*/
(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')),
/*FALSE*/
0
)) AS EarnedSellPunchHours,

#### Loose Hours ####
sum(
(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent') / COALESCE(ctd.TakeOffQuantity,0)) 
*
(COALESCE(ctd.TakeOffQuantity,0) - COALESCE(InstalledFAs,0))
) AS LooseHours

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT ctd.BidID,
		### Quantities Installed ###
		SUM(IF(sas.ActivityType IN (70),
		/* TRUE */ 
		COALESCE(cfa.FAPercentCompleted,0)  * ctd.TakeOffQuantity, 
		/* FALSE */
		cfa.FAQuantity
		)) AS InstalledFAs

		### SAS Joins ###
		FROM SubmissionActivityStatus sas
        
		JOIN PSA.REF_ActivityTypes at
			ON at.ID = sas.ActivityType
		JOIN CivilFA cfa
			ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
		LEFT JOIN CivilTrackerDetails ctd
			ON ctd.BidID = sas.fk_BidIDAssigned
				
		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY ctd.BidID) er
	ON er.BidID = ctd.BidID

 ##### Earned Sell HOURS #####  
 LEFT JOIN (SELECT cs.* , 1 AS InstalledSellPunch
			FROM CivilSellPackage cs
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)
			GROUP BY cs.SellTestPackageNumber) ers
	ON ers.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"
 
WHERE ctd.TestPackageNumber = :TestPackage
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.BidID, ctd.TestPackageNumber, 

#### Count ####
count(ctd.BidID) AS SellPunchCount,

#### Hours ####
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,

#### Installed Count ####
sum(COALESCE(ers.InstalledSellPunch,0)) AS SellPunchInstalled,

#### Earned Hours ####
sum(IF(ers.InstalledSellPunch = 1, 
/*TRUE*/
(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')),
/*FALSE*/
0
)) AS EarnedSellPunchHours,

#### Loose Hours ####
sum(
(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent') / COALESCE(ctd.TakeOffQuantity,0)) 
*
(COALESCE(ctd.TakeOffQuantity,0) - COALESCE(InstalledFAs,0))
) AS LooseHours

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT ctd.BidID,
		### Quantities Installed ###
		SUM(IF(sas.ActivityType IN (70),
		/* TRUE */ 
		COALESCE(cfa.FAPercentCompleted,0)  * ctd.TakeOffQuantity, 
		/* FALSE */
		cfa.FAQuantity
		)) AS InstalledFAs

		### SAS Joins ###
		FROM SubmissionActivityStatus sas
        
		JOIN PSA.REF_ActivityTypes at
			ON at.ID = sas.ActivityType
		JOIN CivilFA cfa
			ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
		LEFT JOIN CivilTrackerDetails ctd
			ON ctd.BidID = sas.fk_BidIDAssigned
				
		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY ctd.BidID) er
	ON er.BidID = ctd.BidID

 ##### Earned Sell HOURS #####  
 LEFT JOIN (SELECT cs.* , 1 AS InstalledSellPunch
			FROM CivilSellPackage cs
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)
			GROUP BY cs.SellTestPackageNumber) ers
	ON ers.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"
 
WHERE ctd.TestPackageNumber = :TestPackage) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewSteelActivities">
        <![CDATA[
        SELECT sas.fk_ActivityStatus, ats.Status, at.ActivityType, at.ID AS ActivityTypeID,
stl.ActivityID, std.SortGroup1, std.PieceMark, stl.FAQuantity, stl.FAPercentCompleted, stl.FARework, stl.FANotes, stl.FATimeInForm

FROM SubsDetails sd
JOIN SubmissionActivityStatus sas
	ON sas.SubmissionID = sd.SubmissionID
JOIN SteelFA stl
	ON stl.ActivityID = sas.ActivityID 
JOIN SteelTrackerDetails std
	ON std.BidID = stl.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

WHERE sas.SubmissionID = :SubmissionID
AND std.BidID = :BidID
AND sas.fk_ActivityStatus = :StatusID

ORDER BY sas.ActivityType
        ]]>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="StatusID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewSteelActivities__count">
        <![CDATA[
        select count(*) from (SELECT sas.fk_ActivityStatus, ats.Status, at.ActivityType, at.ID AS ActivityTypeID,
stl.ActivityID, std.SortGroup1, std.PieceMark, stl.FAQuantity, stl.FAPercentCompleted, stl.FARework, stl.FANotes, stl.FATimeInForm

FROM SubsDetails sd
JOIN SubmissionActivityStatus sas
	ON sas.SubmissionID = sd.SubmissionID
JOIN SteelFA stl
	ON stl.ActivityID = sas.ActivityID 
JOIN SteelTrackerDetails std
	ON std.BidID = stl.FABidID
    
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

WHERE sas.SubmissionID = :SubmissionID
AND std.BidID = :BidID
AND sas.fk_ActivityStatus = :StatusID

ORDER BY sas.ActivityType) wmTempTable
        ]]>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="StatusID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingCivilPunch">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'CivilSellPunchHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilPunch__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'CivilSellPunchHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelImpPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelImpHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelImpPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelImpHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSteelMisc">
        <![CDATA[
        UPDATE `SteelMisc` 
SET 
`MiscBidID`= :BidID,
`MiscPercentCompleted`= :PercentCompleted, 
`MiscRework`= :Rework, 
`MiscNotes`= :Notes 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeMiscQuantity">
        <![CDATA[
        UPDATE PipeMisc
SET
MiscQuantity = :Quantity
WHERE ActivityID = :ActivityID
        ]]>
    <query-param name="Quantity" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRPipe">
        <![CDATA[
        SELECT
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName, 

ptd.EngDrawingNumber AS DrawingNumber, 
ptd.SheetNumber AS SheetNumber, 
'N/A' AS Spool1, 
'N/A' AS Spool2, 
ptd.Size AS Size, 

CASE 
WHEN (sas.ActivityType = 38) THEN
	(pfa.FAQuantity * pfa.FAPercentCompleted)
WHEN (sas.ActivityType IN (51,52,53,90)) THEN
	CONCAT(pfa.FAPercentCompleted * 100,"%")
ELSE
	(pfa.FAQuantity)
END 
AS QuantityInstalled,
ats.Status AS CurrentStatus,
pfa.FANotes AS Notes,
pfa.FARework AS Rework,
DATE(sd.ReceivedTime)  AS DateSubmitted

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
    
WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)       
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,
 
pw.WeldDrawingNumber, 
pw.WeldSheetNumber, 
pw.WeldSpool1, 
pw.WeldSpool2, 
pw.WeldSize, 
pw.WeldPercentCompleted, 
ats.Status,
pw.WeldNotes,
pw.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID AND pw.ActivityType = 22
        
WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRPipe__count">
        <![CDATA[
        select count(*) from (SELECT
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName, 

ptd.EngDrawingNumber AS DrawingNumber, 
ptd.SheetNumber AS SheetNumber, 
'N/A' AS Spool1, 
'N/A' AS Spool2, 
ptd.Size AS Size, 

CASE 
WHEN (sas.ActivityType = 38) THEN
	(pfa.FAQuantity * pfa.FAPercentCompleted)
WHEN (sas.ActivityType IN (51,52,53,90)) THEN
	CONCAT(pfa.FAPercentCompleted * 100,"%")
ELSE
	(pfa.FAQuantity)
END 
AS QuantityInstalled,
ats.Status AS CurrentStatus,
pfa.FANotes AS Notes,
pfa.FARework AS Rework,
DATE(sd.ReceivedTime)  AS DateSubmitted

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
    
WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)       
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,
 
pw.WeldDrawingNumber, 
pw.WeldSheetNumber, 
pw.WeldSpool1, 
pw.WeldSpool2, 
pw.WeldSize, 
pw.WeldPercentCompleted, 
ats.Status,
pw.WeldNotes,
pw.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID AND pw.ActivityType = 22
        
WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryCivil">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID , at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
COALESCE(cfa.FAQuantity,0) AS Quantity,

(COALESCE(cfa.FAPercentCompleted,0)  * 100) AS PercentClaimed,

COALESCE(cfa.FANotes, '') AS Notes,
cfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryCivil__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID , at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
COALESCE(cfa.FAQuantity,0) AS Quantity,

(COALESCE(cfa.FAPercentCompleted,0)  * 100) AS PercentClaimed,

COALESCE(cfa.FANotes, '') AS Notes,
cfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateCivilFA">
        <![CDATA[
        UPDATE `CivilFA` 
SET 
`FABidID` = :BidID,
`FAQuantity`= :Quantity,
`FAPercentCompleted`= :Percent,
`FARework`= :Rework,
`FANotes`= :Notes 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageSteel">
        <![CDATA[
        SELECT DISTINCT std.Area, std.PieceMark, std.Description
FROM SteelTrackerDetails std
WHERE std.TestPackageNumber = :TestPackage
ORDER BY std.Area, std.PieceMark
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT std.Area, std.PieceMark, std.Description
FROM SteelTrackerDetails std
WHERE std.TestPackageNumber = :TestPackage
ORDER BY std.Area, std.PieceMark) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingSteelSellPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelSellHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelSellPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelSellHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteelExpanded">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS Quantity, 
1.00 AS Percent,
stlfa.FANotes AS Notes,
stlfa.FARework AS Rework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 61

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS ErectQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS ErectPercent,
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent



#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 62


WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS BoltoutQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS BoltoutPercent, 
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent



#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 63
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS ImpQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS ImpPercent, 
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 64
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS WeldQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS WeldPercent,
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 68
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS SellQuantity, 
1.00 AS Percent, 
stlfa.FANotes,
stlfa.FARework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


 
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType   
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 65
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION




SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(std.TakeOffQuantity,0) AS DemoQuantity, 
COALESCE(stld.DemoPercentCompleted,0) AS Percent, 
stld.DemoNotes,
0 AS Rework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
    ON std.BidID = stld.DemoBidID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(std.TakeOffQuantity,0) AS MiscQuantity, 
COALESCE(stlm.MiscPercentCompleted,0) AS Percent,
stlm.MiscNotes,
stlm.MiscRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
    ON std.BidID = stlm.MiscBidID
    
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteelExpanded__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS Quantity, 
1.00 AS Percent,
stlfa.FANotes AS Notes,
stlfa.FARework AS Rework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 61

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS ErectQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS ErectPercent,
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent



#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 62


WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS BoltoutQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS BoltoutPercent, 
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent



#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 63
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS ImpQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS ImpPercent, 
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 64
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS WeldQuantity,
COALESCE(stlfa.FAPercentCompleted,0) AS WeldPercent,
stlfa.FANotes,
stlfa.FARework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 68
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(stlfa.FAQuantity,0) AS SellQuantity, 
1.00 AS Percent, 
stlfa.FANotes,
stlfa.FARework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


 
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType   
JOIN SteelFA stlfa
	ON stlfa.ActivityID = sas.ActivityID AND stlfa.ActivityType = 65
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION




SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(std.TakeOffQuantity,0) AS DemoQuantity, 
COALESCE(stld.DemoPercentCompleted,0) AS Percent, 
stld.DemoNotes,
0 AS Rework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent


#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
    ON std.BidID = stld.DemoBidID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

COALESCE(std.TakeOffQuantity,0) AS MiscQuantity, 
COALESCE(stlm.MiscPercentCompleted,0) AS Percent,
stlm.MiscNotes,
stlm.MiscRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
JOIN SteelTrackerDetails std
    ON std.BidID = stlm.MiscBidID
    
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubmissionID
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSuperRecentActivites">
        <![CDATA[
        SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW() 
AND sas.ActivityType <> 0
AND sas.fk_ActivityStatus NOT IN (1,4,6,8,10) 
AND sas.fk_LastModifiedBy IN (:UserID , :SelectedSuper)
ORDER BY sas.TimeStamp DESC
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="SelectedSuper" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSuperRecentActivites__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW() 
AND sas.ActivityType <> 0
AND sas.fk_ActivityStatus NOT IN (1,4,6,8,10) 
AND sas.fk_LastModifiedBy IN (:UserID , :SelectedSuper)
ORDER BY sas.TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="SelectedSuper" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryEquipFA">
        <![CDATA[
        SELECT efa.* 
FROM EquipFA efa
WHERE ActivityID = :ActivityID

UNION

SELECT efar.fk_OrgActivityID, efar.FABidID, efar.FAQuantity, efar.FAPercentCompleted, efar.FARework, efar.FANotes, efar.ActivityType, efar.FATimeInForm, efar.Rev, efar.TimeStamp
FROM EquipFAREV efar
WHERE efar.fk_OrgActivityID = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryEquipFA__count">
        <![CDATA[
        select count(*) from (SELECT efa.* 
FROM EquipFA efa
WHERE ActivityID = :ActivityID

UNION

SELECT efar.fk_OrgActivityID, efar.FABidID, efar.FAQuantity, efar.FAPercentCompleted, efar.FARework, efar.FANotes, efar.ActivityType, efar.FATimeInForm, efar.Rev, efar.TimeStamp
FROM EquipFAREV efar
WHERE efar.fk_OrgActivityID = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeMisc">
        <![CDATA[
        UPDATE PipeMisc
SET
MiscDrawingNumber = :DrawingNumber,
MiscLineNumber = :LineNumber,
MiscSheetNumber = :SheetNumber,
MiscQuantity = :Quantity,
MiscRework = :Rework,
MiscNotes = :Notes
WHERE ActivityID = :ActivityID
        ]]>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Quantity" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRCivil">
        <![CDATA[
        SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description,

IF(sas.ActivityType = 70, CONCAT(cfa.FAPercentCompleted * 100,"%") , CONCAT(cfa.FAQuantity," yds") ) AS QuantityInstalled,

ats.Status AS CurrentStatus,
cfa.FARework AS Rework,
cfa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID = cfa.FABidID
        

WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day




UNION




SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

'N/A' AS EngDrawingNumber, 'N/A' AS SheetNumber, 'N/A' AS DetailDrawingNumber, 'N/A' AS DetailName, 
CONCAT('Test Package: ',csell.SellTestPackageNumber) AS Description,

1 AS QuantityInstalled,
ats.Status AS CurrentStatus,
0 AS Rework,
csell.SellNotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRCivil__count">
        <![CDATA[
        select count(*) from (SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description,

IF(sas.ActivityType = 70, CONCAT(cfa.FAPercentCompleted * 100,"%") , CONCAT(cfa.FAQuantity," yds") ) AS QuantityInstalled,

ats.Status AS CurrentStatus,
cfa.FARework AS Rework,
cfa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID = cfa.FABidID
        

WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day




UNION




SELECT 
sas.ActivityID, sas.ActivityType AS ActivityTypeID, at.ActivityType AS ActivityTypeName,  

'N/A' AS EngDrawingNumber, 'N/A' AS SheetNumber, 'N/A' AS DetailDrawingNumber, 'N/A' AS DetailName, 
CONCAT('Test Package: ',csell.SellTestPackageNumber) AS Description,

1 AS QuantityInstalled,
ats.Status AS CurrentStatus,
0 AS Rework,
csell.SellNotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
    
JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="UpdateSASStatusSteelList">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
SET 
sas.fk_ActivityStatus = :ActivityStatusID,
sas.fk_LastModifiedBy = :UserID
WHERE sas.ActivityID IN :ActivityIDs
        ]]>
    <query-param name="ActivityStatusID" type="java.lang.Integer"/>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="ActivityIDs" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeMechPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='PipeMechHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="CreateSASNote">
        <![CDATA[
        INSERT INTO SASNotes (`ActivityID`, `UserID` ,`Notes`) 
VALUES (:ActivityID, :CreatedBy ,:Note)
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    <query-param name="CreatedBy" type="java.lang.Integer"/>
    <query-param name="Note" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesCivil">
        <![CDATA[
        SELECT *
FROM CivilTrackerDetails
WHERE BidID = :BidID
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesCivil__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM CivilTrackerDetails
WHERE BidID = :BidID
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelDetailed">
        <![CDATA[
        SELECT  
std.SortGroup1, std.PieceMark,

COALESCE(stls.FAQuantity,0) AS ShakeQuantity,
COALESCE(stle.FAQuantity,0) AS ErectQuantity,
CONCAT(TRUNCATE(COALESCE(stle.FAPercentCompleted,0) * 100,0), '%') AS ErectPercent,
COALESCE(stlb.FAQuantity,0) AS BoltoutQuantity,
CONCAT(TRUNCATE(COALESCE(stlb.FAPercentCompleted,0) * 100,0), '%') AS BoltoutPercent,
COALESCE(stli.FAQuantity,0) AS ImpQuantity,
CONCAT(TRUNCATE(COALESCE(stli.FAPercentCompleted,0) * 100,0), '%') AS ImpPercent,
COALESCE(stlw.FAQuantity,0) AS WeldQuantity,
CONCAT(TRUNCATE(COALESCE(stlw.FAPercentCompleted,0) * 100,0), '%') AS WeldPercent,
COALESCE(stlsell.FAQuantity,0) AS SellQuantity,
COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0) AS DemoQuantity,
COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0) AS MiscQuantity,
DATE(sd.ReceivedTime) AS ReceivedTime,
(ats.Status) AS CurrentStatus

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON  stlm.ActivityID = sas.ActivityID

LEFT JOIN SteelTrackerDetails std
	ON std.BidID IN (stls.FABidID, stle.FABidID, stlb.FABidID, stli.FABidID, stlw.FABidID, stlsell.FABidID, stld.DemoBidID, stlm.MiscBidID)

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY sas.ActivityID, Date(sd.ReceivedTime)
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelDetailed__count">
        <![CDATA[
        select count(*) from (SELECT  
std.SortGroup1, std.PieceMark,

COALESCE(stls.FAQuantity,0) AS ShakeQuantity,
COALESCE(stle.FAQuantity,0) AS ErectQuantity,
CONCAT(TRUNCATE(COALESCE(stle.FAPercentCompleted,0) * 100,0), '%') AS ErectPercent,
COALESCE(stlb.FAQuantity,0) AS BoltoutQuantity,
CONCAT(TRUNCATE(COALESCE(stlb.FAPercentCompleted,0) * 100,0), '%') AS BoltoutPercent,
COALESCE(stli.FAQuantity,0) AS ImpQuantity,
CONCAT(TRUNCATE(COALESCE(stli.FAPercentCompleted,0) * 100,0), '%') AS ImpPercent,
COALESCE(stlw.FAQuantity,0) AS WeldQuantity,
CONCAT(TRUNCATE(COALESCE(stlw.FAPercentCompleted,0) * 100,0), '%') AS WeldPercent,
COALESCE(stlsell.FAQuantity,0) AS SellQuantity,
COALESCE(stld.DemoPercentCompleted * std.TakeOffQuantity,0) AS DemoQuantity,
COALESCE(stlm.MiscPercentCompleted * std.TakeOffQuantity,0) AS MiscQuantity,
DATE(sd.ReceivedTime) AS ReceivedTime,
(ats.Status) AS CurrentStatus

FROM SubmissionActivityStatus sas

JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus

LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON  stlm.ActivityID = sas.ActivityID

LEFT JOIN SteelTrackerDetails std
	ON std.BidID IN (stls.FABidID, stle.FABidID, stlb.FABidID, stli.FABidID, stlw.FABidID, stlsell.FABidID, stld.DemoBidID, stlm.MiscBidID)

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY sas.ActivityID, Date(sd.ReceivedTime)) wmTempTable
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewSteel">
        <![CDATA[
        SELECT fas.SubmissionID, fas.FABidID, fas.fk_ActivityStatus, fas.Status, fas.ReceivedTime, fas.NameFull, std.PieceMark, std.SortGroup1,
SUM(QuantityShake) AS QuantityShake,
SUM(QuantityErect) AS QuantityErect,
SUM(QuantityBoltOut) AS QuantityBoltOut,
SUM(QuantityImp) AS QuantityImp,
SUM(QuantitySell) AS QuantitySell,
SUM(QuantityWeld) AS QuantityWeld
FROM (
SELECT sd.SubmissionID, sas.fk_ActivityStatus, ats.Status, sd.ReceivedTime, 
CONCAT(u.FirstName, " ", u.LastName) AS NameFull, 
(COALESCE(stls.FABidID,COALESCE(stle.FABidID,COALESCE(stlb.FABidID, COALESCE(stli.FABidID, COALESCE(stlsell.FABidID, COALESCE(stlw.FABidID,'N/A'))))))) AS FABidID,

(COALESCE(stls.FAQuantity,0) * COALESCE(stls.FAPercentCompleted,0)) AS QuantityShake,
(COALESCE(stle.FAQuantity,0) * COALESCE(stle.FAPercentCompleted,0)) AS QuantityErect,
(COALESCE(stlb.FAQuantity,0) * COALESCE(stlb.FAPercentCompleted,0)) AS QuantityBoltOut,
(COALESCE(stli.FAQuantity,0) * COALESCE(stli.FAPercentCompleted,0)) AS QuantityImp,
(COALESCE(stlsell.FAQuantity,0) * COALESCE(stlsell.FAPercentCompleted,0)) AS QuantitySell,
(COALESCE(stlw.FAQuantity,0) * COALESCE(stlw.FAPercentCompleted,0)) AS QuantityWeld

FROM SubsDetails sd
JOIN SubmissionActivityStatus sas
	ON sas.SubmissionID = sd.SubmissionID
LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND stls.ActivityType = 61
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND stle.ActivityType = 62
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND stlb.ActivityType = 63
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND stli.ActivityType = 64
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.ActivityType = 65
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND stlw.ActivityType = 68

JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

WHERE sas.ActivityType IN (61,62,63,64,65,68)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)

ORDER BY sd.SubmissionID DESC ) fas
JOIN SteelTrackerDetails std
    ON std.BidID = fas.FABidID
GROUP BY fas.SubmissionID, std.PieceMark, fas.fk_ActivityStatus
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReviewSteel__count">
        <![CDATA[
        select count(*) from (SELECT fas.SubmissionID, fas.FABidID, fas.fk_ActivityStatus, fas.Status, fas.ReceivedTime, fas.NameFull, std.PieceMark, std.SortGroup1,
SUM(QuantityShake) AS QuantityShake,
SUM(QuantityErect) AS QuantityErect,
SUM(QuantityBoltOut) AS QuantityBoltOut,
SUM(QuantityImp) AS QuantityImp,
SUM(QuantitySell) AS QuantitySell,
SUM(QuantityWeld) AS QuantityWeld
FROM (
SELECT sd.SubmissionID, sas.fk_ActivityStatus, ats.Status, sd.ReceivedTime, 
CONCAT(u.FirstName, " ", u.LastName) AS NameFull, 
(COALESCE(stls.FABidID,COALESCE(stle.FABidID,COALESCE(stlb.FABidID, COALESCE(stli.FABidID, COALESCE(stlsell.FABidID, COALESCE(stlw.FABidID,'N/A'))))))) AS FABidID,

(COALESCE(stls.FAQuantity,0) * COALESCE(stls.FAPercentCompleted,0)) AS QuantityShake,
(COALESCE(stle.FAQuantity,0) * COALESCE(stle.FAPercentCompleted,0)) AS QuantityErect,
(COALESCE(stlb.FAQuantity,0) * COALESCE(stlb.FAPercentCompleted,0)) AS QuantityBoltOut,
(COALESCE(stli.FAQuantity,0) * COALESCE(stli.FAPercentCompleted,0)) AS QuantityImp,
(COALESCE(stlsell.FAQuantity,0) * COALESCE(stlsell.FAPercentCompleted,0)) AS QuantitySell,
(COALESCE(stlw.FAQuantity,0) * COALESCE(stlw.FAPercentCompleted,0)) AS QuantityWeld

FROM SubsDetails sd
JOIN SubmissionActivityStatus sas
	ON sas.SubmissionID = sd.SubmissionID
LEFT JOIN SteelFA stls
	ON stls.ActivityID = sas.ActivityID AND stls.ActivityType = 61
LEFT JOIN SteelFA stle
	ON stle.ActivityID = sas.ActivityID AND stle.ActivityType = 62
LEFT JOIN SteelFA stlb
	ON stlb.ActivityID = sas.ActivityID AND stlb.ActivityType = 63
LEFT JOIN SteelFA stli
	ON stli.ActivityID = sas.ActivityID AND stli.ActivityType = 64
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.ActivityType = 65
LEFT JOIN SteelFA stlw
	ON stlw.ActivityID = sas.ActivityID AND stlw.ActivityType = 68

JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

WHERE sas.ActivityType IN (61,62,63,64,65,68)
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)

ORDER BY sd.SubmissionID DESC ) fas
JOIN SteelTrackerDetails std
    ON std.BidID = fas.FABidID
GROUP BY fas.SubmissionID, std.PieceMark, fas.fk_ActivityStatus) wmTempTable
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeFA">
        <![CDATA[
        UPDATE PipeFA
SET 
FABidID = :BidID,
FAQuantity = :Quantity,
FAPercentCompleted = :Percent,
FARework = :Rework,
FANotes = :Notes
WHERE ActivityID= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesSteel">
        <![CDATA[
        SELECT std.BidID,
### Quantities ###
(std.TakeOffQuantity) AS SteelQuantity,
(std.WeldCount) AS WeldQuantity,  

### Hours ###
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent'),0)) AS ShakeHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent'),0)) AS ErectHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent'),0)) AS BoltoutHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent'),0)) AS ImpHours,
(COALESCE(std.EstimatedHoursWeld,0)) AS WeldHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'),0)) AS SellHours,
(COALESCE(IF(std.ActivityType = 'D', std.EstimatedHoursSteel, 0),0)) AS DemoHours,
(COALESCE(IF(std.ActivityType = 'MISC', std.EstimatedHoursSteel, 0),0)) AS MiscHours,

### Installed Quantities ###
sum(COALESCE(er.InstalledShake,0)) AS InstalledShake,
sum(COALESCE(er.InstalledErect,0)) AS InstalledErect,
sum(COALESCE(er.InstalledBoltout,0)) AS InstalledBoltout,
sum(COALESCE(er.InstalledImp,0)) AS InstalledImp,
sum(COALESCE(er.InstalledWeld,0)) AS InstalledWeld,
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,
sum(COALESCE(er.InstalledDemo * std.TakeOffQuantity,0)) AS InstalledDemo,
sum(COALESCE(er.InstalledMisc * std.TakeOffQuantity,0)) AS InstalledMisc

FROM SteelTrackerDetails std

LEFT JOIN(SELECT sas.fk_BidIDAssigned AS BidID,
		COALESCE(stls.FAQuantity,0) AS InstalledShake,
		COALESCE(stle.FAQuantity * stle.FAPercentCompleted,0) AS InstalledErect,
		COALESCE(stlb.FAQuantity * stlb.FAPercentCompleted,0) AS InstalledBoltout,
		COALESCE(stli.FAQuantity * stli.FAPercentCompleted,0) AS InstalledImp,
		COALESCE(stlw.FAQuantity * stlw.FAPercentCompleted,0) AS InstalledWeld,
		COALESCE(stlsell.FAQuantity * stlsell.FAPercentCompleted,0) AS InstalledSell,
		COALESCE(stld.DemoPercentCompleted,0) AS InstalledDemo,
		COALESCE(stlm.MiscPercentCompleted,0) AS InstalledMisc

		FROM SubmissionActivityStatus sas
        
    	LEFT JOIN SteelFA stls
    		ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0
    	LEFT JOIN SteelFA stle
    		ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0
    	LEFT JOIN SteelFA stlb
    		ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0
    	LEFT JOIN SteelFA stli
    		ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
    	LEFT JOIN SteelFA stlw
    		ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0
    	LEFT JOIN SteelFA stlsell
    		ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65 AND stlsell.FARework = 0
    	LEFT JOIN SteelDemo stld
    		ON stld.ActivityID = sas.ActivityID
    	LEFT JOIN SteelMisc stlm
    		ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
		
        WHERE sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96)
        AND sas.fk_ActivityStatus IN (5,12)
		) er
	ON er.BidID = std.BidID
WHERE std.BidID = :BidID
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.BidID,
### Quantities ###
(std.TakeOffQuantity) AS SteelQuantity,
(std.WeldCount) AS WeldQuantity,  

### Hours ###
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent'),0)) AS ShakeHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent'),0)) AS ErectHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent'),0)) AS BoltoutHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent'),0)) AS ImpHours,
(COALESCE(std.EstimatedHoursWeld,0)) AS WeldHours,
(COALESCE(std.EstimatedHoursSteel*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'),0)) AS SellHours,
(COALESCE(IF(std.ActivityType = 'D', std.EstimatedHoursSteel, 0),0)) AS DemoHours,
(COALESCE(IF(std.ActivityType = 'MISC', std.EstimatedHoursSteel, 0),0)) AS MiscHours,

### Installed Quantities ###
sum(COALESCE(er.InstalledShake,0)) AS InstalledShake,
sum(COALESCE(er.InstalledErect,0)) AS InstalledErect,
sum(COALESCE(er.InstalledBoltout,0)) AS InstalledBoltout,
sum(COALESCE(er.InstalledImp,0)) AS InstalledImp,
sum(COALESCE(er.InstalledWeld,0)) AS InstalledWeld,
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,
sum(COALESCE(er.InstalledDemo * std.TakeOffQuantity,0)) AS InstalledDemo,
sum(COALESCE(er.InstalledMisc * std.TakeOffQuantity,0)) AS InstalledMisc

FROM SteelTrackerDetails std

LEFT JOIN(SELECT sas.fk_BidIDAssigned AS BidID,
		COALESCE(stls.FAQuantity,0) AS InstalledShake,
		COALESCE(stle.FAQuantity * stle.FAPercentCompleted,0) AS InstalledErect,
		COALESCE(stlb.FAQuantity * stlb.FAPercentCompleted,0) AS InstalledBoltout,
		COALESCE(stli.FAQuantity * stli.FAPercentCompleted,0) AS InstalledImp,
		COALESCE(stlw.FAQuantity * stlw.FAPercentCompleted,0) AS InstalledWeld,
		COALESCE(stlsell.FAQuantity * stlsell.FAPercentCompleted,0) AS InstalledSell,
		COALESCE(stld.DemoPercentCompleted,0) AS InstalledDemo,
		COALESCE(stlm.MiscPercentCompleted,0) AS InstalledMisc

		FROM SubmissionActivityStatus sas
        
    	LEFT JOIN SteelFA stls
    		ON stls.ActivityID = sas.ActivityID AND sas.ActivityType = 61 AND stls.FARework = 0
    	LEFT JOIN SteelFA stle
    		ON stle.ActivityID = sas.ActivityID AND sas.ActivityType = 62 AND stle.FARework = 0
    	LEFT JOIN SteelFA stlb
    		ON stlb.ActivityID = sas.ActivityID AND sas.ActivityType = 63 AND stlb.FARework = 0
    	LEFT JOIN SteelFA stli
    		ON stli.ActivityID = sas.ActivityID AND sas.ActivityType = 64 AND stli.FARework = 0
    	LEFT JOIN SteelFA stlw
    		ON stlw.ActivityID = sas.ActivityID AND sas.ActivityType = 68 AND stlw.FARework = 0
    	LEFT JOIN SteelFA stlsell
    		ON stlsell.ActivityID = sas.ActivityID AND sas.ActivityType = 65 AND stlsell.FARework = 0
    	LEFT JOIN SteelDemo stld
    		ON stld.ActivityID = sas.ActivityID
    	LEFT JOIN SteelMisc stlm
    		ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
		
        WHERE sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96)
        AND sas.fk_ActivityStatus IN (5,12)
		) er
	ON er.BidID = std.BidID
WHERE std.BidID = :BidID
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSASStatusSteelSubBidID">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
JOIN SteelFA stl
	ON stl.ActivityID = sas.ActivityID

SET 
fk_ActivityStatus = :NewStatusID,
sas.fk_LastModifiedBy = :UserID

WHERE sas.SubmissionID = :SubmissionID
AND stl.FABidID = :BidID
AND sas.fk_ActivityStatus = :CurrentStatusID
        ]]>
    <query-param name="NewStatusID" type="java.lang.Integer"/>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="CurrentStatusID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeTestingPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='PipeTestingHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetSettingPipeTestingPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'PipeTestingHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeTestingPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'PipeTestingHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidWorkHistoryEquip">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
sum(COALESCE(efa.FAQuantity,0)) AS Quantity,

(COALESCE(efa.FAPercentCompleted,0) * 100) AS PercentClaimed,

COALESCE(efa.FANotes, '') AS Notes,
efa.FARework AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID

LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryEquip__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
sum(COALESCE(efa.FAQuantity,0)) AS Quantity,

(COALESCE(efa.FAPercentCompleted,0) * 100) AS PercentClaimed,

COALESCE(efa.FANotes, '') AS Notes,
efa.FARework AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID

LEFT JOIN EquipTrackerDetails etd
	ON etd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetNotesByActivityID">
        <![CDATA[
        SELECT sasn.Notes, sasn.TimeStamp, u.Email
FROM SASNotes sasn
JOIN PSA.tblUserPSA u
	ON u.ID = sasn.UserID
WHERE sasn.ActivityID IN :ActivityID
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetNotesByActivityID__count">
        <![CDATA[
        select count(*) from (SELECT sasn.Notes, sasn.TimeStamp, u.Email
FROM SASNotes sasn
JOIN PSA.tblUserPSA u
	ON u.ID = sasn.UserID
WHERE sasn.ActivityID IN :ActivityID) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateCivilSellPackage">
        <![CDATA[
        UPDATE `CivilSellPackage` 
SET 
`SellTestPackageNumber`= :TestPackageNumber, 
`SellNotes`= :Notes 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="TestPackageNumber" type="java.lang.String"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingPipeMechPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'PipeMechHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeMechPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'PipeMechHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetPSRecentActivities">
        <![CDATA[
        SELECT sas.ActivityID, at.ID AS ActivityTypeID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW()
AND sas.fk_ActivityStatus IN (5,6,13)
AND sas.fk_LastModifiedBy = :UserID
ORDER BY sas.TimeStamp DESC
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetPSRecentActivities__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, at.ID AS ActivityTypeID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW()
AND sas.fk_ActivityStatus IN (5,6,13)
AND sas.fk_LastModifiedBy = :UserID
ORDER BY sas.TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelFAQuantity">
        <![CDATA[
        UPDATE `SteelFA` 
SET 
`FAQuantity`= :Quantity,
`FAPercentCompleted`= :PercentCompleted
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesEquip">
        <![CDATA[
        SELECT *
FROM EquipTrackerDetails
WHERE BidID = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesEquip__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM EquipTrackerDetails
WHERE BidID = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSASBidID">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
SET 
sas.fk_ActivityStatus = :ActivityStatusID,
sas.RejectID = :RejectID,
sas.fk_LastModifiedBy = :UserID,
sas.fk_BidIDAssigned = :BidID 
WHERE sas.ActivityID = :ActivityID
        ]]>
    <query-param name="ActivityStatusID" type="java.lang.Integer"/>
    <query-param name="RejectID" type="java.lang.Integer"/>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeRFTPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='PipeRFTHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetSettingSteelBoltoutPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelBoltoutHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelBoltoutPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelBoltoutHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilWork">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'CivilWorkHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilWork__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'CivilWorkHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdatePipeWeldQuantity">
        <![CDATA[
        UPDATE PipeWeld
SET
WeldPercentCompleted = :PercentCompleted
WHERE ActivityID = :ActivityID
        ]]>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetDrawingsByTestPackagePipe">
        <![CDATA[
        SELECT DISTINCT ptd.EngDrawingNumber, ptd.SheetNumber, ptd.LineNumber
FROM PipeTrackerDetails ptd
WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetDrawingsByTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT ptd.EngDrawingNumber, ptd.SheetNumber, ptd.LineNumber
FROM PipeTrackerDetails ptd
WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelMisc">
        <![CDATA[
        SELECT std.Description, std.PieceMark, stlm.* 
FROM SteelMisc stlm
JOIN SteelTrackerDetails std
    ON std.BidID = stlm.MiscBidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stlmr.fk_OrgActivityId, stlmr.MiscBidID, stlmr.MiscPercentCompleted, stlmr.MiscRework, stlmr.MiscNotes, stlmr.ActivityType, stlmr.MiscTimeInForm, stlmr.Rev, stlmr.TimeStamp
FROM SteelMiscREV stlmr
JOIN SteelTrackerDetails std
    ON std.BidID = stlmr.MiscBidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelMisc__count">
        <![CDATA[
        select count(*) from (SELECT std.Description, std.PieceMark, stlm.* 
FROM SteelMisc stlm
JOIN SteelTrackerDetails std
    ON std.BidID = stlm.MiscBidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stlmr.fk_OrgActivityId, stlmr.MiscBidID, stlmr.MiscPercentCompleted, stlmr.MiscRework, stlmr.MiscNotes, stlmr.ActivityType, stlmr.MiscTimeInForm, stlmr.Rev, stlmr.TimeStamp
FROM SteelMiscREV stlmr
JOIN SteelTrackerDetails std
    ON std.BidID = stlmr.MiscBidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingPipeRFTPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'PipeRFTHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeRFTPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'PipeRFTHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeFA">
        <![CDATA[
        SELECT pfa.* 
FROM PipeFA pfa
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pfar.fk_OrgActivityId,
pfar.FABidID, pfar.FAQuantity, pfar.FAPercentCompleted, pfar.FARework, pfar.FANotes,
pfar.ActivityType, pfar.FATimeInForm, pfar.Rev, pfar.TimeStamp
FROM PipeFAREV pfar
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeFA__count">
        <![CDATA[
        select count(*) from (SELECT pfa.* 
FROM PipeFA pfa
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pfar.fk_OrgActivityId,
pfar.FABidID, pfar.FAQuantity, pfar.FAPercentCompleted, pfar.FARework, pfar.FANotes,
pfar.ActivityType, pfar.FATimeInForm, pfar.Rev, pfar.TimeStamp
FROM PipeFAREV pfar
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilPunchSell">
        <![CDATA[
        SELECT csell.* 
FROM CivilSellPackage csell
WHERE ActivityID = :ActivityID

UNION

SELECT csellr.fk_OrgActivityId, csellr.SellTestPackageNumber, csellr.SellNotes, csellr.ActivityType,  csellr.SellTimeInForm, csellr.Rev, csellr.TimeStamp
FROM CivilSellPackageREV csellr
WHERE csellr.fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilPunchSell__count">
        <![CDATA[
        select count(*) from (SELECT csell.* 
FROM CivilSellPackage csell
WHERE ActivityID = :ActivityID

UNION

SELECT csellr.fk_OrgActivityId, csellr.SellTestPackageNumber, csellr.SellNotes, csellr.ActivityType,  csellr.SellTimeInForm, csellr.Rev, csellr.TimeStamp
FROM CivilSellPackageREV csellr
WHERE csellr.fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageCivil">
        <![CDATA[
        SELECT ctd.UID, ctd.BidID, ctd.ProjectServicesRep, ctd.EWONumber, ctd.Scope, ctd.Phase, ctd.Stage, ctd.TestPackageNumber, ctd.WorkPackage, ctd.CostCode, ctd.P6ID, ctd.P6Description, ctd.AssignedContractor, 
ctd.Area, ctd.Location, ctd.Structure, ctd.CU, ctd.Elevation, 
ctd.SortGroup1, ctd.SortGroup2, ctd.SortGroup3, ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DrawingRev, ctd.DetailDrawingNumber, ctd.DetailRev, ctd.DetailName, ctd.Description, ctd.ActivityType, 
ctd.ActivitySubType, ctd.System, ctd.Service, ctd.TakeOffQuantity, ctd.QuantityUnit, ctd.EstimatedHours, 
ctd.WBS1, ctd.WBS2, ctd.WBS3, ctd.WBS4, ctd.WBS5, ctd.WBS6, ctd.WBS7, ctd.WBS8, ctd.WBS9, ctd.WBS10, 

count(ctd.BidID) AS SellPunchCount,
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,
sum(COALESCE(ercs.InstalledSellPunch,0)) AS SellPunchInstalled,

sum(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent') * COALESCE(ercs.InstalledSellPunch,0)) AS EarnedSellPunchHours,

ctd.Rev, ctd.TimeStamp

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
			FROM CivilSellPackage cs 
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)) ercs
	ON ercs.SellTestPackageNumber = ctd.TestPackageNumber 
    
WHERE ctd.TestPackageNumber = :TestPackage
AND ctd.ActivityType != "Demo"
GROUP BY BidID
ORDER By ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.UID, ctd.BidID, ctd.ProjectServicesRep, ctd.EWONumber, ctd.Scope, ctd.Phase, ctd.Stage, ctd.TestPackageNumber, ctd.WorkPackage, ctd.CostCode, ctd.P6ID, ctd.P6Description, ctd.AssignedContractor, 
ctd.Area, ctd.Location, ctd.Structure, ctd.CU, ctd.Elevation, 
ctd.SortGroup1, ctd.SortGroup2, ctd.SortGroup3, ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DrawingRev, ctd.DetailDrawingNumber, ctd.DetailRev, ctd.DetailName, ctd.Description, ctd.ActivityType, 
ctd.ActivitySubType, ctd.System, ctd.Service, ctd.TakeOffQuantity, ctd.QuantityUnit, ctd.EstimatedHours, 
ctd.WBS1, ctd.WBS2, ctd.WBS3, ctd.WBS4, ctd.WBS5, ctd.WBS6, ctd.WBS7, ctd.WBS8, ctd.WBS9, ctd.WBS10, 

count(ctd.BidID) AS SellPunchCount,
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,
sum(COALESCE(ercs.InstalledSellPunch,0)) AS SellPunchInstalled,

sum(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent') * COALESCE(ercs.InstalledSellPunch,0)) AS EarnedSellPunchHours,

ctd.Rev, ctd.TimeStamp

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
			FROM CivilSellPackage cs 
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)) ercs
	ON ercs.SellTestPackageNumber = ctd.TestPackageNumber 
    
WHERE ctd.TestPackageNumber = :TestPackage
AND ctd.ActivityType != "Demo"
GROUP BY BidID
ORDER By ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingSteelShakePercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelShakeHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelShakePercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelShakeHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageSteel">
        <![CDATA[
        SELECT std.*,

### Installed Quantities ###
sum(COALESCE(stlsell.FAQuantity,0)) AS InstalledSell,

### Remaining Quantities ###
(COALESCE(std.TakeOffQuantity,0) - sum(COALESCE(stlsell.FAQuantity,0))) AS RemainingSell

FROM SteelTrackerDetails std

LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
    
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0

WHERE TestPackageNumber = :TestPackage
  
GROUP BY BidID
ORDER BY std.SortGroup1, std.PieceMark
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.*,

### Installed Quantities ###
sum(COALESCE(stlsell.FAQuantity,0)) AS InstalledSell,

### Remaining Quantities ###
(COALESCE(std.TakeOffQuantity,0) - sum(COALESCE(stlsell.FAQuantity,0))) AS RemainingSell

FROM SteelTrackerDetails std

LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
    
LEFT JOIN SteelFA stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0

WHERE TestPackageNumber = :TestPackage
  
GROUP BY BidID
ORDER BY std.SortGroup1, std.PieceMark) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesPipe">
        <![CDATA[
        SELECT ptd.TakeOffQuantity, ptd.QuantityUnit,

(ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) AS EstimatedMechHours,

IF((SELECT Value2 FROM SETTINGS WHERE Label = 'QuantOverClaimPipe') = 0, 
##True##
GREATEST((ptd.TakeOffQuantity - COALESCE(er.InstalledQuantity,0)),0), 
##False##
(ptd.TakeOffQuantity - COALESCE(er.InstalledQuantity,0))
) AS RemainingQuantity,

GREATEST((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) - sum(COALESCE(er.EarnedHours,0)),0) AS RemainingHours,

LEAST((COALESCE(er.InstalledQuantity,0) / ptd.TakeOffQuantity) ,1.00) AS PercentComplete 

FROM PipeTrackerDetails ptd
LEFT JOIN (SELECT BidID, 

	SUM(COALESCE(er0.InstalledQuantity,0)) AS InstalledQuantity,
	SUM(COALESCE(er0.EarnedHours,0)) AS EarnedHours

	FROM(SELECT ptd.BidID,	
		###Earned Hours Calculations ###
		(
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pe.FAQuantity,0)+COALESCE(pme.MiscQuantity,0))
        ,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcb.FAQuantity,0)+COALESCE(pmcb.MiscQuantity,0))
		, 0) 
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pw.WeldPercentCompleted,0)+COALESCE(pmw.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcs.FAQuantity,0)+COALESCE(pmcs.MiscQuantity,0))
		, 0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pco.FAQuantity,0)+COALESCE(pmco.MiscQuantity,0))
		, 0)
		+
		COALESCE((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcut.FAQuantity,0)+COALESCE(pmcut.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pt.FAQuantity,0)+COALESCE(pmt.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity)*(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0)+COALESCE(pmsu.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours/ptd.TakeOffQuantity) * (COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0)+COALESCE(pmd.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pm.FAQuantity * ptd.TakeOffQuantity,0)+COALESCE(pmm.MiscQuantity,0))
		,0)
		) AS EarnedHours,
				
		###Installed Quantities Calculations ###
		(
		(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0))
		+
		(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0))
		+
		(COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0))
		+
		(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) 
		+
		(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0))
		+
		(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) 
		+
		(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) 
		+
		(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0))
		+
		(COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmd.MiscQuantity,0))
		+
		(COALESCE(pm.FAPercentCompleted * ptd.TakeOffQuantity,0))
		) AS InstalledQuantity

			FROM SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
				
			LEFT JOIN PipeFA pe
				ON pe.ActivityID = sas.ActivityID AND sas.ActivityType = 11 AND pe.FARework = 0

			LEFT JOIN PipeFA pcb
				ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		 
			LEFT JOIN PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND  pw.WeldRework = 0

			LEFT JOIN PipeFA pcs
				ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0
		 
			LEFT JOIN PipeFA pco
				ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0
		 
			LEFT JOIN PipeFA pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0
				
			LEFT JOIN PipeFA pt
				ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0
				
			LEFT JOIN PipeFA psu
				ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0
				
			LEFT JOIN PipeFA pd
				ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53)
			
			LEFT JOIN PipeFA pm
				ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0


			LEFT JOIN PipeTrackerDetails ptd
				ON ptd.BidID = sas.fk_BidIDAssigned


		/* #### Begining of Misc activities assigned joins #### */	
			LEFT JOIN PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
			
			LEFT JOIN PipeMisc pmcb
				ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
			
			LEFT JOIN PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
			
			LEFT JOIN PipeMisc pmcs
				ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
			
			LEFT JOIN PipeMisc pmco
				ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
				
			LEFT JOIN PipeMisc pmcut
				ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0

			LEFT JOIN PipeMisc pmt
				ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
			   
			LEFT JOIN PipeMisc pmsu
				ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "S" AND pmsu.MiscRework = 0

			LEFT JOIN PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
				
			LEFT JOIN PipeMisc pmm
				ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0


		WHERE sas.fk_BidIDAssigned = :BidID
		AND fk_ActivityStatus IN (5,12)
		AND sas.ActivityType IN (11,21,22,23,24,25,31,32,33,38,39,51,52,53,90,91)
		GROUP BY sas.ActivityID)er0
	GROUP BY BidID)er
ON er.BidID = ptd.BidID

WHERE ptd.BidID = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesPipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.TakeOffQuantity, ptd.QuantityUnit,

(ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) AS EstimatedMechHours,

IF((SELECT Value2 FROM SETTINGS WHERE Label = 'QuantOverClaimPipe') = 0, 
##True##
GREATEST((ptd.TakeOffQuantity - COALESCE(er.InstalledQuantity,0)),0), 
##False##
(ptd.TakeOffQuantity - COALESCE(er.InstalledQuantity,0))
) AS RemainingQuantity,

GREATEST((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')) - sum(COALESCE(er.EarnedHours,0)),0) AS RemainingHours,

LEAST((COALESCE(er.InstalledQuantity,0) / ptd.TakeOffQuantity) ,1.00) AS PercentComplete 

FROM PipeTrackerDetails ptd
LEFT JOIN (SELECT BidID, 

	SUM(COALESCE(er0.InstalledQuantity,0)) AS InstalledQuantity,
	SUM(COALESCE(er0.EarnedHours,0)) AS EarnedHours

	FROM(SELECT ptd.BidID,	
		###Earned Hours Calculations ###
		(
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pe.FAQuantity,0)+COALESCE(pme.MiscQuantity,0))
        ,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcb.FAQuantity,0)+COALESCE(pmcb.MiscQuantity,0))
		, 0) 
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pw.WeldPercentCompleted,0)+COALESCE(pmw.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcs.FAQuantity,0)+COALESCE(pmcs.MiscQuantity,0))
		, 0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pco.FAQuantity,0)+COALESCE(pmco.MiscQuantity,0))
		, 0)
		+
		COALESCE((ptd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pcut.FAQuantity,0)+COALESCE(pmcut.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pt.FAQuantity,0)+COALESCE(pmt.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity)*(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0)+COALESCE(pmsu.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours/ptd.TakeOffQuantity) * (COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0)+COALESCE(pmd.MiscQuantity,0))
		,0)
		+
		COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeMechHoursPercent')/ptd.TakeOffQuantity) * (COALESCE(pm.FAQuantity * ptd.TakeOffQuantity,0)+COALESCE(pmm.MiscQuantity,0))
		,0)
		) AS EarnedHours,
				
		###Installed Quantities Calculations ###
		(
		(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0))
		+
		(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0))
		+
		(COALESCE(pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0))
		+
		(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) 
		+
		(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0))
		+
		(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) 
		+
		(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) 
		+
		(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0))
		+
		(COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmd.MiscQuantity,0))
		+
		(COALESCE(pm.FAPercentCompleted * ptd.TakeOffQuantity,0))
		) AS InstalledQuantity

			FROM SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
				
			LEFT JOIN PipeFA pe
				ON pe.ActivityID = sas.ActivityID AND sas.ActivityType = 11 AND pe.FARework = 0

			LEFT JOIN PipeFA pcb
				ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		 
			LEFT JOIN PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND  pw.WeldRework = 0

			LEFT JOIN PipeFA pcs
				ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0
		 
			LEFT JOIN PipeFA pco
				ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0
		 
			LEFT JOIN PipeFA pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0
				
			LEFT JOIN PipeFA pt
				ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0
				
			LEFT JOIN PipeFA psu
				ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0
				
			LEFT JOIN PipeFA pd
				ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53)
			
			LEFT JOIN PipeFA pm
				ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0


			LEFT JOIN PipeTrackerDetails ptd
				ON ptd.BidID = sas.fk_BidIDAssigned


		/* #### Begining of Misc activities assigned joins #### */	
			LEFT JOIN PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
			
			LEFT JOIN PipeMisc pmcb
				ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
			
			LEFT JOIN PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
			
			LEFT JOIN PipeMisc pmcs
				ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
			
			LEFT JOIN PipeMisc pmco
				ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
				
			LEFT JOIN PipeMisc pmcut
				ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0

			LEFT JOIN PipeMisc pmt
				ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
			   
			LEFT JOIN PipeMisc pmsu
				ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "S" AND pmsu.MiscRework = 0

			LEFT JOIN PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
				
			LEFT JOIN PipeMisc pmm
				ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0


		WHERE sas.fk_BidIDAssigned = :BidID
		AND fk_ActivityStatus IN (5,12)
		AND sas.ActivityType IN (11,21,22,23,24,25,31,32,33,38,39,51,52,53,90,91)
		GROUP BY sas.ActivityID)er0
	GROUP BY BidID)er
ON er.BidID = ptd.BidID

WHERE ptd.BidID = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingSteelErectPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelErectHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelErectPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelErectHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackagePipe">
        <![CDATA[
        SELECT ptd.UID, ptd.BidID, ptd.ProjectServicesRep, ptd.Scope, ptd.Phase, ptd.Stage, ptd.TestPackageNumber, ptd.WorkPackage, ptd.CostCode, ptd.P6ID, ptd.P6Description, ptd.AssignedContractor, 
ptd.Area, ptd.Location, ptd.Structure, ptd.CU, ptd.Elevation, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, ptd.DrawingRev, ptd.Description, ptd.ActivityType, ptd.ActivitySubType, ptd.ClientMaterialSpec, ptd.PerformanceMaterialSpec, ptd.Size, ptd.System, ptd.Service, ptd.ComponentNumber, ptd.TakeOffQuantity, ptd.QuantityUnit, ptd.EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

ert.RFTInstalled,
ert.HydroInstalled,
ert.CTOInstalled,

IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent')),0) AS RFTHours,
IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent')),0) AS HydroHours,
IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent')),0) AS CTOHours,

ert.EarnedRFTHours AS EarnedRFTHours,
ert.EarnedHydroHours AS EarnedHydroHours,
ert.EarnedCTOHours AS EarnedCTOHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT ptd.UID,
COALESCE(pteR.InstalledRFT, 0) AS RFTInstalled,
COALESCE(pteH.InstalledHydro, 0) AS HydroInstalled,
COALESCE(pteC.InstalledCTO, 0) AS CTOInstalled,

COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * pteR.InstalledRFT, 0) AS EarnedRFTHours,
COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent') * pteH.InstalledHydro, 0) AS EarnedHydroHours,
COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent') * pteC.InstalledCTO, 0) AS EarnedCTOHours


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledRFT
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON pte.ActivityID = sas.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledCTO
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 

WHERE ptd.TestPackageNumber = :TestPackage
AND ptd.ActivityType != "D"
) ert
	ON ert.UID = ptd.UID
    
WHERE ptd.TestPackageNumber = :TestPackage
AND ptd.ActivityType != "D"
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.UID, ptd.BidID, ptd.ProjectServicesRep, ptd.Scope, ptd.Phase, ptd.Stage, ptd.TestPackageNumber, ptd.WorkPackage, ptd.CostCode, ptd.P6ID, ptd.P6Description, ptd.AssignedContractor, 
ptd.Area, ptd.Location, ptd.Structure, ptd.CU, ptd.Elevation, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, ptd.DrawingRev, ptd.Description, ptd.ActivityType, ptd.ActivitySubType, ptd.ClientMaterialSpec, ptd.PerformanceMaterialSpec, ptd.Size, ptd.System, ptd.Service, ptd.ComponentNumber, ptd.TakeOffQuantity, ptd.QuantityUnit, ptd.EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

ert.RFTInstalled,
ert.HydroInstalled,
ert.CTOInstalled,

IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeRFTHoursPercent')),0) AS RFTHours,
IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent')),0) AS HydroHours,
IF(ptd.ActivityType != 'D', (ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent')),0) AS CTOHours,

ert.EarnedRFTHours AS EarnedRFTHours,
ert.EarnedHydroHours AS EarnedHydroHours,
ert.EarnedCTOHours AS EarnedCTOHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT ptd.UID,
COALESCE(pteR.InstalledRFT, 0) AS RFTInstalled,
COALESCE(pteH.InstalledHydro, 0) AS HydroInstalled,
COALESCE(pteC.InstalledCTO, 0) AS CTOInstalled,

COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * pteR.InstalledRFT, 0) AS EarnedRFTHours,
COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeHydroHoursPercent') * pteH.InstalledHydro, 0) AS EarnedHydroHours,
COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeTestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'PipeCTOHoursPercent') * pteC.InstalledCTO, 0) AS EarnedCTOHours


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledRFT
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON pte.ActivityID = sas.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledCTO
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 

WHERE ptd.TestPackageNumber = :TestPackage
AND ptd.ActivityType != "D"
) ert
	ON ert.UID = ptd.UID
    
WHERE ptd.TestPackageNumber = :TestPackage
AND ptd.ActivityType != "D"
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdatePipeFAQuantity">
        <![CDATA[
        UPDATE PipeFA
SET 
FAQuantity = :Quantity,
FAPercentCompleted = :Percent
WHERE ActivityID= :ActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelMiscQuantity">
        <![CDATA[
        UPDATE `SteelMisc` 
SET 
`MiscPercentCompleted`= :PercentCompleted
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryPipe">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
CASE
	WHEN sas.ActivityType IN (11,21,23,24,25,31,32,33,39)
		THEN
        CONCAT(pfa.FAQuantity, ptd.QuantityUnit)
    WHEN sas.ActivityType IN (51,52,53,90)
		THEN
        CONCAT(TRUNCATE(pfa.FAPercentCompleted * 100,0), '%')
	WHEN sas.ActivityType IN (38)
		THEN
        CONCAT((pfa.FAQuantity * pfa.FAPercentCompleted), ptd.QuantityUnit)
END AS Quantity,
(COALESCE(pfa.FAPercentCompleted,0)  * 100) AS PercentClaimed,

pfa.FANotes AS Notes,
pfa.FARework AS Rework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####     
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
(pm.MiscQuantity) AS Quantity,
1 AS PercentClaimed,

pm.MiscNotes AS Notes,
pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####     
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION 




SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
COALESCE(pw.WeldPercentCompleted,0) AS Quantity,
(COALESCE(pw.WeldPercentCompleted,0)  * 100) AS PercentClaimed,

pw.WeldNotes AS Notes,
pw.WeldRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins ##### 
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION 


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 41
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber AND ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID




UNION ALL


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 42
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber & ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 43
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber & ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryPipe__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
CASE
	WHEN sas.ActivityType IN (11,21,23,24,25,31,32,33,39)
		THEN
        CONCAT(pfa.FAQuantity, ptd.QuantityUnit)
    WHEN sas.ActivityType IN (51,52,53,90)
		THEN
        CONCAT(TRUNCATE(pfa.FAPercentCompleted * 100,0), '%')
	WHEN sas.ActivityType IN (38)
		THEN
        CONCAT((pfa.FAQuantity * pfa.FAPercentCompleted), ptd.QuantityUnit)
END AS Quantity,
(COALESCE(pfa.FAPercentCompleted,0)  * 100) AS PercentClaimed,

pfa.FANotes AS Notes,
pfa.FARework AS Rework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####     
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeFA pfa
	ON pfa.ActivityID = sas.ActivityID
JOIN PipeTrackerDetails ptd
	ON ptd.BidID = pfa.FABidID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime,

### Quantities Installed ###
(pm.MiscQuantity) AS Quantity,
1 AS PercentClaimed,

pm.MiscNotes AS Notes,
pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####     
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION 




SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
COALESCE(pw.WeldPercentCompleted,0) AS Quantity,
(COALESCE(pw.WeldPercentCompleted,0)  * 100) AS PercentClaimed,

pw.WeldNotes AS Notes,
pw.WeldRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins ##### 
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID



UNION 


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework


FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 41
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber AND ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID




UNION ALL


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 42
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber & ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType AS ActivityTypeName, at.ID AS ActivityTypeID,
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
(SELECT sasr.TimeStamp 
FROM SubmissionActivityStatusREV sasr
WHERE sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
ORDER BY TimeStamp DESC
LIMIT 1) AS ReviewedTime, 
 
### Quantities Installed ###
1 AS Quantity,
1 AS PercentClaimed,
pt.TestingNotes AS Notes,
pt.TestingRework

FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
#### Assigned Activities Joins #####  
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType     
JOIN PipeTesting pt
	ON pt.ActivityID = sas.ActivityID AND sas.ActivityType = 43
JOIN PipeTrackerDetails ptd
	ON ptd.TestPackageNumber = pt.TestingTestPackageNumber & ptd.BidID = :BidID
    
WHERE sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingCivilPunch">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='CivilSellPunchHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdateSteelDemoQuantity">
        <![CDATA[
        UPDATE `SteelDemo` 
SET 
`DemoPercentCompleted`= :PercentCompleted
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryStatus">
        <![CDATA[
        SELECT sas.ActivityID, CONCAT(ats.Status, ' - ', IF(sas.LockField IS NOT NULL, 'Locked', COALESCE(sas.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sas.TimeStamp

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy
    
WHERE sas.ActivityID = :ActivityID



UNION ALL



SELECT sasr.*
FROM (SELECT sasr.fk_ActivityID, CONCAT(ats.Status, ' - ', IF(sasr.LockField IS NOT NULL, 'Locked', COALESCE(sasr.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sasr.TimeStamp

FROM SubmissionActivityStatusREV sasr
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sasr.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy

WHERE sasr.fk_ActivityID = :ActivityID) sasr
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryStatus__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, CONCAT(ats.Status, ' - ', IF(sas.LockField IS NOT NULL, 'Locked', COALESCE(sas.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sas.TimeStamp

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy
    
WHERE sas.ActivityID = :ActivityID



UNION ALL



SELECT sasr.*
FROM (SELECT sasr.fk_ActivityID, CONCAT(ats.Status, ' - ', IF(sasr.LockField IS NOT NULL, 'Locked', COALESCE(sasr.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sasr.TimeStamp

FROM SubmissionActivityStatusREV sasr
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sasr.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy

WHERE sasr.fk_ActivityID = :ActivityID) sasr
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSASStatus">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
SET 
sas.fk_ActivityStatus = :ActivityStatusID,
sas.fk_LastModifiedBy = :UserID
WHERE sas.ActivityID = :ActivityID
        ]]>
    <query-param name="ActivityStatusID" type="java.lang.Integer"/>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTesting">
        <![CDATA[
        SELECT pt.* 
FROM PipeTesting pt
WHERE ActivityID = :ActivityID

UNION ALL

SELECT ptr.fk_OrgActivityId, ptr.TestingTestPackageNumber, ptr.TestingRework, ptr.TestingNotes, ptr.TestingTimeInForm, 
ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTestingREV ptr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTesting__count">
        <![CDATA[
        select count(*) from (SELECT pt.* 
FROM PipeTesting pt
WHERE ActivityID = :ActivityID

UNION ALL

SELECT ptr.fk_OrgActivityId, ptr.TestingTestPackageNumber, ptr.TestingRework, ptr.TestingNotes, ptr.TestingTimeInForm, 
ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTestingREV ptr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitesEquip">
        <![CDATA[
        SELECT etd.BidID, etd.TakeOffQuantity, etd.QuantityUnit,
etd.EstimatedHours AS FAHours,
COALESCE(er.InstalledPercent,0) AS InstalledPercent

FROM EquipTrackerDetails etd
LEFT JOIN (SELECT sas.fk_BidIDAssigned AS BidID,
			sum(efa.FAPercentCompleted) AS InstalledPercent
            FROM SubmissionActivityStatus sas
            JOIN EquipFA efa
				ON efa.ActivityID = sas.ActivityID
			WHERE sas.fk_BidIDAssigned = :BidID
            AND sas.fk_ActivityStatus IN(5,12)
            GROUP BY sas.fk_BidIDAssigned
			)er
	ON er.BidID = etd.BidID

WHERE etd.BidID = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitesEquip__count">
        <![CDATA[
        select count(*) from (SELECT etd.BidID, etd.TakeOffQuantity, etd.QuantityUnit,
etd.EstimatedHours AS FAHours,
COALESCE(er.InstalledPercent,0) AS InstalledPercent

FROM EquipTrackerDetails etd
LEFT JOIN (SELECT sas.fk_BidIDAssigned AS BidID,
			sum(efa.FAPercentCompleted) AS InstalledPercent
            FROM SubmissionActivityStatus sas
            JOIN EquipFA efa
				ON efa.ActivityID = sas.ActivityID
			WHERE sas.fk_BidIDAssigned = :BidID
            AND sas.fk_ActivityStatus IN(5,12)
            GROUP BY sas.fk_BidIDAssigned
			)er
	ON er.BidID = etd.BidID

WHERE etd.BidID = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeTesting">
        <![CDATA[
        UPDATE PipeTesting
SET 
TestingTestPackageNumber = :TestPackageNumber,
TestingRework = :Rework,
TestingNotes = :Notes
WHERE ActivityID= :ActivityID
        ]]>
    <query-param name="TestPackageNumber" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeMisc">
        <![CDATA[
        SELECT pm.* 
FROM PipeMisc pm
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pmr.fk_OrgActivityId,
pmr.MiscDrawingNumber, pmr.MiscLineNumber, pmr.MiscSheetNumber, pmr.MiscTimeInForm, pmr.MiscQuantity, pmr.MiscRework, pmr.MiscNotes,
pmr.ActivityType, pmr.Rev, pmr.TimeStamp
FROM PipeMiscREV pmr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeMisc__count">
        <![CDATA[
        select count(*) from (SELECT pm.* 
FROM PipeMisc pm
WHERE ActivityID = :ActivityID

UNION ALL

SELECT  pmr.fk_OrgActivityId,
pmr.MiscDrawingNumber, pmr.MiscLineNumber, pmr.MiscSheetNumber, pmr.MiscTimeInForm, pmr.MiscQuantity, pmr.MiscRework, pmr.MiscNotes,
pmr.ActivityType, pmr.Rev, pmr.TimeStamp
FROM PipeMiscREV pmr
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelDemo">
        <![CDATA[
        SELECT std.Description, std.PieceMark, stld.* 
FROM SteelDemo stld
JOIN SteelTrackerDetails std
    ON std.BidID = stld.DemoBidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stldr.fk_OrgActivityId, stldr.DemoBidID, stldr.DemoPercentCompleted, stldr.DemoNotes, stldr.ActivityType, stldr.DemoTimeInForm, stldr.Rev, stldr.TimeStamp
FROM SteelDemoREV stldr
JOIN SteelTrackerDetails std
    ON std.BidID = stldr.DemoBidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelDemo__count">
        <![CDATA[
        select count(*) from (SELECT std.Description, std.PieceMark, stld.* 
FROM SteelDemo stld
JOIN SteelTrackerDetails std
    ON std.BidID = stld.DemoBidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stldr.fk_OrgActivityId, stldr.DemoBidID, stldr.DemoPercentCompleted, stldr.DemoNotes, stldr.ActivityType, stldr.DemoTimeInForm, stldr.Rev, stldr.TimeStamp
FROM SteelDemoREV stldr
JOIN SteelTrackerDetails std
    ON std.BidID = stldr.DemoBidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeCTOPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='PipeCTOHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesPipe">
        <![CDATA[
        SELECT ptd.*,

(COALESCE(ptd.TakeOffQuantity,0)
-COALESCE(er.InstalledFootage,0)
-COALESCE(er.InstalledBoltUps,0)
-COALESCE(er.InstalledWelds,0)
-COALESCE(er.InstalledCuts,0)
-COALESCE(er.InstalledTrim,0)
-COALESCE(er.InstalledSupports,0)
-COALESCE(er.InstalledMisc,0)
-COALESCE(er.InstalledDemo,0)) AS RemainingQuantity


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT  ptd.BidID,
	###Installed Quantities Calculations ###
		sum(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
		sum(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0)) AS InstalledBoltUps, 
		sum(COALESCE(pw.WeldPercentCompleted * pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
		sum(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) AS InstalledScrewJoints,
		sum(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0)) AS InstalledOtherConnections,
		sum(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledCuts,
		sum(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
		sum(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledSupports,
		sum(COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo,
		sum(COALESCE(pm.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmm.MiscQuantity,0)) AS InstalledMisc


		FROM SubmissionActivityStatus sas
		JOIN PSA.REF_ActivityTypes at
			ON at.ID = sas.ActivityType
			
		LEFT JOIN PipeFA pe
			ON pe.ActivityID = sas.ActivityID AND pe.FARework = 0
		LEFT JOIN PipeFA pcb
			ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		LEFT JOIN PipeWeld pw
			ON pw.ActivityID = sas.ActivityID  AND  pw.WeldRework = 0
		LEFT JOIN PipeFA pcs
			ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0	 
		LEFT JOIN PipeFA pco
			ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0	 
		LEFT JOIN PipeFA pcut
			ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0			
		LEFT JOIN PipeFA pt
			ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0			
		LEFT JOIN PipeFA psu
			ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0			
		LEFT JOIN PipeFA pd
			ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53,59)		
		LEFT JOIN PipeFA pm
			ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0			
		LEFT JOIN PipeTrackerDetails ptd
			ON ptd.BidID = sas.fk_BidIDAssigned
			
	/* #### Begining of Misc activities assigned joins #### */	
		LEFT JOIN PipeMisc pme
			ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
		LEFT JOIN PipeMisc pmcb
			ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
		LEFT JOIN PipeMisc pmw
			ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
		LEFT JOIN PipeMisc pmcs
			ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
		LEFT JOIN PipeMisc pmco
			ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
		LEFT JOIN PipeMisc pmcut
			ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0
		LEFT JOIN PipeMisc pmt
			ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
		LEFT JOIN PipeMisc pmsu
			ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "S" AND pmsu.MiscRework = 0
		LEFT JOIN PipeMisc pmd
			ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
		LEFT JOIN PipeMisc pmm
			ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0

		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY ptd.BidID) er
	ON er.BidID = ptd.BidID
WHERE ptd.BidID = :BidID
OR
(LineNumber LIKE :LineNumber
AND EngDrawingNumber LIKE :DrawingNumber
AND SheetNumber LIKE :SheetNumber
AND ActivityType LIKE :ActivityType
AND ActivitySubType LIKE :ActivitySubType
)
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="ActivityType" type="java.lang.String"/>
    <query-param name="ActivitySubType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesPipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.*,

(COALESCE(ptd.TakeOffQuantity,0)
-COALESCE(er.InstalledFootage,0)
-COALESCE(er.InstalledBoltUps,0)
-COALESCE(er.InstalledWelds,0)
-COALESCE(er.InstalledCuts,0)
-COALESCE(er.InstalledTrim,0)
-COALESCE(er.InstalledSupports,0)
-COALESCE(er.InstalledMisc,0)
-COALESCE(er.InstalledDemo,0)) AS RemainingQuantity


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT  ptd.BidID,
	###Installed Quantities Calculations ###
		sum(COALESCE(pe.FAQuantity,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
		sum(COALESCE(pcb.FAQuantity,0) + COALESCE(pmcb.MiscQuantity,0)) AS InstalledBoltUps, 
		sum(COALESCE(pw.WeldPercentCompleted * pw.WeldPercentCompleted,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
		sum(COALESCE(pcs.FAQuantity,0) + COALESCE(pmcs.MiscQuantity,0)) AS InstalledScrewJoints,
		sum(COALESCE(pco.FAQuantity,0) + COALESCE(pmco.MiscQuantity,0)) AS InstalledOtherConnections,
		sum(COALESCE(pcut.FAQuantity,0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledCuts,
		sum(COALESCE(pt.FAQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
		sum(COALESCE(psu.FAQuantity * psu.FAPercentCompleted,0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledSupports,
		sum(COALESCE(pd.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo,
		sum(COALESCE(pm.FAPercentCompleted * ptd.TakeOffQuantity,0) + COALESCE(pmm.MiscQuantity,0)) AS InstalledMisc


		FROM SubmissionActivityStatus sas
		JOIN PSA.REF_ActivityTypes at
			ON at.ID = sas.ActivityType
			
		LEFT JOIN PipeFA pe
			ON pe.ActivityID = sas.ActivityID AND pe.FARework = 0
		LEFT JOIN PipeFA pcb
			ON pcb.ActivityID = sas.ActivityID AND sas.ActivityType = 21 AND pcb.FARework = 0
		LEFT JOIN PipeWeld pw
			ON pw.ActivityID = sas.ActivityID  AND  pw.WeldRework = 0
		LEFT JOIN PipeFA pcs
			ON pcs.ActivityID = sas.ActivityID AND sas.ActivityType = 24 AND pcs.FARework = 0	 
		LEFT JOIN PipeFA pco
			ON pco.ActivityID = sas.ActivityID AND sas.ActivityType = 25 AND pco.FARework = 0	 
		LEFT JOIN PipeFA pcut
			ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.FARework = 0			
		LEFT JOIN PipeFA pt
			ON pt.ActivityID = sas.ActivityID AND sas.ActivityType IN (31,32,33,39) AND pt.FARework = 0			
		LEFT JOIN PipeFA psu
			ON psu.ActivityID = sas.ActivityID AND sas.ActivityType = 38 AND psu.FARework = 0			
		LEFT JOIN PipeFA pd
			ON pd.ActivityID = sas.ActivityID AND sas.ActivityType IN (51,52,53,59)		
		LEFT JOIN PipeFA pm
			ON pm.ActivityID = sas.ActivityID AND sas.ActivityType = 90 AND pm.FARework = 0			
		LEFT JOIN PipeTrackerDetails ptd
			ON ptd.BidID = sas.fk_BidIDAssigned
			
	/* #### Begining of Misc activities assigned joins #### */	
		LEFT JOIN PipeMisc pme
			ON pme.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "PE" AND pme.MiscRework = 0
		LEFT JOIN PipeMisc pmcb
			ON pmcb.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "BU" AND pmcb.MiscRework = 0
		LEFT JOIN PipeMisc pmw
			ON pmw.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "W" AND pmw.MiscRework = 0
		LEFT JOIN PipeMisc pmcs
			ON pmcs.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "SCREW" AND pmcs.MiscRework = 0
		LEFT JOIN PipeMisc pmco
			ON pmco.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "Other" AND pmco.MiscRework = 0
		LEFT JOIN PipeMisc pmcut
			ON pmcut.ActivityID = sas.ActivityID AND ptd.ActivityType = "C" AND ptd.ActivitySubType = "CUT" AND pmcut.MiscRework = 0
		LEFT JOIN PipeMisc pmt
			ON pmt.ActivityID = sas.ActivityID AND ptd.ActivityType = "T" AND pmt.MiscRework = 0
		LEFT JOIN PipeMisc pmsu
			ON pmsu.ActivityID = sas.ActivityID AND ptd.ActivitySubType = "S" AND pmsu.MiscRework = 0
		LEFT JOIN PipeMisc pmd
			ON pmd.ActivityID = sas.ActivityID  AND ptd.ActivityType = "D" AND pmd.MiscRework = 0
		LEFT JOIN PipeMisc pmm
			ON pmm.ActivityID = sas.ActivityID  AND ptd.ActivityType = "MISC" AND pmm.MiscRework = 0

		WHERE fk_ActivityStatus IN (5,12)
		GROUP BY ptd.BidID) er
	ON er.BidID = ptd.BidID
WHERE ptd.BidID = :BidID
OR
(LineNumber LIKE :LineNumber
AND EngDrawingNumber LIKE :DrawingNumber
AND SheetNumber LIKE :SheetNumber
AND ActivityType LIKE :ActivityType
AND ActivitySubType LIKE :ActivitySubType
)) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="ActivityType" type="java.lang.String"/>
    <query-param name="ActivitySubType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdatePipeWeld">
        <![CDATA[
        UPDATE PipeWeld
SET
WeldSpool1 = :Spool1,
WeldSpool2 = :Spool2,
WeldDrawingNumber = :DrawingNumber,
WeldLineNumber = :LineNumber,
WeldSheetNumber = :SheetNumber,
WeldLineSpec = :LineSpec,
WeldNumber = :WeldNumber,
WeldStencil = :Stencil,
WeldSize = :Size,
WeldThickness = :Thickness,
WeldType = :WeldType,
WeldPosition = :WeldPosition,
WeldMaterial = :Material,
WeldProcedure = :Procedure,
WeldComplete = :Complete,
WeldShared = :Shared,
WeldPercentCompleted = :PercentCompleted,
WeldRework = :Rework,
WeldNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Spool1" type="java.lang.String"/>
    <query-param name="Spool2" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="LineSpec" type="java.lang.String"/>
    <query-param name="WeldNumber" type="java.lang.String"/>
    <query-param name="Stencil" type="java.lang.String"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Thickness" type="java.lang.String"/>
    <query-param name="WeldType" type="java.lang.String"/>
    <query-param name="WeldPosition" type="java.lang.String"/>
    <query-param name="Material" type="java.lang.String"/>
    <query-param name="Procedure" type="java.lang.String"/>
    <query-param name="Complete" type="java.lang.Byte"/>
    <query-param name="Shared" type="java.lang.Byte"/>
    <query-param name="PercentCompleted" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesSteel">
        <![CDATA[
        SELECT std.*
FROM SteelTrackerDetails std
WHERE std.BidID = :BidID 
ORDER BY std.SortGroup1, std.PieceMark
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.*
FROM SteelTrackerDetails std
WHERE std.BidID = :BidID 
ORDER BY std.SortGroup1, std.PieceMark) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingCivilWork">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='CivilWorkHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageCivil">
        <![CDATA[
        SELECT DISTINCT ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber
FROM CivilTrackerDetails ctd
WHERE ctd.TestPackageNumber = :TestPackage
ORDER BY ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber
FROM CivilTrackerDetails ctd
WHERE ctd.TestPackageNumber = :TestPackage
ORDER BY ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetReportDWRByDate">
        <![CDATA[
        SELECT sas.ActivityID AS FieldActivityID, 
pw.WeldSpool1, pw.WeldSpool2, pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, pw.WeldNumber,
pw.WeldStencil, pw.WeldSize, pw.WeldThickness, pw.WeldMaterial, pw.WeldType, pw.WeldLineSpec, pw.WeldProcedure, pw.WeldNotes,
sd.ReceivedTime
FROM SubmissionActivityStatus sas

JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
    
WHERE sd.ReceivedTime BETWEEN :BeginDate and :EndDate

ORDER BY sd.ReceivedTime
        ]]>
    <query-param name="BeginDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDWRByDate__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID AS FieldActivityID, 
pw.WeldSpool1, pw.WeldSpool2, pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, pw.WeldNumber,
pw.WeldStencil, pw.WeldSize, pw.WeldThickness, pw.WeldMaterial, pw.WeldType, pw.WeldLineSpec, pw.WeldProcedure, pw.WeldNotes,
sd.ReceivedTime
FROM SubmissionActivityStatus sas

JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID

JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
    
WHERE sd.ReceivedTime BETWEEN :BeginDate and :EndDate

ORDER BY sd.ReceivedTime) wmTempTable
        ]]>
    <query-param name="BeginDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetSettingProductivityIntervals">
        <![CDATA[
        SELECT 
s1.Value1 AS Interval1, 
s2.Value1 AS Interval2, 
s3.Value1 AS Interval3, 
s4.Value1 AS Interval4

FROM SETTINGS s1

JOIN SETTINGS s2
	ON s2.Label = 'ProductivityInterval2'
JOIN SETTINGS s3
	ON s3.Label = 'ProductivityInterval3'
JOIN SETTINGS s4
	ON s4.Label = 'ProductivityInterval4'

WHERE s1.Label = 'ProductivityInterval1'
        ]]>
    </sql-query>

    <sql-query name="GetSettingProductivityIntervals__count">
        <![CDATA[
        select count(*) from (SELECT 
s1.Value1 AS Interval1, 
s2.Value1 AS Interval2, 
s3.Value1 AS Interval3, 
s4.Value1 AS Interval4

FROM SETTINGS s1

JOIN SETTINGS s2
	ON s2.Label = 'ProductivityInterval2'
JOIN SETTINGS s3
	ON s3.Label = 'ProductivityInterval3'
JOIN SETTINGS s4
	ON s4.Label = 'ProductivityInterval4'

WHERE s1.Label = 'ProductivityInterval1') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSettingSteelSell">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelSellHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesCivil">
        <![CDATA[
        SELECT ctd.BidID, ctd.TakeOffQuantity, ctd.QuantityUnit,
(COALESCE(ctd.EstimatedHours, 0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent')) AS FAHours,
COALESCE(er.InstalledQuantity,0) AS InstalledQuantity,
COALESCE(er.InstalledPercent,0) AS InstalledPercent

FROM CivilTrackerDetails ctd
LEFT JOIN (SELECT ctd.BidID,
        SUM(COALESCE(IF(sas.ActivityType IN (70),
		/* TRUE */ 
		COALESCE(cfa.FAPercentCompleted,0)  * ctd.TakeOffQuantity, 
		/* FALSE */
		cfa.FAQuantity
		),0)) AS InstalledQuantity,
		SUM(COALESCE(cfa.FAPercentCompleted,0)) AS InstalledPercent
        
		FROM SubmissionActivityStatus sas
		JOIN CivilTrackerDetails ctd
		    ON ctd.BidID = sas.fk_BidIDAssigned
		JOIN CivilFA cfa
			ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
		WHERE sas.fk_BidIDAssigned = :BidID
		AND sas.fk_ActivityStatus IN(5,12)
        GROUP BY ctd.BidID
        )er
	ON er.BidID = ctd.BidID
WHERE ctd.BidID = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.BidID, ctd.TakeOffQuantity, ctd.QuantityUnit,
(COALESCE(ctd.EstimatedHours, 0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent')) AS FAHours,
COALESCE(er.InstalledQuantity,0) AS InstalledQuantity,
COALESCE(er.InstalledPercent,0) AS InstalledPercent

FROM CivilTrackerDetails ctd
LEFT JOIN (SELECT ctd.BidID,
        SUM(COALESCE(IF(sas.ActivityType IN (70),
		/* TRUE */ 
		COALESCE(cfa.FAPercentCompleted,0)  * ctd.TakeOffQuantity, 
		/* FALSE */
		cfa.FAQuantity
		),0)) AS InstalledQuantity,
		SUM(COALESCE(cfa.FAPercentCompleted,0)) AS InstalledPercent
        
		FROM SubmissionActivityStatus sas
		JOIN CivilTrackerDetails ctd
		    ON ctd.BidID = sas.fk_BidIDAssigned
		JOIN CivilFA cfa
			ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
		WHERE sas.fk_BidIDAssigned = :BidID
		AND sas.fk_ActivityStatus IN(5,12)
        GROUP BY ctd.BidID
        )er
	ON er.BidID = ctd.BidID
WHERE ctd.BidID = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelShake">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelShakeHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdateSteelSellPackage">
        <![CDATA[
        UPDATE `SteelSellPackage` 
SET 
`SellTestPackageNumber`= :TestPackage,
`SellNotes`= :Notes 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateEquipFA">
        <![CDATA[
        UPDATE `EquipFA` 
SET 
`FABidID`= :BidID,
`FAQuantity`= :Quantity,
`FAPercentCompleted`= :Percent,
`FARework`= :Rework,
`FANotes`= :Notes 
WHERE `ActivityID`= :ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="ActivityID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelFA">
        <![CDATA[
        SELECT std.Description, std.PieceMark, stlfa.* 
FROM SteelFA stlfa
JOIN SteelTrackerDetails std
    ON std.BidID = stlfa.FABidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stlfar.fk_OrgActivityId, stlfar.FABidID, stlfar.FAQuantity, stlfar.FAPercentCompleted, stlfar.FARework, stlfar.FANotes, stlfar.ActivityType, stlfar.FATimeInForm, stlfar.Rev, stlfar.TimeStamp
FROM SteelFAREV stlfar
JOIN SteelTrackerDetails std
    ON std.BidID = stlfar.FABidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelFA__count">
        <![CDATA[
        select count(*) from (SELECT std.Description, std.PieceMark, stlfa.* 
FROM SteelFA stlfa
JOIN SteelTrackerDetails std
    ON std.BidID = stlfa.FABidID
WHERE ActivityID = :ActivityID

UNION ALL

SELECT std.Description, std.PieceMark, stlfar.fk_OrgActivityId, stlfar.FABidID, stlfar.FAQuantity, stlfar.FAPercentCompleted, stlfar.FARework, stlfar.FANotes, stlfar.ActivityType, stlfar.FATimeInForm, stlfar.Rev, stlfar.TimeStamp
FROM SteelFAREV stlfar
JOIN SteelTrackerDetails std
    ON std.BidID = stlfar.FABidID
WHERE fk_OrgActivityId = :ActivityID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSubDetailsSuper">
        <![CDATA[
        SELECT u.FullName, u.Email, sd.StartTime, sd.CompleteTime, sd.ReceivedTime, ssig.SignatureData 
FROM SubsDetails sd
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
LEFT JOIN SubsSignatures ssig
	On ssig.SubmissionID = sd.SubmissionID
WHERE sd.SubmissionID = :SubmissionID
        ]]>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSubDetailsSuper__count">
        <![CDATA[
        select count(*) from (SELECT u.FullName, u.Email, sd.StartTime, sd.CompleteTime, sd.ReceivedTime, ssig.SignatureData 
FROM SubsDetails sd
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID
LEFT JOIN SubsSignatures ssig
	On ssig.SubmissionID = sd.SubmissionID
WHERE sd.SubmissionID = :SubmissionID) wmTempTable
        ]]>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelBoltout">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelBoltoutHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelErect">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelErectHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>
</hibernate-mapping>
