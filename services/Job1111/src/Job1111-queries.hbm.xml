<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="UpdateCivilSellPackage">
        <![CDATA[
        UPDATE `CivilSellPackage` 
SET 
`SellTestPackageNumber`= :TestPackageNumber, 
`SellNotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="TestPackageNumber" type="java.lang.String"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSuperRecentActivites">
        <![CDATA[
        SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW() 
AND sas.ActivityType <> 0
AND sas.fk_ActivityStatus <> 10 
AND sas.fk_ActivityStatus <> 11
AND (sas.fk_LastModifiedBy = :UserID OR sas.fk_LastModifiedBy = :SelectedSuper)
ORDER BY sas.TimeStamp DESC
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="SelectedSuper" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSuperRecentActivites__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW() 
AND sas.ActivityType <> 0
AND sas.fk_ActivityStatus <> 10 
AND sas.fk_ActivityStatus <> 11
AND (sas.fk_LastModifiedBy = :UserID OR sas.fk_LastModifiedBy = :SelectedSuper)
ORDER BY sas.TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="SelectedSuper" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetErectionTotal">
        <![CDATA[
        SELECT e.ErectionLengthSpool1 + e.ErectionLengthSpool2 + e.ErectionLengthSpool3 + e.ErectionLengthSpool4 + e.ErectionLengthSpool5 + e.ErectionLengthSpool6 AS Total
FROM PipeErection e
WHERE ActivityID = :ActivityId
        ]]>
    <query-param name="ActivityId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetErectionTotal__count">
        <![CDATA[
        select count(*) from (SELECT e.ErectionLengthSpool1 + e.ErectionLengthSpool2 + e.ErectionLengthSpool3 + e.ErectionLengthSpool4 + e.ErectionLengthSpool5 + e.ErectionLengthSpool6 AS Total
FROM PipeErection e
WHERE ActivityID = :ActivityId) wmTempTable
        ]]>
    <query-param name="ActivityId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelShake">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelShakeHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelErect">
        <![CDATA[
        SELECT stle.* 
FROM SteelErect stle
WHERE ID = :RowID

UNION ALL

SELECT stler.fk_OrgActivityId, stler.ActivityID, stler.FAArea, stler.FAPieceNumber, stler.FAErectQuantity, stler.FAErectPercent, stler.FARework, stler.FANotes, stler.ActivityType, stler.FATimeInForm, stler.Rev, stler.TimeStamp
FROM SteelErectREV stler
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelErect__count">
        <![CDATA[
        select count(*) from (SELECT stle.* 
FROM SteelErect stle
WHERE ID = :RowID

UNION ALL

SELECT stler.fk_OrgActivityId, stler.ActivityID, stler.FAArea, stler.FAPieceNumber, stler.FAErectQuantity, stler.FAErectPercent, stler.FARework, stler.FANotes, stler.ActivityType, stler.FATimeInForm, stler.Rev, stler.TimeStamp
FROM SteelErectREV stler
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityWeldInstalled">
        <![CDATA[
        SELECT sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
	LEFT JOIN `Job1112`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND sas.ActivityType = 22 AND  pw.WeldRework = 0
	
	LEFT JOIN `Job1112`.PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "W" AND pmw.MiscRework = 0
        


WHERE sas.ActivityType IN (22, 91) 
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityWeldInstalled__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
	LEFT JOIN `Job1112`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND sas.ActivityType = 22 AND  pw.WeldRework = 0
	
	LEFT JOIN `Job1112`.PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "W" AND pmw.MiscRework = 0
        


WHERE sas.ActivityType IN (22, 91) 
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteelExpanded">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,
at.ActivityType AS ActivityTypeName,
COALESCE(stls.FAShakeQuantity,0) AS Quantity, 
'1' AS Percent,
stls.FANotes AS Notes,
stls.FARework AS Rework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 61
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 61
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION


SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stle.FAErectQuantity,0) AS ErectQuantity,
COALESCE(stle.FAErectPercent,0) AS ErectPercent,
stle.FANotes,
stle.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 62
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID


WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 62
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlb.FABoltOutQuantity,0) AS BoltoutQuantity,
COALESCE(stlb.FABoltOutPercent,0) AS BoltoutPercent, 
stlb.FANotes,
stlb.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 63
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 63
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION


SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stli.FAImpQuantity,0) AS ImpQuantity,
COALESCE(stli.FAImpPercent,0) AS ImpPercent, 
stli.FANotes,
stli.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType =64
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 64
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlw.FAWeldQuantity,0) AS WeldQuantity,
COALESCE(stlw.FAWeldPercent,0) AS WeldPercent,
stlw.FANotes,
stlw.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 68
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 68
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlsell.FASellQuantity,0) AS SellQuantity, 
'1' AS Percent, 
stlsell.FANotes,
stlsell.FARework

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 65
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 65
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stld.DemoQuantity,0) AS DemoQuantity, 
'1' AS Percent, 
stld.DemoNotes,
0 AS Rework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 67
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 67
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlm.MiscQuantity,0) AS MiscQuantity, 
'1' AS Percent,
stlm.MiscNotes,
stlm.MiscRework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 96
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
    
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 96
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="SubID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteelExpanded__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,
at.ActivityType AS ActivityTypeName,
COALESCE(stls.FAShakeQuantity,0) AS Quantity, 
'1' AS Percent,
stls.FANotes AS Notes,
stls.FARework AS Rework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 61
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 61
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION


SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stle.FAErectQuantity,0) AS ErectQuantity,
COALESCE(stle.FAErectPercent,0) AS ErectPercent,
stle.FANotes,
stle.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 62
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID


WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 62
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlb.FABoltOutQuantity,0) AS BoltoutQuantity,
COALESCE(stlb.FABoltOutPercent,0) AS BoltoutPercent, 
stlb.FANotes,
stlb.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 63
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 63
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID



UNION


SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stli.FAImpQuantity,0) AS ImpQuantity,
COALESCE(stli.FAImpPercent,0) AS ImpPercent, 
stli.FANotes,
stli.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType =64
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 64
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlw.FAWeldQuantity,0) AS WeldQuantity,
COALESCE(stlw.FAWeldPercent,0) AS WeldPercent,
stlw.FANotes,
stlw.FARework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 68
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 68
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlsell.FASellQuantity,0) AS SellQuantity, 
'1' AS Percent, 
stlsell.FANotes,
stlsell.FARework

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 65
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
 

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 65
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stld.DemoQuantity,0) AS DemoQuantity, 
'1' AS Percent, 
stld.DemoNotes,
0 AS Rework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 67
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
 
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 67
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID


UNION



SELECT sas.SubmissionID, sas.ActivityID,  
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

at.ActivityType,
COALESCE(stlm.MiscQuantity,0) AS MiscQuantity, 
'1' AS Percent,
stlm.MiscNotes,
stlm.MiscRework


FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 96
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 


LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
    
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.SubmissionID = :SubID
AND sas.ActivityType = 96
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="SubID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingPipeRFTPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'CompleteForTestPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeRFTPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'CompleteForTestPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSteelImpQuantity">
        <![CDATA[
        UPDATE `SteelImp` 
SET 

`FAImpQuantity`= :Quantity,
`FAImpPercent`= :Percent
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeBoltup">
        <![CDATA[
        SELECT pb.* 
FROM PipeBoltUp pb
WHERE ID = :RowID

UNION ALL

SELECT pbr.fk_OrgActivityId, pbr.ActivityID, pbr.BoltUpSpool1, pbr.BoltUpSpool2, pbr.BoltUpDrawingNumber, pbr.BoltUpLineNumber, pbr.BoltUpSheetNumber, pbr.BoltUpTimeInForm, 
pbr.BoltUpSize, pbr.BoltUpQuantity, pbr.BoltUpRework, pbr.BoltUpNotes, pbr.ActivityType, pbr.Rev, pbr.TimeStamp
FROM PipeBoltUpREV pbr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeBoltup__count">
        <![CDATA[
        select count(*) from (SELECT pb.* 
FROM PipeBoltUp pb
WHERE ID = :RowID

UNION ALL

SELECT pbr.fk_OrgActivityId, pbr.ActivityID, pbr.BoltUpSpool1, pbr.BoltUpSpool2, pbr.BoltUpDrawingNumber, pbr.BoltUpLineNumber, pbr.BoltUpSheetNumber, pbr.BoltUpTimeInForm, 
pbr.BoltUpSize, pbr.BoltUpQuantity, pbr.BoltUpRework, pbr.BoltUpNotes, pbr.ActivityType, pbr.Rev, pbr.TimeStamp
FROM PipeBoltUpREV pbr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackagePipe">
        <![CDATA[
        SELECT ptd.ID, ptd.BidID, ptd.Scope, ptd.Phase, ptd.Area, ptd.Location, ptd.Elevation, ptd.CU, ptd.P6ID, ptd.P6Description, ptd.Stage, ptd.TestPackageNumber, ptd.CostCode, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
ptd.RevisionNumber, ptd.System, ptd.Service, ptd.ClientPipeSpec, ptd.MaterialCode, ptd.Description, ptd.ComponentNumber, ptd.ECT, ptd.PipingActivityType, ptd.PipeSize, ptd.TakeOffQuantity, ptd.QuantityUnit, ptd.EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

ReadyForTestingInstalled,
HydroInstalled,
ClientTurnoverInstalled,

ste.ReadyForTestingHours AS ReadyForTestingHours,
ste.ReadyForTestingHours AS HydroHours,
ste.ReadyForTestingHours AS ClientTurnoverHours,

ert.EarnedReadyForTestingHours AS EarnedReadyForTestingHours,
ert.EarnedReadyForTestingHours AS EarnedHydroHours,
ert.EarnedReadyForTestingHours AS EarnedClientTurnoverHours

FROM PipeTrackerDetails ptd

	LEFT JOIN (SELECT ptd.BidID,
sum(COALESCE(pteR.InstalledReadyForTesting, 0)) AS ReadyForTestingInstalled,
sum(COALESCE(pteH.InstalledHydro, 0)) AS HydroInstalled,
sum(COALESCE(pteC.InstalledClientTurnover, 0)) AS ClientTurnoverInstalled,

sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * pteR.InstalledReadyForTesting, 0)) AS EarnedReadyForTestingHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent') * pteH.InstalledHydro, 0)) AS EarnedHydroHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent') * pteC.InstalledClientTurnover, 0)) AS EarnedClientTurnoverHours


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 AND ptd.ECT != "D"
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 AND ptd.ECT != "D"
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledClientTurnover
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 AND ptd.ECT != "D"
) ert
	ON ert.BidID = ptd.BidID
    
LEFT JOIN (SELECT ptd.BidID, 
				COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent'),0) AS TestingHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent')),0) AS ReadyForTestingHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent')),0) AS HydroHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent')),0) AS ClientTurnoverHours
				FROM `PipeTrackerDetails` ptd
				WHERE ptd.ECT != 'D') ste
	ON ste.BidID = ptd.BidID

WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.ID, ptd.BidID, ptd.Scope, ptd.Phase, ptd.Area, ptd.Location, ptd.Elevation, ptd.CU, ptd.P6ID, ptd.P6Description, ptd.Stage, ptd.TestPackageNumber, ptd.CostCode, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
ptd.RevisionNumber, ptd.System, ptd.Service, ptd.ClientPipeSpec, ptd.MaterialCode, ptd.Description, ptd.ComponentNumber, ptd.ECT, ptd.PipingActivityType, ptd.PipeSize, ptd.TakeOffQuantity, ptd.QuantityUnit, ptd.EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

ReadyForTestingInstalled,
HydroInstalled,
ClientTurnoverInstalled,

ste.ReadyForTestingHours AS ReadyForTestingHours,
ste.ReadyForTestingHours AS HydroHours,
ste.ReadyForTestingHours AS ClientTurnoverHours,

ert.EarnedReadyForTestingHours AS EarnedReadyForTestingHours,
ert.EarnedReadyForTestingHours AS EarnedHydroHours,
ert.EarnedReadyForTestingHours AS EarnedClientTurnoverHours

FROM PipeTrackerDetails ptd

	LEFT JOIN (SELECT ptd.BidID,
sum(COALESCE(pteR.InstalledReadyForTesting, 0)) AS ReadyForTestingInstalled,
sum(COALESCE(pteH.InstalledHydro, 0)) AS HydroInstalled,
sum(COALESCE(pteC.InstalledClientTurnover, 0)) AS ClientTurnoverInstalled,

sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * pteR.InstalledReadyForTesting, 0)) AS EarnedReadyForTestingHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent') * pteH.InstalledHydro, 0)) AS EarnedHydroHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent') * pteC.InstalledClientTurnover, 0)) AS EarnedClientTurnoverHours


FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND pteR.ActivityType = 41 AND ptd.ECT != "D"
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledHydro
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND pteH.ActivityType = 42 AND ptd.ECT != "D"
    
LEFT JOIN (SELECT pte.ActivityType, pte.TestingTestPackageNumber, 1 AS InstalledClientTurnover
			FROM PipeTesting pte
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = pte.ActivityID AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND pteC.ActivityType = 43 AND ptd.ECT != "D"
) ert
	ON ert.BidID = ptd.BidID
    
LEFT JOIN (SELECT ptd.BidID, 
				COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent'),0) AS TestingHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent')),0) AS ReadyForTestingHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent')),0) AS HydroHours,
                COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent')),0) AS ClientTurnoverHours
				FROM `PipeTrackerDetails` ptd
				WHERE ptd.ECT != 'D') ste
	ON ste.BidID = ptd.BidID

WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelShake">
        <![CDATA[
        SELECT stls.* 
FROM SteelShake stls
WHERE ID = :RowID

UNION ALL

SELECT stlsr.fk_OrgActivityId, stlsr.ActivityID, stlsr.FAArea, stlsr.FAPieceNumber, stlsr.FAShakeQuantity, stlsr.FARework, stlsr.FANotes, stlsr.ActivityType, stlsr.FATimeInForm, stlsr.Rev, stlsr.TimeStamp
FROM SteelShakeREV stlsr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelShake__count">
        <![CDATA[
        select count(*) from (SELECT stls.* 
FROM SteelShake stls
WHERE ID = :RowID

UNION ALL

SELECT stlsr.fk_OrgActivityId, stlsr.ActivityID, stlsr.FAArea, stlsr.FAPieceNumber, stlsr.FAShakeQuantity, stlsr.FARework, stlsr.FANotes, stlsr.ActivityType, stlsr.FATimeInForm, stlsr.Rev, stlsr.TimeStamp
FROM SteelShakeREV stlsr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelWeld">
        <![CDATA[
        UPDATE `SteelWeld` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FAWeldQuantity`= :Quantity,
`FAWeldPercent`= :Percent,
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Character"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingCivilPunch">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='CivilSellPunchHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdatePipeMisc">
        <![CDATA[
        UPDATE PipeMisc
SET
MiscDrawingNumber = :DrawingNumber,
MiscLineNumber = :LineNumber,
MiscSheetNumber = :SheetNumber,
MiscQuantity = :Quantity,
MiscRework = :Rework,
MiscNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRPipe">
        <![CDATA[
        SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  
pe.ErectionDrawingNumber AS DrawingNumber, 
pe.ErectionSheetNumber AS SheetNumber, 
pe.ErectionSpool1 AS Spool1, 
IF(pe.ErectionSpool3 IS NULL OR pe.ErectionSpool3 = '', pe.ErectionSpool2,  CONCAT(pe.ErectionSpool2, '...')) AS Spool2,
pe.ErectionPipeSize AS Size, 
(pe.ErectionLengthSpool1 + pe.ErectionLengthSpool2 + pe.ErectionLengthSpool3 + pe.ErectionLengthSpool4 + pe.ErectionLengthSpool5 + pe.ErectionLengthSpool6) AS QuantityInstalled,
ats.Status AS CurrentStatus,
pe.ErectionNotes AS Notes,
pe.ErectionRework AS Rework,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
    LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeErection pe
		ON pe.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 11
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pb.BoltUpDrawingNumber, 
pb.BoltUpSheetNumber, 
pb.BoltUpSpool1, 
pb.BoltUpSpool2, 
pb.BoltUpSize, 
pb.BoltUpQuantity, 
ats.Status,
pb.BoltUpNotes,
pb.BoltUpRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeBoltUp pb
        ON pb.ActivityID = sas.ActivityID
    
WHERE sas.ActivityType = 21
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)      
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pw.WeldDrawingNumber, 
pw.WeldSheetNumber, 
pw.WeldSpool1, 
pw.WeldSpool2, 
pw.WeldSize, 
COALESCE((pw.WeldPercentCompleted * .01),0), 
ats.Status,
pw.WeldNotes,
pw.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeWeld pw
        ON pw.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 22
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pcut.WeldDrawingNumber, 
pcut.WeldSheetNumber, 
'N/A', 
'N/A', 
pcut.WeldSize, 
 COALESCE((pcut.WeldPercentCompleted * .01),0), 
ats.Status,
pcut.WeldNotes,
pcut.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev\
    LEFT JOIN PipeWeld pcut
        ON pcut.ActivityID = sas.ActivityID
    
WHERE sas.ActivityType = 23
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)       
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pt.TrimDrawingNumber, 
pt.TrimSheetNumber, 
'N/A', 
'N/A', 
pt.TrimSize, 
pt.TrimQuantity, 
ats.Status,
pt.TrimNotes,
pt.TrimRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType IN (30,31,33,34,35,39)
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
psu.SupportDrawingNumber, 
psu.SupportSheetNumber, 
'N/A', 
'N/A', 
'N/A', 
IF(psu.SupportComplete = 1, psu.SupportQuantity, COALESCE((psu.SupportPercentCompleted * .01),0)), 
ats.Status,
CONCAT(psu.SupportType, '-: ', psu.SupportPartNumber, '-: ', psu.SupportNotes),
psu.SupportRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID 
        
WHERE sas.ActivityType = 32
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pd.DemoDrawingNumber, 
pd.DemoSheetNumber, 
'N/A', 
'N/A', 
pd.DemoSize, 
pd.DemoQuantity, 
ats.Status,
pd.DemoNotes,
0,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType IN (51,52,53,59)
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pm.MiscDrawingNumber, 
pm.MiscSheetNumber, 
'N/A', 
'N/A', 
'N/A', 
pm.MiscQuantity, 
ats.Status,
pm.MiscNotes,
pm.MiscRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 91
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)  
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID) 
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRPipe__count">
        <![CDATA[
        select count(*) from (SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  
pe.ErectionDrawingNumber AS DrawingNumber, 
pe.ErectionSheetNumber AS SheetNumber, 
pe.ErectionSpool1 AS Spool1, 
IF(pe.ErectionSpool3 IS NULL OR pe.ErectionSpool3 = '', pe.ErectionSpool2,  CONCAT(pe.ErectionSpool2, '...')) AS Spool2,
pe.ErectionPipeSize AS Size, 
(pe.ErectionLengthSpool1 + pe.ErectionLengthSpool2 + pe.ErectionLengthSpool3 + pe.ErectionLengthSpool4 + pe.ErectionLengthSpool5 + pe.ErectionLengthSpool6) AS QuantityInstalled,
ats.Status AS CurrentStatus,
pe.ErectionNotes AS Notes,
pe.ErectionRework AS Rework,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas
JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
    LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeErection pe
		ON pe.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 11
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pb.BoltUpDrawingNumber, 
pb.BoltUpSheetNumber, 
pb.BoltUpSpool1, 
pb.BoltUpSpool2, 
pb.BoltUpSize, 
pb.BoltUpQuantity, 
ats.Status,
pb.BoltUpNotes,
pb.BoltUpRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeBoltUp pb
        ON pb.ActivityID = sas.ActivityID
    
WHERE sas.ActivityType = 21
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)      
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pw.WeldDrawingNumber, 
pw.WeldSheetNumber, 
pw.WeldSpool1, 
pw.WeldSpool2, 
pw.WeldSize, 
COALESCE((pw.WeldPercentCompleted * .01),0), 
ats.Status,
pw.WeldNotes,
pw.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeWeld pw
        ON pw.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 22
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pcut.WeldDrawingNumber, 
pcut.WeldSheetNumber, 
'N/A', 
'N/A', 
pcut.WeldSize, 
 COALESCE((pcut.WeldPercentCompleted * .01),0), 
ats.Status,
pcut.WeldNotes,
pcut.WeldRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev\
    LEFT JOIN PipeWeld pcut
        ON pcut.ActivityID = sas.ActivityID
    
WHERE sas.ActivityType = 23
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)       
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pt.TrimDrawingNumber, 
pt.TrimSheetNumber, 
'N/A', 
'N/A', 
pt.TrimSize, 
pt.TrimQuantity, 
ats.Status,
pt.TrimNotes,
pt.TrimRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType IN (30,31,33,34,35,39)
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
psu.SupportDrawingNumber, 
psu.SupportSheetNumber, 
'N/A', 
'N/A', 
'N/A', 
IF(psu.SupportComplete = 1, psu.SupportQuantity, COALESCE((psu.SupportPercentCompleted * .01),0)), 
ats.Status,
CONCAT(psu.SupportType, '-: ', psu.SupportPartNumber, '-: ', psu.SupportNotes),
psu.SupportRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID 
        
WHERE sas.ActivityType = 32
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)    
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pd.DemoDrawingNumber, 
pd.DemoSheetNumber, 
'N/A', 
'N/A', 
pd.DemoSize, 
pd.DemoQuantity, 
ats.Status,
pd.DemoNotes,
0,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType IN (51,52,53,59)
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day



UNION



SELECT
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType, 
pm.MiscDrawingNumber, 
pm.MiscSheetNumber, 
'N/A', 
'N/A', 
'N/A', 
pm.MiscQuantity, 
ats.Status,
pm.MiscNotes,
pm.MiscRework,
DATE(sd.ReceivedTime) 

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PSA.REF_ActivityStatuses ats
		ON ats.ID = sas.fk_ActivityStatus
	LEFT JOIN SubsDetails sd
		ON sd.SubmissionId = sas.SubmissionID
	LEFT JOIN PSA.tblCrews tc
		ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
	LEFT JOIN PSA.tblCrewsRev tcr
		ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
    LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID
        
WHERE sas.ActivityType = 91
AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)  
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID) 
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetActivityHistoryEquipFA">
        <![CDATA[
        SELECT efa.* 
FROM EquipFA efa
WHERE ID = :RowID

UNION

SELECT efar.fk_OrgID, efar.SubmissionID, efar.FABidID, efar.FATagNumber, efar.FAActivitySelect, efar.FAQuantity, efar.FAPercentComplete, efar.FARework, efar.FANotes, efar.ActivityType, efar.FATimeInForm, efar.Rev, efar.TimeStamp
FROM EquipFAREV efar
WHERE efar.fk_OrgID = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistoryEquipFA__count">
        <![CDATA[
        select count(*) from (SELECT efa.* 
FROM EquipFA efa
WHERE ID = :RowID

UNION

SELECT efar.fk_OrgID, efar.SubmissionID, efar.FABidID, efar.FATagNumber, efar.FAActivitySelect, efar.FAQuantity, efar.FAPercentComplete, efar.FARework, efar.FANotes, efar.ActivityType, efar.FATimeInForm, efar.Rev, efar.TimeStamp
FROM EquipFAREV efar
WHERE efar.fk_OrgID = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitesEquip">
        <![CDATA[
        SELECT etd.BidID,
sum(etd.TakeOffQuantity) AS TakeOffQuantity, etd.QuantityUnit,

sum(COALESCE(etd.EstimatedHours,0)) AS FAHours,
sum(COALESCE(er.InstalledPercent,0)) AS InstalledPercent

FROM (SELECT BidID, TakeOffQuantity, QuantityUnit, EstimatedHours FROM EquipTrackerDetails WHERE BidID = :BidID GROUP BY BidID) etd
LEFT JOIN(SELECT etd.BidID,
COALESCE(efa.FAPercentComplete,0) AS InstalledPercent

FROM SubmissionActivityStatus sas 
LEFT JOIN EquipTrackerDetails etd
    ON etd.BidID = sas.fk_BidIDAssigned
LEFT JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID AND efa.FARework = 0

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType = 80
AND sas.fk_ActivityStatus IN(5,12)
) er
	ON er.BidID = etd.BidID
GROUP BY etd.BidID
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitesEquip__count">
        <![CDATA[
        select count(*) from (SELECT etd.BidID,
sum(etd.TakeOffQuantity) AS TakeOffQuantity, etd.QuantityUnit,

sum(COALESCE(etd.EstimatedHours,0)) AS FAHours,
sum(COALESCE(er.InstalledPercent,0)) AS InstalledPercent

FROM (SELECT BidID, TakeOffQuantity, QuantityUnit, EstimatedHours FROM EquipTrackerDetails WHERE BidID = :BidID GROUP BY BidID) etd
LEFT JOIN(SELECT etd.BidID,
COALESCE(efa.FAPercentComplete,0) AS InstalledPercent

FROM SubmissionActivityStatus sas 
LEFT JOIN EquipTrackerDetails etd
    ON etd.BidID = sas.fk_BidIDAssigned
LEFT JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID AND efa.FARework = 0

WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType = 80
AND sas.fk_ActivityStatus IN(5,12)
) er
	ON er.BidID = etd.BidID
GROUP BY etd.BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSteelMiscQuantity">
        <![CDATA[
        UPDATE `SteelMisc` 
SET 

`MiscQuantity`= :Quantity
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Float"/>
    </sql-query>

    <sql-query name="UpdateSteelMisc">
        <![CDATA[
        UPDATE `SteelMisc` 
SET 
`MiscArea`= :Area, 
`MiscPieceNumber`= :Piece, 
`MiscQuantity`= :Quantity, 
`MiscRework`= :Rework, 
`MiscNotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelDemoQuantity">
        <![CDATA[
        UPDATE `SteelDemo` 
SET 

`DemoQuantity`= :Quantity
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelDemo">
        <![CDATA[
        UPDATE `SteelDemo` 
SET 
`DemoArea`= :Area, 
`DemoSteelType`= :SteelType, 
`DemoSize`= :Size,
`DemoQuantity`= :Quantity,
`DemoNotes`= :Notes
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="SteelType" type="java.lang.Integer"/>
    <query-param name="Size" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryPipe">
        <![CDATA[
        SELECT sas.ActivityID, at.ActivityType, 
 
COALESCE((pe.ErectionLengthSpool1 + pe.ErectionLengthSpool2 + pe.ErectionLengthSpool3 + pe.ErectionLengthSpool4 + pe.ErectionLengthSpool5 + pe.ErectionLengthSpool6),0) AS Quantity,
pe.ErectionNotes AS Notes,
pe.Rev,
pe.ErectionRework AS Rework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeErection pe
	ON pe.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pb.BoltUpQuantity AS Quantity,
pb.BoltUpNotes AS Notes,
pb.Rev,
pb.BoltUpRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeBoltUp pb
	ON pb.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
COALESCE((pw.WeldPercentCompleted * .01),0) AS Quantity,
pw.WeldNotes AS Notes,
pw.Rev,
pw.WeldRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pt.TrimQuantity AS Quantity,
pt.TrimNotes AS Notes,  
pt.Rev,
pt.TrimRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeTrim pt
	ON pt.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
IF(psu.SupportComplete = 1, psu.SupportQuantity, COALESCE((psu.SupportPercentCompleted * .01),0)) AS Quantity,
psu.SupportNotes AS Notes,  
psu.Rev,
psu.SupportRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeSupports psu
	ON psu.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pd.DemoQuantity AS Quantity,
pd.DemoNotes AS Notes, 
pd.Rev,
'0',

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeDemo pd
	ON pd.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pm.MiscQuantity AS Quantity,
pm.MiscNotes AS Notes,
pm.Rev,
pm.MiscRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT pteR.ActivityID, at.ActivityType, 
 
1 AS Quantity,
pteR.TestingNotes AS Notes,
pteR.Rev,
pteR.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID, 
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D'

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteR.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteR.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteR.ActivityID 
    
WHERE ptd.BidID = :BidID
AND pteR.ActivityID IS NOT NULL

UNION ALL


SELECT pteH.ActivityID, at.ActivityType, 
 
1 AS Quantity,
pteH.TestingNotes AS Notes,
pteH.Rev,
pteH.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID,  
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = sas.ActivityID AND sas.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) ) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D' 

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteH.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteH.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteH.ActivityID 
        
WHERE ptd.BidID = :BidID
AND pteH.ActivityID IS NOT NULL


UNION ALL


SELECT pteC.ActivityID, at.ActivityType,
 
1 AS Quantity,
pteC.TestingNotes AS Notes,
pteC.Rev,
pteC.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID, 
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D'

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteC.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteC.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteC.ActivityID 
WHERE ptd.BidID = :BidID
AND pteC.ActivityID IS NOT NULL
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryPipe__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, at.ActivityType, 
 
COALESCE((pe.ErectionLengthSpool1 + pe.ErectionLengthSpool2 + pe.ErectionLengthSpool3 + pe.ErectionLengthSpool4 + pe.ErectionLengthSpool5 + pe.ErectionLengthSpool6),0) AS Quantity,
pe.ErectionNotes AS Notes,
pe.Rev,
pe.ErectionRework AS Rework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeErection pe
	ON pe.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pb.BoltUpQuantity AS Quantity,
pb.BoltUpNotes AS Notes,
pb.Rev,
pb.BoltUpRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeBoltUp pb
	ON pb.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
COALESCE((pw.WeldPercentCompleted * .01),0) AS Quantity,
pw.WeldNotes AS Notes,
pw.Rev,
pw.WeldRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pt.TrimQuantity AS Quantity,
pt.TrimNotes AS Notes,  
pt.Rev,
pt.TrimRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeTrim pt
	ON pt.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
IF(psu.SupportComplete = 1, psu.SupportQuantity, COALESCE((psu.SupportPercentCompleted * .01),0)) AS Quantity,
psu.SupportNotes AS Notes,  
psu.Rev,
psu.SupportRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeSupports psu
	ON psu.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pd.DemoQuantity AS Quantity,
pd.DemoNotes AS Notes, 
pd.Rev,
'0',

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeDemo pd
	ON pd.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT sas.ActivityID, at.ActivityType,  
 
pm.MiscQuantity AS Quantity,
pm.MiscNotes AS Notes,
pm.Rev,
pm.MiscRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, max(sasr.TimeStamp) AS ReviewedTime

FROM SubmissionActivityStatus sas

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
LEFT JOIN SubmissionActivityStatusREV sasr
	ON sasr.fk_ActivityID = sas.ActivityID AND sasr.fk_ActivityStatus = 2
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
	
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.fk_ActivityStatus IN (5,12)

GROUP BY sas.ActivityID


UNION ALL


SELECT pteR.ActivityID, at.ActivityType, 
 
1 AS Quantity,
pteR.TestingNotes AS Notes,
pteR.Rev,
pteR.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID, 
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12)) pteR
	ON pteR.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D'

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteR.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteR.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent

LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteR.ActivityID 
    
WHERE ptd.BidID = :BidID
AND pteR.ActivityID IS NOT NULL

UNION ALL


SELECT pteH.ActivityID, at.ActivityType, 
 
1 AS Quantity,
pteH.TestingNotes AS Notes,
pteH.Rev,
pteH.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID,  
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = sas.ActivityID AND sas.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) ) pteH
	ON pteH.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D' 

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteH.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteH.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteH.ActivityID 
        
WHERE ptd.BidID = :BidID
AND pteH.ActivityID IS NOT NULL


UNION ALL


SELECT pteC.ActivityID, at.ActivityType,
 
1 AS Quantity,
pteC.TestingNotes AS Notes,
pteC.Rev,
pteC.TestingRework,

CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, sasr.TimeStamp AS ReviewedTime 

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT sas.ActivityID, sas.SubmissionID, 
			 sas.ActivityType, ste.TestingTestPackageNumber, ste.TestingNotes, ste.Rev, ste.TestingRework
			FROM PipeTesting ste
			JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12)) pteC
	ON pteC.TestingTestPackageNumber = ptd.TestPackageNumber AND ptd.ECT != 'D'

LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID = pteC.ActivityType
LEFT JOIN SubsDetails sd
	ON sd.SubmissionID = pteC.SubmissionID
left JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
left JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
    
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp, sasr.fk_ActivityStatus
			FROM SubmissionActivityStatusREV sasr
			WHERE sasr.fk_ActivityStatus = 2
			GROUP BY fk_ActivityID) sasr
	ON sasr.fk_ActivityID = pteC.ActivityID 
WHERE ptd.BidID = :BidID
AND pteC.ActivityID IS NOT NULL) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeWeld">
        <![CDATA[
        SELECT pw.* 
FROM PipeWeld pw
WHERE ID = :RowID

UNION ALL

SELECT  pwr.fk_OrgActivityId, pwr.ActivityID, 
pwr.WeldSpool1, pwr.WeldSpool2, pwr.WeldDrawingNumber, pwr.WeldLineNumber, pwr.WeldSheetNumber, pwr.WeldTimeInForm, pwr.WeldLineSpec, pwr.WeldNumber, pwr.WeldStencil, pwr.WeldSize, pwr.WeldThickness, 
pwr.WeldType, pwr.WeldPosition, pwr.WeldMaterial, pwr.WeldProcedure, pwr.WeldComplete, pwr.WeldShared, pwr.WeldPercentCompleteChoice, pwr.WeldPercentCompleted, pwr.WeldRework, pwr.WeldNotes, 
pwr.ActivityType, pwr.Rev, pwr.TimeStamp
FROM PipeWeldREV pwr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeWeld__count">
        <![CDATA[
        select count(*) from (SELECT pw.* 
FROM PipeWeld pw
WHERE ID = :RowID

UNION ALL

SELECT  pwr.fk_OrgActivityId, pwr.ActivityID, 
pwr.WeldSpool1, pwr.WeldSpool2, pwr.WeldDrawingNumber, pwr.WeldLineNumber, pwr.WeldSheetNumber, pwr.WeldTimeInForm, pwr.WeldLineSpec, pwr.WeldNumber, pwr.WeldStencil, pwr.WeldSize, pwr.WeldThickness, 
pwr.WeldType, pwr.WeldPosition, pwr.WeldMaterial, pwr.WeldProcedure, pwr.WeldComplete, pwr.WeldShared, pwr.WeldPercentCompleteChoice, pwr.WeldPercentCompleted, pwr.WeldRework, pwr.WeldNotes, 
pwr.ActivityType, pwr.Rev, pwr.TimeStamp
FROM PipeWeldREV pwr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelCondensed">
        <![CDATA[
        SELECT Area, PieceNumber, 
sum(ShakeQuantity) AS ShakeQuantity, 
sum(ErectQuantity) AS ErectQuantity, 
sum(BoltoutQuantity) AS BoltoutQuantity, 
sum(ImpQuantity) AS ImpQuantity, 
sum(WeldQuantity) AS WeldQuantity, 
sum(SellQuantity) AS SellQuantity, 
sum(DemoQuantity) AS DemoQuantity, 
sum(MiscQuantity) AS MiscQuantity, 
ReceivedTime 
FROM(SELECT  
stls.FAArea AS Area, stls.FAPieceNumber AS PieceNumber, 
sum(COALESCE(stls.FAShakeQuantity,0)) AS ShakeQuantity,
0 AS ErectQuantity,
0 AS BoltoutQuantity,
0 AS ImpQuantity,
0 AS WeldQuantity,
0 AS SellQuantity,
0 AS DemoQuantity,
0 AS MiscQuantity,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stle.FAArea AS Area, stle.FAPieceNumber AS PieceNumber,
0,
TRUNCATE(sum(COALESCE(stle.FAErectQuantity * stle.FAErectPercent,0)),2),
0,0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID 

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlb.FAArea AS Area, stlb.FAPieceNumber AS PieceNumber,
0,0,
TRUNCATE(sum(COALESCE(stlb.FABoltoutQuantity * stlb.FABoltoutPercent,0)),2),
0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stli.FAArea AS Area, stli.FAPieceNumber AS PieceNumber,
0,0,0,
TRUNCATE(sum(COALESCE(stli.FAImpQuantity * stli.FAImpPercent,0)),2),
0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlw.FAArea AS Area, stlw.FAPieceNumber AS PieceNumber,
0,0,0,0,
TRUNCATE(sum(COALESCE(stlw.FAWeldQuantity * stlw.FAWeldPercent,0)),2),
0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlsell.FAArea AS Area, stlsell.FAPieceNumber AS PieceNumber,
0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlsell.FASellQuantity,0)),2),
0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID 

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stld.DemoArea AS Area, 0 AS PieceNumber,
0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stld.DemoQuantity,0)),2),
0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlm.MiscArea AS Area, stlm.MiscPieceNumber AS PieceNumber,
0,0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlm.MiscQuantity,0)),2),

sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)
) t
GROUP BY t.Area, t.PieceNumber, Date(t.ReceivedTime)
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelCondensed__count">
        <![CDATA[
        select count(*) from (SELECT Area, PieceNumber, 
sum(ShakeQuantity) AS ShakeQuantity, 
sum(ErectQuantity) AS ErectQuantity, 
sum(BoltoutQuantity) AS BoltoutQuantity, 
sum(ImpQuantity) AS ImpQuantity, 
sum(WeldQuantity) AS WeldQuantity, 
sum(SellQuantity) AS SellQuantity, 
sum(DemoQuantity) AS DemoQuantity, 
sum(MiscQuantity) AS MiscQuantity, 
ReceivedTime 
FROM(SELECT  
stls.FAArea AS Area, stls.FAPieceNumber AS PieceNumber, 
sum(COALESCE(stls.FAShakeQuantity,0)) AS ShakeQuantity,
0 AS ErectQuantity,
0 AS BoltoutQuantity,
0 AS ImpQuantity,
0 AS WeldQuantity,
0 AS SellQuantity,
0 AS DemoQuantity,
0 AS MiscQuantity,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stle.FAArea AS Area, stle.FAPieceNumber AS PieceNumber,
0,
TRUNCATE(sum(COALESCE(stle.FAErectQuantity * stle.FAErectPercent,0)),2),
0,0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID 

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlb.FAArea AS Area, stlb.FAPieceNumber AS PieceNumber,
0,0,
TRUNCATE(sum(COALESCE(stlb.FABoltoutQuantity * stlb.FABoltoutPercent,0)),2),
0,0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stli.FAArea AS Area, stli.FAPieceNumber AS PieceNumber,
0,0,0,
TRUNCATE(sum(COALESCE(stli.FAImpQuantity * stli.FAImpPercent,0)),2),
0,0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlw.FAArea AS Area, stlw.FAPieceNumber AS PieceNumber,
0,0,0,0,
TRUNCATE(sum(COALESCE(stlw.FAWeldQuantity * stlw.FAWeldPercent,0)),2),
0,0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlsell.FAArea AS Area, stlsell.FAPieceNumber AS PieceNumber,
0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlsell.FASellQuantity,0)),2),
0,0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID 

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stld.DemoArea AS Area, 0 AS PieceNumber,
0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stld.DemoQuantity,0)),2),
0,
sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)   



UNION 



SELECT  
stlm.MiscArea AS Area, stlm.MiscPieceNumber AS PieceNumber,
0,0,0,0,0,0,0,
TRUNCATE(sum(COALESCE(stlm.MiscQuantity,0)),2),

sd.ReceivedTime

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate

GROUP BY Area, PieceNumber, Date(sd.ReceivedTime)
) t
GROUP BY t.Area, t.PieceNumber, Date(t.ReceivedTime)) wmTempTable
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="UpdateSteelBoltout">
        <![CDATA[
        UPDATE `SteelBoltOut` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FABoltOutQuantity`= :Quantity,
`FABoltOutPercent`= :Percent,
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSubDetails">
        <![CDATA[
        UPDATE SubsDetails
SET
Temperature = :Temp,
Precipitation = :Precipitation,
Wind = :Wind
WHERE SubmissionID = :SubmissionID
        ]]>
    <query-param name="Temp" type="java.lang.String"/>
    <query-param name="Precipitation" type="java.lang.String"/>
    <query-param name="Wind" type="java.lang.String"/>
    <query-param name="SubmissionID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UnLockSSActivity">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
SET sas.LockField = null
WHERE sas.ActivityID = :FieldActivityID
        ]]>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingSteelImpPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelImpHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelImpPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelImpHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageCivil">
        <![CDATA[
        SELECT ctd.UID, ctd.BidID, ctd.EWONumber, ctd.Scope, ctd.Phase, ctd.Stage, ctd.TestPackageNumber, ctd.CostCode, ctd.P6ID, ctd.AssignedContractor, ctd.Area, ctd.Location, ctd.Structure, ctd.Grouping, 
ctd.FoundationDescription, ctd.CU, ctd.P6Description, ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DrawingRev, ctd.DetailDrawingNumber, ctd.DetailRev, ctd.DetailName, ctd.Description, ctd.ActivityType, 
ctd.ActivitySubType, ctd.System, ctd.Service, ctd.TakeOffQuantity, ctd.QuantityUnit, ctd.EstimatedHours, 
ctd.WBS1, ctd.WBS2, ctd.WBS3, ctd.WBS4, ctd.WBS5, ctd.WBS6, ctd.WBS7, ctd.WBS8, ctd.WBS9, ctd.WBS10, 


count(ctd.BidID) AS SellPunchCount,
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,
sum(COALESCE(ercs.InstalledSellPunch,0)) AS SellPunchInstalled,

sum(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent') * COALESCE(ercs.InstalledSellPunch,0)) AS EarnedSellPunchHours,


ctd.Rev, ctd.TimeStamp

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
			FROM CivilSellPackage cs 
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)) ercs
	ON ercs.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"

WHERE ctd.TestPackageNumber = :TestPackage
GROUP BY BidID
ORDER By ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.UID, ctd.BidID, ctd.EWONumber, ctd.Scope, ctd.Phase, ctd.Stage, ctd.TestPackageNumber, ctd.CostCode, ctd.P6ID, ctd.AssignedContractor, ctd.Area, ctd.Location, ctd.Structure, ctd.Grouping, 
ctd.FoundationDescription, ctd.CU, ctd.P6Description, ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DrawingRev, ctd.DetailDrawingNumber, ctd.DetailRev, ctd.DetailName, ctd.Description, ctd.ActivityType, 
ctd.ActivitySubType, ctd.System, ctd.Service, ctd.TakeOffQuantity, ctd.QuantityUnit, ctd.EstimatedHours, 
ctd.WBS1, ctd.WBS2, ctd.WBS3, ctd.WBS4, ctd.WBS5, ctd.WBS6, ctd.WBS7, ctd.WBS8, ctd.WBS9, ctd.WBS10, 


count(ctd.BidID) AS SellPunchCount,
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,
sum(COALESCE(ercs.InstalledSellPunch,0)) AS SellPunchInstalled,

sum(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent') * COALESCE(ercs.InstalledSellPunch,0)) AS EarnedSellPunchHours,


ctd.Rev, ctd.TimeStamp

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
			FROM CivilSellPackage cs 
            JOIN SubmissionActivityStatus sas
				ON sas.ActivityID = cs.ActivityID AND sas.fk_ActivityStatus IN (5,12)) ercs
	ON ercs.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"

WHERE ctd.TestPackageNumber = :TestPackage
GROUP BY BidID
ORDER By ctd.EngDrawingNumber, ctd.SheetNumber, ctd.DetailDrawingNumber, ctd.DetailName, ctd.Description) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSettingCivilWork">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='CivilWorkHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesPipe">
        <![CDATA[
        SELECT sum(COALESCE(ptd.TakeOffQuantity,0)) AS TakeOffQuantity , ptd.QuantityUnit, 
IF(ptd.ECT = 'D', sum(COALESCE(ptd.EstimatedHours,0)), 
    sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),0)) 
)AS EstimatedHours
FROM PipeTrackerDetails ptd
WHERE BidID = :BidID
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesPipe__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE(ptd.TakeOffQuantity,0)) AS TakeOffQuantity , ptd.QuantityUnit, 
IF(ptd.ECT = 'D', sum(COALESCE(ptd.EstimatedHours,0)), 
    sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),0)) 
)AS EstimatedHours
FROM PipeTrackerDetails ptd
WHERE BidID = :BidID
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageSteel">
        <![CDATA[
        SELECT std.BidID, std.TestPackageNumber,

### Count ####
count(std.BidID) AS SellPunchCount,

### Hours ####
CONVERT(sum(std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')), DECIMAL(16,6)) AS SellPunchHours,

### Installed Count ###
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,

### Earned Hours ###
CONVERT(sum(er.EarnedSellHours), DECIMAL(16,6)) AS EarnedSellPunchHours,

### Loose Hours ###
CONVERT(sum(
(
IF(std.ActivityType = "E"
,/*TRUE*/
(std.SteelHours * (1-(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')))
,/*FALSE*/
std.SteelHours)
) 
- COALESCE(er.EarnedFAHours,0)
), DECIMAL(16,6)) AS LooseHours

FROM (SELECT BidID, TestPackageNumber, ActivityType, 
                                sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours,
        WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10
                                FROM SteelTrackerDetails 
                                GROUP BY BidID) std
        
LEFT JOIN SubmissionActivityStatus sas
                ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
        
### Earned/Installed Columns ###
LEFT JOIN (SELECT BidID, 

### Installed Quantities ###
sum(COALESCE(stlsell.FASellQuantity,0)) AS InstalledSell,

### Earned Hour Quantities ###
sum(IF((COALESCE(stlsell.FASellQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(FASellQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelSell stlsell
                                                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 65
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FASellQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelSell stlsell
                                                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 65
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / std.TakeOffQuantity) * stlsell.FASellQuantity,0))
)) AS EarnedSellHours,

(
sum(IF((COALESCE(stls.FAShakeQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(FAShakeQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelShake stls
                                                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 61
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
((SELECT COALESCE(sum(COALESCE(FAShakeQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelShake stls
                                                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 61
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity) * stls.FAShakeQuantity,0))
)) 
+
sum(IF((COALESCE(stle.FAErectQuantity,0) * COALESCE(stle.FAErectPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAErectQuantity,0) * COALESCE(FAErectPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelErect stle
                                                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 62
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FAErectQuantity,0) * COALESCE(FAErectPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelErect stle 
                                                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 62
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity) * (stle.FAErectQuantity * stle.FAErectPercent),0))
)) 
+
sum(IF((COALESCE(stlb.FABoltOutQuantity,0) * COALESCE(stlb.FABoltOutPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FABoltOutQuantity,0) * COALESCE(FABoltOutPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelBoltOut stlb
                                                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 63
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FABoltOutQuantity,0) * COALESCE(FABoltOutPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelBoltOut stlb
                                                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 63
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity) * (stlb.FABoltOutQuantity * stlb.FABoltOutPercent),0))
)) 
+
sum(IF((COALESCE(stli.FAImpQuantity,0) * COALESCE(stli.FAImpPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAImpQuantity,0) * COALESCE(FAImpPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelImp stli
                                                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 64
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FAImpQuantity,0) * COALESCE(FAImpPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelImp stli
                                                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 64
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity) * (stli.FAImpQuantity * stli.FAImpPercent),0))
)) 
+
sum(IF((COALESCE(stlw.FAWeldQuantity,0) * COALESCE(stlw.FAWeldPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAWeldQuantity,0) * COALESCE(FAWeldPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelWeld stlw
                                                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 68
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.WeldCount,/*Is New + cumlitive quantity greater then WeldCount*/
/*TRUE*/ 
GREATEST((COALESCE(std.WeldCount,0) - 
(SELECT COALESCE(sum(COALESCE(FAWeldQuantity,0) * COALESCE(FAWeldPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelWeld stlw
                                                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 68
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.WeldHours / std.WeldCount),
/*FALSE*/
(COALESCE((std.WeldHours / std.WeldCount) * (stlw.FAWeldQuantity * stlw.FAWeldPercent),0))
)) 
+
sum(IF((COALESCE(stld.DemoQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(DemoQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelDemo stld
                                                ON stld.ActivityID = sas.ActivityID 
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 67
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(DemoQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelDemo stld
                                                ON stld.ActivityID = sas.ActivityID
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 67
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.DemoHours / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.DemoHours / std.TakeOffQuantity) * stld.DemoQuantity ,0))
)) 
+
sum(IF((COALESCE(stlm.MiscQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(MiscQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelMisc stlm
                                                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 96
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(MiscQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelMisc stlm
                                                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 96
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.MiscHours / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.MiscHours / std.TakeOffQuantity) * stlm.MiscQuantity ,0))
))
) AS EarnedFAHours


FROM SubmissionActivityStatus sas
        
JOIN (SELECT BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours, sum(WeldCount) AS WeldCount, 
                                IF(ActivityType = "D", sum(SteelHours), 0) AS DemoHours,
                                IF(ActivityType = "Misc", sum(SteelHours), 0) AS MiscHours
                                FROM SteelTrackerDetails 
                                GROUP BY BidID) std
                ON std.BidID = sas.fk_BidIDAssigned

LEFT JOIN SteelShake stls
                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0

LEFT JOIN SteelErect stle
                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0

LEFT JOIN SteelBoltOut stlb
                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0

LEFT JOIN SteelImp stli
                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
    
LEFT JOIN SteelWeld stlw
                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0

LEFT JOIN SteelSell stlsell
                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0

LEFT JOIN SteelDemo stld
                ON stld.ActivityID = sas.ActivityID
    
LEFT JOIN SteelMisc stlm
                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

WHERE sas.fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (60,61,62,63,64,65,66,67,68,69,96) 
GROUP BY std.BidID
) er
                ON er.BidID = std.BidID
  
WHERE std.TestPackageNumber = :TestPackage
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.BidID, std.TestPackageNumber,

### Count ####
count(std.BidID) AS SellPunchCount,

### Hours ####
CONVERT(sum(std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')), DECIMAL(16,6)) AS SellPunchHours,

### Installed Count ###
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,

### Earned Hours ###
CONVERT(sum(er.EarnedSellHours), DECIMAL(16,6)) AS EarnedSellPunchHours,

### Loose Hours ###
CONVERT(sum(
(
IF(std.ActivityType = "E"
,/*TRUE*/
(std.SteelHours * (1-(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent')))
,/*FALSE*/
std.SteelHours)
) 
- COALESCE(er.EarnedFAHours,0)
), DECIMAL(16,6)) AS LooseHours

FROM (SELECT BidID, TestPackageNumber, ActivityType, 
                                sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours,
        WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10
                                FROM SteelTrackerDetails 
                                GROUP BY BidID) std
        
LEFT JOIN SubmissionActivityStatus sas
                ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
        
### Earned/Installed Columns ###
LEFT JOIN (SELECT BidID, 

### Installed Quantities ###
sum(COALESCE(stlsell.FASellQuantity,0)) AS InstalledSell,

### Earned Hour Quantities ###
sum(IF((COALESCE(stlsell.FASellQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(FASellQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelSell stlsell
                                                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 65
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FASellQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelSell stlsell
                                                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 65
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent') / std.TakeOffQuantity) * stlsell.FASellQuantity,0))
)) AS EarnedSellHours,

(
sum(IF((COALESCE(stls.FAShakeQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(FAShakeQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelShake stls
                                                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 61
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
((SELECT COALESCE(sum(COALESCE(FAShakeQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelShake stls
                                                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 61
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent') / std.TakeOffQuantity) * stls.FAShakeQuantity,0))
)) 
+
sum(IF((COALESCE(stle.FAErectQuantity,0) * COALESCE(stle.FAErectPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAErectQuantity,0) * COALESCE(FAErectPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelErect stle
                                                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 62
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FAErectQuantity,0) * COALESCE(FAErectPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelErect stle 
                                                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 62
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent') / std.TakeOffQuantity) * (stle.FAErectQuantity * stle.FAErectPercent),0))
)) 
+
sum(IF((COALESCE(stlb.FABoltOutQuantity,0) * COALESCE(stlb.FABoltOutPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FABoltOutQuantity,0) * COALESCE(FABoltOutPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelBoltOut stlb
                                                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 63
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FABoltOutQuantity,0) * COALESCE(FABoltOutPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelBoltOut stlb
                                                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 63
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent') / std.TakeOffQuantity) * (stlb.FABoltOutQuantity * stlb.FABoltOutPercent),0))
)) 
+
sum(IF((COALESCE(stli.FAImpQuantity,0) * COALESCE(stli.FAImpPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAImpQuantity,0) * COALESCE(FAImpPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelImp stli
                                                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 64
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(FAImpQuantity,0) * COALESCE(FAImpPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelImp stli
                                                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 64
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.SteelHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent') / std.TakeOffQuantity) * (stli.FAImpQuantity * stli.FAImpPercent),0))
)) 
+
sum(IF((COALESCE(stlw.FAWeldQuantity,0) * COALESCE(stlw.FAWeldPercent,0) + 
(SELECT COALESCE(sum(COALESCE(FAWeldQuantity,0) * COALESCE(FAWeldPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelWeld stlw
                                                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 68
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.WeldCount,/*Is New + cumlitive quantity greater then WeldCount*/
/*TRUE*/ 
GREATEST((COALESCE(std.WeldCount,0) - 
(SELECT COALESCE(sum(COALESCE(FAWeldQuantity,0) * COALESCE(FAWeldPercent,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelWeld stlw
                                                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 68
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.WeldHours / std.WeldCount),
/*FALSE*/
(COALESCE((std.WeldHours / std.WeldCount) * (stlw.FAWeldQuantity * stlw.FAWeldPercent),0))
)) 
+
sum(IF((COALESCE(stld.DemoQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(DemoQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelDemo stld
                                                ON stld.ActivityID = sas.ActivityID 
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 67
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(DemoQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelDemo stld
                                                ON stld.ActivityID = sas.ActivityID
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 67
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.DemoHours / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.DemoHours / std.TakeOffQuantity) * stld.DemoQuantity ,0))
)) 
+
sum(IF((COALESCE(stlm.MiscQuantity,0) + 
(SELECT COALESCE(sum(COALESCE(MiscQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelMisc stlm
                                                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 96
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID)
) > std.TakeOffQuantity,/*Is New + cumlitive quantity greater then TakeOff*/
/*TRUE*/ 
GREATEST((COALESCE(std.TakeOffQuantity,0) - 
(SELECT COALESCE(sum(COALESCE(MiscQuantity,0)),0) AS CQuantity
                FROM SubmissionActivityStatus sas
                                LEFT JOIN SteelMisc stlm
                                                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0
                WHERE sas.fk_ActivityStatus IN (5,12)
                AND sas.ActivityType = 96
                AND sas.ActivityID < sas.ActivityID
                AND sas.fk_BidIDAssigned = std.BidID))
,0) * (std.MiscHours / std.TakeOffQuantity),
/*FALSE*/
(COALESCE((std.MiscHours / std.TakeOffQuantity) * stlm.MiscQuantity ,0))
))
) AS EarnedFAHours


FROM SubmissionActivityStatus sas
        
JOIN (SELECT BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours, sum(WeldCount) AS WeldCount, 
                                IF(ActivityType = "D", sum(SteelHours), 0) AS DemoHours,
                                IF(ActivityType = "Misc", sum(SteelHours), 0) AS MiscHours
                                FROM SteelTrackerDetails 
                                GROUP BY BidID) std
                ON std.BidID = sas.fk_BidIDAssigned

LEFT JOIN SteelShake stls
                ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0

LEFT JOIN SteelErect stle
                ON stle.ActivityID = sas.ActivityID AND stle.FARework = 0

LEFT JOIN SteelBoltOut stlb
                ON stlb.ActivityID = sas.ActivityID AND stlb.FARework = 0

LEFT JOIN SteelImp stli
                ON stli.ActivityID = sas.ActivityID AND stli.FARework = 0
    
LEFT JOIN SteelWeld stlw
                ON stlw.ActivityID = sas.ActivityID AND stlw.FARework = 0

LEFT JOIN SteelSell stlsell
                ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0

LEFT JOIN SteelDemo stld
                ON stld.ActivityID = sas.ActivityID
    
LEFT JOIN SteelMisc stlm
                ON stlm.ActivityID = sas.ActivityID AND stlm.MiscRework = 0

WHERE sas.fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (60,61,62,63,64,65,66,67,68,69,96) 
GROUP BY std.BidID
) er
                ON er.BidID = std.BidID
  
WHERE std.TestPackageNumber = :TestPackage) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeSupport">
        <![CDATA[
        SELECT psu.* 
FROM PipeSupports psu
WHERE ID = :RowID

UNION ALL

SELECT  psur.fk_OrgActivityId, psur.ActivityID, 
psur.SupportType, psur.SupportPartNumber, psur.SupportQuantity, psur.SupportDrawingNumber, psur.SupportLineNumber, psur.SupportSheetNumber, psur.SupportTimeInForm, psur.SupportComplete, psur.SupportShared, psur.SupportPercentCompleted, psur.SupportRework, psur.SupportNotes,
psur.ActivityType, psur.Rev, psur.TimeStamp
FROM PipeSupportsREV psur
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeSupport__count">
        <![CDATA[
        select count(*) from (SELECT psu.* 
FROM PipeSupports psu
WHERE ID = :RowID

UNION ALL

SELECT  psur.fk_OrgActivityId, psur.ActivityID, 
psur.SupportType, psur.SupportPartNumber, psur.SupportQuantity, psur.SupportDrawingNumber, psur.SupportLineNumber, psur.SupportSheetNumber, psur.SupportTimeInForm, psur.SupportComplete, psur.SupportShared, psur.SupportPercentCompleted, psur.SupportRework, psur.SupportNotes,
psur.ActivityType, psur.Rev, psur.TimeStamp
FROM PipeSupportsREV psur
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelErectQuantity">
        <![CDATA[
        UPDATE `SteelErect` 
SET 

`FAErectQuantity`= :Quantity,
`FAErectPercent`= :Percent

WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelShake">
        <![CDATA[
        UPDATE `SteelShake` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FAShakeQuantity`= :Quantity, 
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeCTOPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='ClientTurnoverPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetSettingSteelErectPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelErectHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelErectPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelErectHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilWork">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'CivilWorkHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilWork__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'CivilWorkHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSteelShakeQuantity">
        <![CDATA[
        UPDATE `SteelShake` 
SET 

`FAShakeQuantity`= :Quantity

WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelImp">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelImpHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetSettingPipeMechPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'MechHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeMechPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'MechHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidActivityMatchesPipe">
        <![CDATA[
        SELECT min(ptd.ID) AS ID, ptd.BidID, ptd.Scope, ptd.Phase, ptd.Area, ptd.Location, ptd.Structure, ptd.Elevation, ptd.CU, ptd.P6ID, ptd.P6Description, ptd.Stage, ptd.TestPackageNumber, ptd.AssignedContractor, ptd.CostCode, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
ptd.RevisionNumber, ptd.System, ptd.Service, ptd.ClientPipeSpec, ptd.MaterialCode, ptd.Description, ptd.ComponentNumber, ptd.ECT, ptd.PipingActivityType, ptd.PipeSize, sum(ptd.TakeOffQuantity) AS TakeOffQuantity, ptd.QuantityUnit, sum(ptd.EstimatedHours) AS EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

sum(COALESCE(ptd.TakeOffQuantity,0)
-COALESCE(er.InstalledFootage,0)
-COALESCE(er.InstalledBoltUps,0)
-COALESCE(er.InstalledWelds,0)
-COALESCE(er.InstalledCuts,0)
-COALESCE(er.InstalledTrim,0)
-COALESCE(er.InstalledSupports,0)
-COALESCE(er.InstalledMisc,0)
-COALESCE(er.InstalledDemo,0)) AS RemainingQuant


FROM PipeTrackerDetails ptd

	LEFT JOIN (SELECT ptd.ID, ptd.BidID,
sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS InstalledBoltUps, 
sum(COALESCE((pw.WeldPercentCompleted * .01),0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
sum(COALESCE((pcut.WeldPercentCompleted * .01),0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledCuts,
sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledSupports,
sum(COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0)) AS InstalledMisc,
sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo


FROM SubmissionActivityStatus sas
	JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PipeErection pe
		ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0
	LEFT JOIN PipeBoltUp pb
		ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
	LEFT JOIN PipeWeld pw
		ON pw.ActivityID = sas.ActivityID AND pw.WeldRework = 0 AND sas.ActivityType = 22
	LEFT JOIN PipeWeld pcut
		ON pcut.ActivityID = sas.ActivityID AND pcut.WeldRework = 0 AND sas.ActivityType = 23
	LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID and psu.SupportRework = 0
	LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID
    LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID AND pm.MiscRework = 0
        

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID)ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
	LEFT JOIN PipeMisc pme
		ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'PE'
	LEFT JOIN PipeMisc pmb
		ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'BU'
	LEFT JOIN PipeMisc pmw
		ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'W'
	LEFT JOIN PipeMisc pmcut
		ON pmcut.ActivityID = sas.ActivityID AND ptd.ECT != 'D' AND ptd.PipingActivityType = 'CUT'
	LEFT JOIN PipeMisc pmt
		ON pm.ActivityID = sas.ActivityID AND ptd.ECT = 'T' AND ptd.PipingActivityType != 'MISC' AND ptd.PipingActivityType != 'S'
	LEFT JOIN PipeMisc pmsu
		ON pm.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'S'
	LEFT JOIN PipeMisc pmd
		ON pm.ActivityID = sas.ActivityID AND ptd.ECT = 'D'

        
WHERE fk_ActivityStatus IN (5,12)
GROUP BY ptd.BidID) er
		ON er.ID = ptd.ID
WHERE `LineNumber` LIKE :LineNumber
AND `EngDrawingNumber` LIKE :DrawingNumber
AND `SheetNumber` LIKE :SheetNumber
AND `ECT` LIKE :ECT
AND `PipingActivityType` LIKE :ECTType

GROUP BY ptd.BidID
        ]]>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="ECT" type="java.lang.String"/>
    <query-param name="ECTType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesPipe__count">
        <![CDATA[
        select count(*) from (SELECT min(ptd.ID) AS ID, ptd.BidID, ptd.Scope, ptd.Phase, ptd.Area, ptd.Location, ptd.Structure, ptd.Elevation, ptd.CU, ptd.P6ID, ptd.P6Description, ptd.Stage, ptd.TestPackageNumber, ptd.AssignedContractor, ptd.CostCode, ptd.LineNumber, ptd.EngDrawingNumber, ptd.SheetNumber, 
ptd.RevisionNumber, ptd.System, ptd.Service, ptd.ClientPipeSpec, ptd.MaterialCode, ptd.Description, ptd.ComponentNumber, ptd.ECT, ptd.PipingActivityType, ptd.PipeSize, sum(ptd.TakeOffQuantity) AS TakeOffQuantity, ptd.QuantityUnit, sum(ptd.EstimatedHours) AS EstimatedHours, 
ptd.WBS1, ptd.WBS2, ptd.WBS3, ptd.WBS4, ptd.WBS5, ptd.WBS6, ptd.WBS7, ptd.WBS8, ptd.WBS9, ptd.WBS10, ptd.Rev, ptd.TimeStamp,

sum(COALESCE(ptd.TakeOffQuantity,0)
-COALESCE(er.InstalledFootage,0)
-COALESCE(er.InstalledBoltUps,0)
-COALESCE(er.InstalledWelds,0)
-COALESCE(er.InstalledCuts,0)
-COALESCE(er.InstalledTrim,0)
-COALESCE(er.InstalledSupports,0)
-COALESCE(er.InstalledMisc,0)
-COALESCE(er.InstalledDemo,0)) AS RemainingQuant


FROM PipeTrackerDetails ptd

	LEFT JOIN (SELECT ptd.ID, ptd.BidID,
sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS InstalledBoltUps, 
sum(COALESCE((pw.WeldPercentCompleted * .01),0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
sum(COALESCE((pcut.WeldPercentCompleted * .01),0) + COALESCE(pmcut.MiscQuantity,0)) AS InstalledCuts,
sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmsu.MiscQuantity,0)) AS InstalledSupports,
sum(COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0)) AS InstalledMisc,
sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo


FROM SubmissionActivityStatus sas
	JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN PipeErection pe
		ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0
	LEFT JOIN PipeBoltUp pb
		ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
	LEFT JOIN PipeWeld pw
		ON pw.ActivityID = sas.ActivityID AND pw.WeldRework = 0 AND sas.ActivityType = 22
	LEFT JOIN PipeWeld pcut
		ON pcut.ActivityID = sas.ActivityID AND pcut.WeldRework = 0 AND sas.ActivityType = 23
	LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID and psu.SupportRework = 0
	LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID
    LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID AND pm.MiscRework = 0
        

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID)ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
	LEFT JOIN PipeMisc pme
		ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'PE'
	LEFT JOIN PipeMisc pmb
		ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'BU'
	LEFT JOIN PipeMisc pmw
		ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'W'
	LEFT JOIN PipeMisc pmcut
		ON pmcut.ActivityID = sas.ActivityID AND ptd.ECT != 'D' AND ptd.PipingActivityType = 'CUT'
	LEFT JOIN PipeMisc pmt
		ON pm.ActivityID = sas.ActivityID AND ptd.ECT = 'T' AND ptd.PipingActivityType != 'MISC' AND ptd.PipingActivityType != 'S'
	LEFT JOIN PipeMisc pmsu
		ON pm.ActivityID = sas.ActivityID AND ptd.PipingActivityType = 'S'
	LEFT JOIN PipeMisc pmd
		ON pm.ActivityID = sas.ActivityID AND ptd.ECT = 'D'

        
WHERE fk_ActivityStatus IN (5,12)
GROUP BY ptd.BidID) er
		ON er.ID = ptd.ID
WHERE `LineNumber` LIKE :LineNumber
AND `EngDrawingNumber` LIKE :DrawingNumber
AND `SheetNumber` LIKE :SheetNumber
AND `ECT` LIKE :ECT
AND `PipingActivityType` LIKE :ECTType

GROUP BY ptd.BidID) wmTempTable
        ]]>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="ECT" type="java.lang.String"/>
    <query-param name="ECTType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSteelWeldQuantity">
        <![CDATA[
        UPDATE `SteelWeld` 
SET 

`FAWeldQuantity`= :Quantity,
`FAWeldPercent`= :Percent
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelImp">
        <![CDATA[
        UPDATE `SteelImp` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FAImpQuantity`= :Quantity,
`FAImpPercent`= :Percent,
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeBoltupQuantity">
        <![CDATA[
        UPDATE PipeBoltUp 
SET BoltUpQuantity = :BoltUpQuantity
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="BoltUpQuantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelSell">
        <![CDATA[
        UPDATE `SteelSell` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FASellQuantity`= :Quantity,
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingPipeTestingPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'TestingHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeTestingPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'TestingHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetBidActivityMatchesCivil">
        <![CDATA[
        SELECT 
min(UID) AS UID, min(BidID) AS BidID, EWONumber, Scope, Phase, Stage, TestPackageNumber, CostCode, P6ID, AssignedContractor, Area, Location, Structure, Grouping, FoundationDescription, CU, P6Description, 
EngDrawingNumber, SheetNumber, DrawingRev, DetailDrawingNumber, DetailRev, DetailName, Description, ActivityType, ActivitySubType, System, Service, 
sum(TakeOffQuantity) AS TakeOffQuantity, QuantityUnit, sum(EstimatedHours) AS EstimatedHours, 
WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10

FROM CivilTrackerDetails
WHERE BidID = :BidID
OR 
(FoundationDescription LIKE :Foundation
AND EngDrawingNumber LIKE :DrawingNumber
AND DetailDrawingNumber LIKE :DetailDrawingNumber)
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Foundation" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="DetailDrawingNumber" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesCivil__count">
        <![CDATA[
        select count(*) from (SELECT 
min(UID) AS UID, min(BidID) AS BidID, EWONumber, Scope, Phase, Stage, TestPackageNumber, CostCode, P6ID, AssignedContractor, Area, Location, Structure, Grouping, FoundationDescription, CU, P6Description, 
EngDrawingNumber, SheetNumber, DrawingRev, DetailDrawingNumber, DetailRev, DetailName, Description, ActivityType, ActivitySubType, System, Service, 
sum(TakeOffQuantity) AS TakeOffQuantity, QuantityUnit, sum(EstimatedHours) AS EstimatedHours, 
WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10

FROM CivilTrackerDetails
WHERE BidID = :BidID
OR 
(FoundationDescription LIKE :Foundation
AND EngDrawingNumber LIKE :DrawingNumber
AND DetailDrawingNumber LIKE :DetailDrawingNumber)
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="Foundation" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="DetailDrawingNumber" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSteelErect">
        <![CDATA[
        UPDATE `SteelErect` 
SET 
`FAArea`= :Area, 
`FAPieceNumber`= :Piece, 
`FAErectQuantity`= :Quantity,
`FAErectPercent`= :Percent,
`FARework`= :Rework, 
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="Piece" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeEWO">
        <![CDATA[
        UPDATE PipeEWO
SET 

EWONumber = :EWONumber,
EWOHours = :EWOHours,
EWODrawingNumber = :DrawingNumber,
EWOLineNumber = :LineNumber,
EWOSheetNumber = :SheetNumber,
EWORework = :Rework,
EWONotes = :Notes
WHERE ActivityID= :FieldActivityID
        ]]>
    <query-param name="EWONumber" type="java.lang.String"/>
    <query-param name="EWOHours" type="java.lang.Integer"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityLFInstalled">
        <![CDATA[
        SELECT sum(
COALESCE(pe.ErectionLengthSpool1,0) + 
COALESCE(pe.ErectionLengthSpool2,0) + 
COALESCE(pe.ErectionLengthSpool3,0) + 
COALESCE(pe.ErectionLengthSpool4,0) + 
COALESCE(pe.ErectionLengthSpool5,0) + 
COALESCE(pe.ErectionLengthSpool6,0) +
COALESCE(pme.MiscQuantity,0)
) AS Total 
FROM SubmissionActivityStatus sas

	LEFT JOIN PipeErection pe
				ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0
		
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
    LEFT JOIN PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "PE" AND pme.MiscRework = 0

WHERE sas.ActivityType IN (11, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityLFInstalled__count">
        <![CDATA[
        select count(*) from (SELECT sum(
COALESCE(pe.ErectionLengthSpool1,0) + 
COALESCE(pe.ErectionLengthSpool2,0) + 
COALESCE(pe.ErectionLengthSpool3,0) + 
COALESCE(pe.ErectionLengthSpool4,0) + 
COALESCE(pe.ErectionLengthSpool5,0) + 
COALESCE(pe.ErectionLengthSpool6,0) +
COALESCE(pme.MiscQuantity,0)
) AS Total 
FROM SubmissionActivityStatus sas

	LEFT JOIN PipeErection pe
				ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0
		
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
    LEFT JOIN PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "PE" AND pme.MiscRework = 0

WHERE sas.ActivityType IN (11, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelSell">
        <![CDATA[
        SELECT stlsell.* 
FROM SteelSell stlsell
WHERE ID = :RowID

UNION ALL

SELECT stlsellr.fk_OrgActivityId, stlsellr.ActivityID, stlsellr.FAArea, stlsellr.FAPieceNumber, stlsellr.FASellQuantity, stlsellr.FARework, stlsellr.FANotes, stlsellr.ActivityType, stlsellr.FATimeInForm, stlsellr.Rev, stlsellr.TimeStamp
FROM SteelSellREV stlsellr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelSell__count">
        <![CDATA[
        select count(*) from (SELECT stlsell.* 
FROM SteelSell stlsell
WHERE ID = :RowID

UNION ALL

SELECT stlsellr.fk_OrgActivityId, stlsellr.ActivityID, stlsellr.FAArea, stlsellr.FAPieceNumber, stlsellr.FASellQuantity, stlsellr.FARework, stlsellr.FANotes, stlsellr.ActivityType, stlsellr.FATimeInForm, stlsellr.Rev, stlsellr.TimeStamp
FROM SteelSellREV stlsellr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeRFTPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='CompleteForTestPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdateCivilMisc">
        <![CDATA[
        UPDATE `CivilMisc` 
SET 
`MiscFoundation` = :Foundation,
`MiscDrawingNumber` = :Drawing,
`MiscDetailDrawingNumber` = :DetailDrawing,
`MiscPercentComplete`= :Percent,
`MiscRework` = :Rework,
`MiscNotes` = :Notes
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Foundation" type="java.lang.String"/>
    <query-param name="Drawing" type="java.lang.String"/>
    <query-param name="DetailDrawing" type="java.lang.String"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitySupportsInstalled">
        <![CDATA[
        SELECT sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID AND psu.SupportRework = 0
        
	LEFT JOIN PipeMisc pmpsu
		ON pmpsu.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "S" AND pmpsu.MiscRework = 0

WHERE sas.ActivityType IN (32, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitySupportsInstalled__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
	LEFT JOIN PipeSupports psu
		ON psu.ActivityID = sas.ActivityID AND psu.SupportRework = 0
        
	LEFT JOIN PipeMisc pmpsu
		ON pmpsu.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "S" AND pmpsu.MiscRework = 0

WHERE sas.ActivityType IN (32, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="CreateSSNote">
        <![CDATA[
        INSERT INTO SASNotes (`ActivityID`, `UserID` ,`Notes`) 
VALUES (:FieldActivityID, :CreatedBy ,:Note)
        ]]>
    <query-param name="FieldActivityID" type="java.lang.String"/>
    <query-param name="CreatedBy" type="java.lang.Integer"/>
    <query-param name="Note" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSettingPipeMechPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='MechHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetSettingPipeCTOPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'ClientTurnoverPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeCTOPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'ClientTurnoverPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSettingPipeHydroPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='HydroHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeMisc">
        <![CDATA[
        SELECT pm.* 
FROM PipeMisc pm
WHERE ID = :RowID

UNION ALL

SELECT  pmr.fk_OrgActivityId, pmr.ActivityID, 
pmr.MiscDrawingNumber, pmr.MiscLineNumber, pmr.MiscSheetNumber, pmr.MiscTimeInForm, pmr.MiscQuantity, pmr.MiscRework, pmr.MiscNotes,
pmr.ActivityType, pmr.Rev, pmr.TimeStamp
FROM PipeMiscREV pmr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeMisc__count">
        <![CDATA[
        select count(*) from (SELECT pm.* 
FROM PipeMisc pm
WHERE ID = :RowID

UNION ALL

SELECT  pmr.fk_OrgActivityId, pmr.ActivityID, 
pmr.MiscDrawingNumber, pmr.MiscLineNumber, pmr.MiscSheetNumber, pmr.MiscTimeInForm, pmr.MiscQuantity, pmr.MiscRework, pmr.MiscNotes,
pmr.ActivityType, pmr.Rev, pmr.TimeStamp
FROM PipeMiscREV pmr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateCivilFA">
        <![CDATA[
        UPDATE `CivilFA` 
SET 
`FADescription`= :Description, 
`FAFoundation`= :Foundation, 
`FADrawingNumber`= :Drawing,
`FADetailDrawingNumber`= :DetailDrawing,
`FAPercentComplete`= :Percent,
`FAQuantity`= :Quantity,
`FARework`= :Rework,
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Description" type="java.lang.String"/>
    <query-param name="Foundation" type="java.lang.String"/>
    <query-param name="Drawing" type="java.lang.String"/>
    <query-param name="DetailDrawing" type="java.lang.String"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelWeld">
        <![CDATA[
        SELECT stlw.* 
FROM SteelWeld stlw
WHERE ID = :RowID

UNION ALL

SELECT stlwr.fk_OrgActivityId, stlwr.ActivityID, stlwr.FAArea, stlwr.FAPieceNumber, stlwr.FAWeldQuantity, stlwr.FAWeldPercent, stlwr.FARework, stlwr.FANotes, stlwr.ActivityType, stlwr.FATimeInForm, stlwr.Rev, stlwr.TimeStamp
FROM SteelWeldREV stlwr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelWeld__count">
        <![CDATA[
        select count(*) from (SELECT stlw.* 
FROM SteelWeld stlw
WHERE ID = :RowID

UNION ALL

SELECT stlwr.fk_OrgActivityId, stlwr.ActivityID, stlwr.FAArea, stlwr.FAPieceNumber, stlwr.FAWeldQuantity, stlwr.FAWeldPercent, stlwr.FARework, stlwr.FANotes, stlwr.ActivityType, stlwr.FATimeInForm, stlwr.Rev, stlwr.TimeStamp
FROM SteelWeldREV stlwr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelImp">
        <![CDATA[
        SELECT stli.* 
FROM SteelImp stli
WHERE ID = :RowID

UNION ALL

SELECT stlir.fk_OrgActivityId, stlir.ActivityID, stlir.FAArea, stlir.FAPieceNumber, stlir.FAImpQuantity, stlir.FAImpPercent, stlir.FARework, stlir.FANotes, stlir.ActivityType, stlir.FATimeInForm, stlir.Rev, stlir.TimeStamp
FROM SteelImpREV stlir
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelImp__count">
        <![CDATA[
        select count(*) from (SELECT stli.* 
FROM SteelImp stli
WHERE ID = :RowID

UNION ALL

SELECT stlir.fk_OrgActivityId, stlir.ActivityID, stlir.FAArea, stlir.FAPieceNumber, stlir.FAImpQuantity, stlir.FAImpPercent, stlir.FARework, stlir.FANotes, stlir.ActivityType, stlir.FATimeInForm, stlir.Rev, stlir.TimeStamp
FROM SteelImpREV stlir
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeWeldQuantity">
        <![CDATA[
        UPDATE PipeWeld
SET
WeldPercentCompleted = :PercentComplete
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="PercentComplete" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityMiscInstalled">
        <![CDATA[
        SELECT COALESCE(sum(pm.MiscQuantity),0) AS Total

FROM SubmissionActivityStatus sas

JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "MISC"  AND pm.MiscRework = 0

WHERE sas.fk_ActivityStatus IN (5,12) 
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityMiscInstalled__count">
        <![CDATA[
        select count(*) from (SELECT COALESCE(sum(pm.MiscQuantity),0) AS Total

FROM SubmissionActivityStatus sas

JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "MISC"  AND pm.MiscRework = 0

WHERE sas.fk_ActivityStatus IN (5,12) 
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeSupportsQuantity">
        <![CDATA[
        UPDATE PipeSupports
SET
SupportQuantity = :Quantity
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingCivilPunch">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'CivilSellPunchHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingCivilPunch__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'CivilSellPunchHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetQuantityDemoRemoved">
        <![CDATA[
        SELECT sum(COALESCE(pd.DemoQuantity, 0) + COALESCE(pmd.MiscQuantity,0)) AS Total
FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
    LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID 
        
	LEFT JOIN PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID AND ptd.ECT = "D" AND pmd.MiscRework = 0



WHERE sas.ActivityType IN (51,52,53,59,91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityDemoRemoved__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE(pd.DemoQuantity, 0) + COALESCE(pmd.MiscQuantity,0)) AS Total
FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
    LEFT JOIN PipeDemo pd
		ON pd.ActivityID = sas.ActivityID 
        
	LEFT JOIN PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID AND ptd.ECT = "D" AND pmd.MiscRework = 0



WHERE sas.ActivityType IN (51,52,53,59,91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReview">
        <![CDATA[
        SELECT sas.*, at.ActivityType AS ActivityTypeName, sd.ReceivedTime, u.FirstName, u.LastName, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
IF(sas.ActivityType IN (10,11,20,21,22,23,30,31,32,33,34,35,39,40,41,42,43,50,51,52,53,54,59,90,91,92,93),'PIPE',
IF(sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96),'STEEL',
IF(sas.ActivityType IN (70,71,72,77,97),'CIVIL',
IF(sas.ActivityType IN (80,81,82,83,84,85,98),'EQUIP.',''
)))) AS Craft
FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.ActivityType != 0
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)
ORDER BY sas.ActivityID DESC
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingReview__count">
        <![CDATA[
        select count(*) from (SELECT sas.*, at.ActivityType AS ActivityTypeName, sd.ReceivedTime, u.FirstName, u.LastName, CONCAT(u.FirstName, " ", u.LastName) AS NameFull, ats.Status,
IF(sas.ActivityType IN (10,11,20,21,22,23,30,31,32,33,34,35,39,40,41,42,43,50,51,52,53,54,59,90,91,92,93),'PIPE',
IF(sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96),'STEEL',
IF(sas.ActivityType IN (70,71,72,77,97),'CIVIL',
IF(sas.ActivityType IN (80,81,82,83,84,85,98),'EQUIP.',''
)))) AS Craft
FROM SubmissionActivityStatus sas
JOIN SubsDetails sd
	ON sd.SubmissionID = sas.SubmissionID
JOIN PSA.REF_ActivityTypes at
	ON  at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PSA.tblUserPSA u
	ON u.ID = sd.UserID

LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev


WHERE sas.ActivityType != 0
AND sas.fk_ActivityStatus in (1,4,6,8,10)
AND (tc.Superintendent = :SuperID OR tcr.Superintendent = :SuperID)
ORDER BY sas.ActivityID DESC) wmTempTable
        ]]>
    <query-param name="SuperID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageSteel">
        <![CDATA[
        SELECT DISTINCT std.Area, std.PieceMark, std.Description
FROM SteelTrackerDetails std
WHERE std.TestPackageNumber = :TestPackage
ORDER BY std.Area, std.PieceMark
        ]]>
    <query-param name="TestPackage" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT std.Area, std.PieceMark, std.Description
FROM SteelTrackerDetails std
WHERE std.TestPackageNumber = :TestPackage
ORDER BY std.Area, std.PieceMark) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelDemo">
        <![CDATA[
        SELECT stld.* 
FROM SteelDemo stld
WHERE ID = :RowID

UNION ALL

SELECT stldr.fk_OrgActivityId, stldr.ActivityID, stldr.DemoArea, stldr.DemoSteelType, stldr.DemoSize, stldr.DemoQuantity, stldr.DemoNotes, stldr.ActivityType, stldr.DemoTimeInForm, stldr.Rev, stldr.TimeStamp
FROM SteelDemoREV stldr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelDemo__count">
        <![CDATA[
        select count(*) from (SELECT stld.* 
FROM SteelDemo stld
WHERE ID = :RowID

UNION ALL

SELECT stldr.fk_OrgActivityId, stldr.ActivityID, stldr.DemoArea, stldr.DemoSteelType, stldr.DemoSize, stldr.DemoQuantity, stldr.DemoNotes, stldr.ActivityType, stldr.DemoTimeInForm, stldr.Rev, stldr.TimeStamp
FROM SteelDemoREV stldr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeErectionQuantity">
        <![CDATA[
        UPDATE PipeErection
SET
ErectionLengthSpool1 = :Spool1Length
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Spool1Length" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelSellPackage">
        <![CDATA[
        UPDATE `SteelSellPackage` 
SET 
`SellTestPackageNumber`= :TestPackage,
`SellNotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateEquipFA">
        <![CDATA[
        UPDATE `EquipFA` 
SET 
`FATagNumber`= :TagNumber, 
`FAActivitySelect`= :Activity, 
`FAQuantity`= :Quantity,
`FAPercentComplete`= :Percent,
`FARework`= :Rework,
`FANotes`= :Notes 
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="TagNumber" type="java.lang.String"/>
    <query-param name="Activity" type="java.lang.String"/>
    <query-param name="Quantity" type="java.math.BigDecimal"/>
    <query-param name="Percent" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.String"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteel">
        <![CDATA[
        SELECT sas.SubmissionID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

sum(COALESCE(stls.FAShakeQuantity,0)) AS ShakeQuantity,
sum(COALESCE(stle.FAErectQuantity,0)) AS ErectQuantity,
sum(COALESCE(stle.FAErectPercent,0)) AS ErectPercent,
sum(COALESCE(stlb.FABoltOutQuantity,0)) AS BoltoutQuantity,
sum(COALESCE(stlb.FABoltOutPercent,0)) AS BoltoutPercent,
sum(COALESCE(stli.FAImpQuantity,0)) AS ImpQuantity,
sum(COALESCE(stli.FAImpPercent,0)) AS ImpPercent,
sum(COALESCE(stlw.FAWeldQuantity,0)) AS WeldQuantity,
sum(COALESCE(stlw.FAWeldPercent,0)) AS WeldPercent,
sum(COALESCE(stlsell.FASellQuantity,0)) AS SellQuantity,
sum(COALESCE(stld.DemoQuantity,0)) AS DemoQuantity,
sum(COALESCE(stlm.MiscQuantity,0)) AS MiscQuantity


FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType IN (61,62,63,64,65,67,68,96)
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
    
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
    
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
    
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
    
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
    
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
    
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID



WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.SubmissionID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistorySteel__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,

sum(COALESCE(stls.FAShakeQuantity,0)) AS ShakeQuantity,
sum(COALESCE(stle.FAErectQuantity,0)) AS ErectQuantity,
sum(COALESCE(stle.FAErectPercent,0)) AS ErectPercent,
sum(COALESCE(stlb.FABoltOutQuantity,0)) AS BoltoutQuantity,
sum(COALESCE(stlb.FABoltOutPercent,0)) AS BoltoutPercent,
sum(COALESCE(stli.FAImpQuantity,0)) AS ImpQuantity,
sum(COALESCE(stli.FAImpPercent,0)) AS ImpPercent,
sum(COALESCE(stlw.FAWeldQuantity,0)) AS WeldQuantity,
sum(COALESCE(stlw.FAWeldPercent,0)) AS WeldPercent,
sum(COALESCE(stlsell.FASellQuantity,0)) AS SellQuantity,
sum(COALESCE(stld.DemoQuantity,0)) AS DemoQuantity,
sum(COALESCE(stlm.MiscQuantity,0)) AS MiscQuantity


FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType IN (61,62,63,64,65,67,68,96)
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
    
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
    
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
    
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
    
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
    
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
    
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID



WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sas.fk_ActivityStatus IN (5,12)
GROUP BY sas.SubmissionID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingProductivityIntervals">
        <![CDATA[
        SELECT 
s1.Value1 AS Interval1, 
s2.Value1 AS Interval2, 
s3.Value1 AS Interval3, 
s4.Value1 AS Interval4

FROM SETTINGS s1

JOIN SETTINGS s2
	ON s2.Label = 'ProductivityInterval2'
JOIN SETTINGS s3
	ON s3.Label = 'ProductivityInterval3'
JOIN SETTINGS s4
	ON s4.Label = 'ProductivityInterval4'

WHERE s1.Label = 'ProductivityInterval1'
        ]]>
    </sql-query>

    <sql-query name="GetSettingProductivityIntervals__count">
        <![CDATA[
        select count(*) from (SELECT 
s1.Value1 AS Interval1, 
s2.Value1 AS Interval2, 
s3.Value1 AS Interval3, 
s4.Value1 AS Interval4

FROM SETTINGS s1

JOIN SETTINGS s2
	ON s2.Label = 'ProductivityInterval2'
JOIN SETTINGS s3
	ON s3.Label = 'ProductivityInterval3'
JOIN SETTINGS s4
	ON s4.Label = 'ProductivityInterval4'

WHERE s1.Label = 'ProductivityInterval1') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdatePipeSupports">
        <![CDATA[
        UPDATE PipeSupports
SET
SupportPartNumber = :PartNumber,
SupportQuantity = :Quantity,
SupportDrawingNumber = :DrawingNumber,
SupportLineNumber = :LineNumber,
SupportSheetNumber = :Sheet,
SupportComplete = :Complete,
SupportShared = :Shared,
SupportPercentCompleted = :PercentComplete,
SupportRework = :Rework,
SupportNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="PartNumber" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="Sheet" type="java.lang.String"/>
    <query-param name="Complete" type="java.lang.Byte"/>
    <query-param name="Shared" type="java.lang.Byte"/>
    <query-param name="PercentComplete" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetPSRecentActivities">
        <![CDATA[
        SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW()
AND sas.fk_ActivityStatus IN (5,6,13)
AND sas.fk_LastModifiedBy = :UserID
ORDER BY sas.TimeStamp DESC
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetPSRecentActivities__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, at.ActivityType, ats.Status, sas.TimeStamp

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	on at.ID = sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats 
	on ats.ID = sas.fk_ActivityStatus

WHERE sas.TimeStamp BETWEEN now() - INTERVAL 2 DAY AND NOW()
AND sas.fk_ActivityStatus IN (5,6,13)
AND sas.fk_LastModifiedBy = :UserID
ORDER BY sas.TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesCivil">
        <![CDATA[
        SELECT ctd.BidID,
sum(ctd.TakeOffQuantity) AS TakeOffQuantity, ctd.QuantityUnit,

sum(COALESCE(ctd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent'),0)) AS FAHours,
sum(COALESCE(er.InstalledQuantity,0)) AS InstalledQuantity,
sum(COALESCE(er.InstalledPercent,0)) AS InstalledPercent

FROM (SELECT BidID, TakeOffQuantity, QuantityUnit, EstimatedHours FROM CivilTrackerDetails WHERE BidID = :BidID GROUP BY BidID) ctd
LEFT JOIN(SELECT ctd.BidID,
COALESCE(
IF(cfa.ActivityType = 70, 
/*TRUE*/((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cm.MiscPercentComplete,0)) * ctd.TakeOffQuantity),
/*FALSE*/cfa.FAQuantity)
,0) AS InstalledQuantity,
(COALESCE(cfa.FAPercentComplete,0) + COALESCE(cm.MiscPercentComplete,0)) AS InstalledPercent

FROM SubmissionActivityStatus sas 
LEFT JOIN CivilTrackerDetails ctd
    ON ctd.BidID = sas.fk_BidIDAssigned
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
LEFT JOIN CivilMisc cm
	ON cm.ActivityID = sas.ActivityID AND cfa.FARework = 0
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (70,71,77,97)
AND sas.fk_ActivityStatus IN(5,12)
) er
	ON er.BidID = ctd.BidID
GROUP BY ctd.BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.BidID,
sum(ctd.TakeOffQuantity) AS TakeOffQuantity, ctd.QuantityUnit,

sum(COALESCE(ctd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent'),0)) AS FAHours,
sum(COALESCE(er.InstalledQuantity,0)) AS InstalledQuantity,
sum(COALESCE(er.InstalledPercent,0)) AS InstalledPercent

FROM (SELECT BidID, TakeOffQuantity, QuantityUnit, EstimatedHours FROM CivilTrackerDetails WHERE BidID = :BidID GROUP BY BidID) ctd
LEFT JOIN(SELECT ctd.BidID,
COALESCE(
IF(cfa.ActivityType = 70, 
/*TRUE*/((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cm.MiscPercentComplete,0)) * ctd.TakeOffQuantity),
/*FALSE*/cfa.FAQuantity)
,0) AS InstalledQuantity,
(COALESCE(cfa.FAPercentComplete,0) + COALESCE(cm.MiscPercentComplete,0)) AS InstalledPercent

FROM SubmissionActivityStatus sas 
LEFT JOIN CivilTrackerDetails ctd
    ON ctd.BidID = sas.fk_BidIDAssigned
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0
LEFT JOIN CivilMisc cm
	ON cm.ActivityID = sas.ActivityID AND cfa.FARework = 0
WHERE sas.fk_BidIDAssigned = :BidID
AND sas.ActivityType IN (70,71,77,97)
AND sas.fk_ActivityStatus IN(5,12)
) er
	ON er.BidID = ctd.BidID
GROUP BY ctd.BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPREquip">
        <![CDATA[
        SELECT 
sas.ActivityID AS FieldActivityId, at.ActivityType AS ActivityTypeName,  

efa.FATagNumber AS TagNumber, 
efa.FAActivitySelect AS Description,
CONCAT(efa.FAPercentComplete*100,"%") AS QuantityInstalled,
ats.Status AS CurrentStatus,
efa.FARework AS Rework,
efa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID 
        

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPREquip__count">
        <![CDATA[
        select count(*) from (SELECT 
sas.ActivityID AS FieldActivityId, at.ActivityType AS ActivityTypeName,  

efa.FATagNumber AS TagNumber, 
efa.FAActivitySelect AS Description,
CONCAT(efa.FAPercentComplete*100,"%") AS QuantityInstalled,
ats.Status AS CurrentStatus,
efa.FARework AS Rework,
efa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID 
        

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelBoltout">
        <![CDATA[
        SELECT stlb.* 
FROM SteelBoltOut stlb
WHERE ID = :RowID

UNION ALL

SELECT stlbr.fk_OrgActivityId, stlbr.ActivityID, stlbr.FAArea, stlbr.FAPieceNumber, stlbr.FABoltoutQuantity, stlbr.FABoltoutPercent, stlbr.FARework, stlbr.FANotes, stlbr.ActivityType, stlbr.FATimeInForm, stlbr.Rev, stlbr.TimeStamp
FROM SteelBoltOutREV stlbr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelBoltout__count">
        <![CDATA[
        select count(*) from (SELECT stlb.* 
FROM SteelBoltOut stlb
WHERE ID = :RowID

UNION ALL

SELECT stlbr.fk_OrgActivityId, stlbr.ActivityID, stlbr.FAArea, stlbr.FAPieceNumber, stlbr.FABoltoutQuantity, stlbr.FABoltoutPercent, stlbr.FARework, stlbr.FANotes, stlbr.ActivityType, stlbr.FATimeInForm, stlbr.Rev, stlbr.TimeStamp
FROM SteelBoltOutREV stlbr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidChangeLogByID">
        <![CDATA[
        SELECT ID,BidID,Scope,Phase,Area,Location,Elevation,CU,P6ID,P6Description,Stage,TestPackageNumber,CostCode,LineNumber,EngDrawingNumber,SheetNumber,RevisionNumber,System,Service,ClientPipeSpec,MaterialCode,Description,ComponentNumber,ECT,PipingActivityType,PipeSize,TakeOffQuantity,QuantityUnit,EstimatedHours,WBS1,WBS2,WBS3,WBS4,WBS5,WBS6,WBS7,WBS8,WBS9,WBS10,Rev,TimeStamp 
FROM PipeTrackerDetails ptd
WHERE ID = :ID
UNION
SELECT fk_OrgId,BidID,Scope,Phase,Area,Location,Elevation,CU,P6ID,P6Description,Stage,TestPackageNumber,CostCode,LineNumber,EngDrawingNumber,SheetNumber,RevisionNumber,System,Service,ClientPipeSpec,MaterialCode,Description,ComponentNumber,ECT,PipingActivityType,PipeSize,TakeOffQuantity,QuantityUnit,EstimatedHours,WBS1,WBS2,WBS3,WBS4,WBS5,WBS6,WBS7,WBS8,WBS9,WBS10,Rev,TimeStamp
FROM PipeTrackerDetailsREV tdr
WHERE tdr.fk_OrgID = :ID
Order By TimeStamp DESC
        ]]>
    <query-param name="ID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidChangeLogByID__count">
        <![CDATA[
        select count(*) from (SELECT ID,BidID,Scope,Phase,Area,Location,Elevation,CU,P6ID,P6Description,Stage,TestPackageNumber,CostCode,LineNumber,EngDrawingNumber,SheetNumber,RevisionNumber,System,Service,ClientPipeSpec,MaterialCode,Description,ComponentNumber,ECT,PipingActivityType,PipeSize,TakeOffQuantity,QuantityUnit,EstimatedHours,WBS1,WBS2,WBS3,WBS4,WBS5,WBS6,WBS7,WBS8,WBS9,WBS10,Rev,TimeStamp 
FROM PipeTrackerDetails ptd
WHERE ID = :ID
UNION
SELECT fk_OrgId,BidID,Scope,Phase,Area,Location,Elevation,CU,P6ID,P6Description,Stage,TestPackageNumber,CostCode,LineNumber,EngDrawingNumber,SheetNumber,RevisionNumber,System,Service,ClientPipeSpec,MaterialCode,Description,ComponentNumber,ECT,PipingActivityType,PipeSize,TakeOffQuantity,QuantityUnit,EstimatedHours,WBS1,WBS2,WBS3,WBS4,WBS5,WBS6,WBS7,WBS8,WBS9,WBS10,Rev,TimeStamp
FROM PipeTrackerDetailsREV tdr
WHERE tdr.fk_OrgID = :ID
Order By TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="ID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateEquipFAQuantity">
        <![CDATA[
        UPDATE `EquipFA` 
SET 
`FAPercentComplete`= :Percent
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Percent" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilMisc">
        <![CDATA[
        SELECT cm.* 
FROM CivilMisc cm
WHERE ID = :RowID

UNION ALL

SELECT cmr.fk_OrgActivityId, cmr.ActivityID, cmr.MiscFoundation, cmr.MiscDrawingNumber, cmr.MiscDetailDrawingNumber, cmr.MiscPercentComplete, cmr.MiscRework, cmr.MiscNotes, cmr.ActivityType, 
cmr.MiscTimeInForm, cmr.Rev, cmr.TimeStamp
FROM CivilMiscREV cmr
WHERE cmr.fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilMisc__count">
        <![CDATA[
        select count(*) from (SELECT cm.* 
FROM CivilMisc cm
WHERE ID = :RowID

UNION ALL

SELECT cmr.fk_OrgActivityId, cmr.ActivityID, cmr.MiscFoundation, cmr.MiscDrawingNumber, cmr.MiscDetailDrawingNumber, cmr.MiscPercentComplete, cmr.MiscRework, cmr.MiscNotes, cmr.ActivityType, 
cmr.MiscTimeInForm, cmr.Rev, cmr.TimeStamp
FROM CivilMiscREV cmr
WHERE cmr.fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityBoltUpInstalled">
        <![CDATA[
        SELECT sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

	LEFT JOIN PipeBoltUp pb
		ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
	
	LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID AND pm.MiscRework = 0

    
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
                
	LEFT JOIN PipeMisc pmb
				ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "BU" AND pmb.MiscRework = 0


WHERE sas.ActivityType IN (21, 91)
AND sas.fk_ActivityStatus IN (5,12) 
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityBoltUpInstalled__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

	LEFT JOIN PipeBoltUp pb
		ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
	
	LEFT JOIN PipeMisc pm
		ON pm.ActivityID = sas.ActivityID AND pm.MiscRework = 0

    
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
        
                
	LEFT JOIN PipeMisc pmb
				ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "BU" AND pmb.MiscRework = 0


WHERE sas.ActivityType IN (21, 91)
AND sas.fk_ActivityStatus IN (5,12) 
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageSteel">
        <![CDATA[
        SELECT std.BidID, std.Scope, std.EWONumber, std.Phase, std.Area, std.Location, std.Elevation, std.CU, std.P6ID, std.P6Description, std.Stage, std.TestPackageNumber, std.CostCode, std.PieceMark, 
std.PieceMarkRev, std.Description, std.ActivityType, std.MaterialType, std.ClientMaterialSpec, std.PerformanceMaterialSpec, std.Length, std.Weight, 
std.WeldCount, std.TakeOffQuantity, std.SteelHours, std.WeldHours, 
std.WBS1, std.WBS2, std.WBS3, std.WBS4, std.WBS5, std.WBS6, std.WBS7, std.WBS8, std.WBS9, std.WBS10,

### Installed Quantities ###
sum(COALESCE(stlsell.FASellQuantity,0)) AS InstalledSell,

### Remaining Quantities ###
(COALESCE(std.TakeOffQuantity,0) - sum(COALESCE(stlsell.FASellQuantity,0))) AS RemainingSell

FROM (SELECT BidID, Scope, EWONumber, Phase, Area, Location, Elevation, CU, P6ID, P6Description, Stage, TestPackageNumber, CostCode, PieceMark, PieceMarkRev, Description, ActivityType, MaterialType, ClientMaterialSpec, PerformanceMaterialSpec, Length, Weight, 
		sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours,
        WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10
		FROM SteelTrackerDetails 
		GROUP BY BidID) std
        
LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
  
WHERE TestPackageNumber = :TestPackage
GROUP BY BidID
ORDER BY std.Area, std.PieceMark
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesByTestPackageSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.BidID, std.Scope, std.EWONumber, std.Phase, std.Area, std.Location, std.Elevation, std.CU, std.P6ID, std.P6Description, std.Stage, std.TestPackageNumber, std.CostCode, std.PieceMark, 
std.PieceMarkRev, std.Description, std.ActivityType, std.MaterialType, std.ClientMaterialSpec, std.PerformanceMaterialSpec, std.Length, std.Weight, 
std.WeldCount, std.TakeOffQuantity, std.SteelHours, std.WeldHours, 
std.WBS1, std.WBS2, std.WBS3, std.WBS4, std.WBS5, std.WBS6, std.WBS7, std.WBS8, std.WBS9, std.WBS10,

### Installed Quantities ###
sum(COALESCE(stlsell.FASellQuantity,0)) AS InstalledSell,

### Remaining Quantities ###
(COALESCE(std.TakeOffQuantity,0) - sum(COALESCE(stlsell.FASellQuantity,0))) AS RemainingSell

FROM (SELECT BidID, Scope, EWONumber, Phase, Area, Location, Elevation, CU, P6ID, P6Description, Stage, TestPackageNumber, CostCode, PieceMark, PieceMarkRev, Description, ActivityType, MaterialType, ClientMaterialSpec, PerformanceMaterialSpec, Length, Weight, 
		sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours,
        WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10
		FROM SteelTrackerDetails 
		GROUP BY BidID) std
        
LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType = 65 AND sas.fk_ActivityStatus IN (5,12)
    
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stlsell.FARework = 0
  
WHERE TestPackageNumber = :TestPackage
GROUP BY BidID
ORDER BY std.Area, std.PieceMark) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeErection">
        <![CDATA[
        SELECT pe.* 
FROM PipeErection pe
WHERE ID = :RowID

UNION ALL

SELECT per.* 
FROM (SELECT  per.fk_OrgActivityId, per.ActivityID, 
per.ErectionSpool1, per.ErectionLengthSpool1, per.ErectionSpool2, per.ErectionLengthSpool2, per.ErectionSpool3, per.ErectionLengthSpool3, per.ErectionSpool4, per.ErectionLengthSpool4 , per.ErectionSpool5, per.ErectionLengthSpool5, per.ErectionSpool6, per.ErectionLengthSpool6,
per.ErectionOnCords, per.ErectionDrawingNumber, per.ErectionLineNumber, per.ErectionSheetNumber, per.ErectionTimeInForm, per.ErectionPipeSize, per.ErectionRework, per.ErectionNotes,
per.ActivityType, per.Rev, per.TimeStamp
FROM PipeErectionREV per
WHERE fk_OrgActivityId = :RowID
ORDER BY per.TimeStamp DESC) per
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeErection__count">
        <![CDATA[
        select count(*) from (SELECT pe.* 
FROM PipeErection pe
WHERE ID = :RowID

UNION ALL

SELECT per.* 
FROM (SELECT  per.fk_OrgActivityId, per.ActivityID, 
per.ErectionSpool1, per.ErectionLengthSpool1, per.ErectionSpool2, per.ErectionLengthSpool2, per.ErectionSpool3, per.ErectionLengthSpool3, per.ErectionSpool4, per.ErectionLengthSpool4 , per.ErectionSpool5, per.ErectionLengthSpool5, per.ErectionSpool6, per.ErectionLengthSpool6,
per.ErectionOnCords, per.ErectionDrawingNumber, per.ErectionLineNumber, per.ErectionSheetNumber, per.ErectionTimeInForm, per.ErectionPipeSize, per.ErectionRework, per.ErectionNotes,
per.ActivityType, per.Rev, per.TimeStamp
FROM PipeErectionREV per
WHERE fk_OrgActivityId = :RowID
ORDER BY per.TimeStamp DESC) per) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryEquip">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,


### Quantities Installed ###
sum(COALESCE(efa.FAQuantity,0)) AS Quantity,

(COALESCE(efa.FAPercentComplete,0) * 100) AS PercentClaimed,

IF(efa.FANotes IS NOT NULL, efa.FANotes, '') AS Notes,
(efa.FARework = 1) AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 80
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID

LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
			FROM `EquipTrackerDetails`
			GROUP BY BidID) etd
	ON etd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND fk_ActivityStatus IN (5,12)
AND sas.ActivityType = 80

GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryEquip__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,


### Quantities Installed ###
sum(COALESCE(efa.FAQuantity,0)) AS Quantity,

(COALESCE(efa.FAPercentComplete,0) * 100) AS PercentClaimed,

IF(efa.FANotes IS NOT NULL, efa.FANotes, '') AS Notes,
(efa.FARework = 1) AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
		ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
		ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType = 80
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID

LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
			FROM `EquipTrackerDetails`
			GROUP BY BidID) etd
	ON etd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID
AND fk_ActivityStatus IN (5,12)
AND sas.ActivityType = 80

GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="CheckSASLock">
        <![CDATA[
        SELECT sas.LockField 
FROM SubmissionActivityStatus sas
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="FieldActivityID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="CheckSASLock__count">
        <![CDATA[
        select count(*) from (SELECT sas.LockField 
FROM SubmissionActivityStatus sas
WHERE ActivityID = :FieldActivityID) wmTempTable
        ]]>
    <query-param name="FieldActivityID" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdateSteelBoltoutQuantity">
        <![CDATA[
        UPDATE `SteelBoltOut` 
SET 
 
`FABoltOutQuantity`= :Quantity,
`FABoltOutPercent`= :Percent
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelDetailed">
        <![CDATA[
        SELECT  
(IF(stls.FAArea IS NOT NULL, stls.FAArea,
IF(stle.FAArea IS NOT NULL, stle.FAArea,
IF(stlb.FAArea IS NOT NULL, stlb.FAArea,
IF(stli.FAArea IS NOT NULL, stli.FAArea,
IF(stlw.FAArea IS NOT NULL, stlw.FAArea,
IF(stlsell.FAArea IS NOT NULL, stlsell.FAArea,
IF(stlm.MiscArea IS NOT NULL, stlm.MiscArea,0)
))))))) AS Area,

(IF(stls.FAPieceNumber IS NOT NULL, stls.FAPieceNumber,
IF(stle.FAPieceNumber IS NOT NULL, stle.FAPieceNumber,
IF(stlb.FAPieceNumber IS NOT NULL, stlb.FAPieceNumber,
IF(stli.FAPieceNumber IS NOT NULL, stli.FAPieceNumber,
IF(stlw.FAPieceNumber IS NOT NULL, stlw.FAPieceNumber,
IF(stlsell.FAPieceNumber IS NOT NULL, stlsell.FAPieceNumber,
IF(stlm.MiscPieceNumber IS NOT NULL, stlm.MiscPieceNumber,0)
))))))) AS PieceNumber,

COALESCE(stls.FAShakeQuantity,0) AS ShakeQuantity,
COALESCE(stle.FAErectQuantity,0) AS ErectQuantity,
CONCAT(TRUNCATE(COALESCE(stle.FAErectPercent,0) * 100,0), '%') AS ErectPercent,
COALESCE(stlb.FABoltOutQuantity,0) AS BoltoutQuantity,
CONCAT(TRUNCATE(COALESCE(stlb.FABoltOutPercent,0) * 100,0), '%') AS BoltoutPercent,
COALESCE(stli.FAImpQuantity,0) AS ImpQuantity,
CONCAT(TRUNCATE(COALESCE(stli.FAImpPercent,0) * 100,0), '%') AS ImpPercent,
COALESCE(stlw.FAWeldQuantity,0) AS WeldQuantity,
CONCAT(TRUNCATE(COALESCE(stlw.FAWeldPercent,0) * 100,0), '%') AS WeldPercent,
COALESCE(stlsell.FASellQuantity,0) AS SellQuantity,
COALESCE(stld.DemoQuantity,0) AS DemoQuantity,
COALESCE(stlm.MiscQuantity,0) AS MiscQuantity,
DATE(sd.ReceivedTime) AS ReceivedTime,
(ats.Status) AS CurrentStatus

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.REF_ActivityStatuses ats
    ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON  stlm.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY sas.ActivityID, Date(sd.ReceivedTime)
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRSteelDetailed__count">
        <![CDATA[
        select count(*) from (SELECT  
(IF(stls.FAArea IS NOT NULL, stls.FAArea,
IF(stle.FAArea IS NOT NULL, stle.FAArea,
IF(stlb.FAArea IS NOT NULL, stlb.FAArea,
IF(stli.FAArea IS NOT NULL, stli.FAArea,
IF(stlw.FAArea IS NOT NULL, stlw.FAArea,
IF(stlsell.FAArea IS NOT NULL, stlsell.FAArea,
IF(stlm.MiscArea IS NOT NULL, stlm.MiscArea,0)
))))))) AS Area,

(IF(stls.FAPieceNumber IS NOT NULL, stls.FAPieceNumber,
IF(stle.FAPieceNumber IS NOT NULL, stle.FAPieceNumber,
IF(stlb.FAPieceNumber IS NOT NULL, stlb.FAPieceNumber,
IF(stli.FAPieceNumber IS NOT NULL, stli.FAPieceNumber,
IF(stlw.FAPieceNumber IS NOT NULL, stlw.FAPieceNumber,
IF(stlsell.FAPieceNumber IS NOT NULL, stlsell.FAPieceNumber,
IF(stlm.MiscPieceNumber IS NOT NULL, stlm.MiscPieceNumber,0)
))))))) AS PieceNumber,

COALESCE(stls.FAShakeQuantity,0) AS ShakeQuantity,
COALESCE(stle.FAErectQuantity,0) AS ErectQuantity,
CONCAT(TRUNCATE(COALESCE(stle.FAErectPercent,0) * 100,0), '%') AS ErectPercent,
COALESCE(stlb.FABoltOutQuantity,0) AS BoltoutQuantity,
CONCAT(TRUNCATE(COALESCE(stlb.FABoltOutPercent,0) * 100,0), '%') AS BoltoutPercent,
COALESCE(stli.FAImpQuantity,0) AS ImpQuantity,
CONCAT(TRUNCATE(COALESCE(stli.FAImpPercent,0) * 100,0), '%') AS ImpPercent,
COALESCE(stlw.FAWeldQuantity,0) AS WeldQuantity,
CONCAT(TRUNCATE(COALESCE(stlw.FAWeldPercent,0) * 100,0), '%') AS WeldPercent,
COALESCE(stlsell.FASellQuantity,0) AS SellQuantity,
COALESCE(stld.DemoQuantity,0) AS DemoQuantity,
COALESCE(stlm.MiscQuantity,0) AS MiscQuantity,
DATE(sd.ReceivedTime) AS ReceivedTime,
(ats.Status) AS CurrentStatus

FROM SubmissionActivityStatus sas

LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.REF_ActivityStatuses ats
    ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
LEFT JOIN SteelMisc stlm
	ON  stlm.ActivityID = sas.ActivityID

WHERE ((
	(tc.ProjectManager LIKE :PM OR tc.ConstructionManager LIKE :ConstM OR tc.SiteManager LIKE :SiteM OR tc.AreaManager LIKE :AreaM) 
	AND tc.Superintendent LIKE :Super 
	AND (tc.GF LIKE :GF OR tc.Foreman LIKE :Foreman) 
    ) OR (
	(tcr.ProjectManager LIKE :PM OR tcr.ConstructionManager LIKE :ConstM OR tcr.SiteManager LIKE :SiteM OR tcr.AreaManager LIKE :AreaM) 
	AND tcr.Superintendent LIKE :Super 
	AND (tcr.GF LIKE :GF OR tcr.Foreman LIKE :Foreman)
    ))
AND sas.ActivityType IN (61,62,63,64,65,67,68,96)
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate
GROUP BY sas.ActivityID, Date(sd.ReceivedTime)) wmTempTable
        ]]>
    <query-param name="PM" type="java.lang.String"/>
    <query-param name="ConstM" type="java.lang.String"/>
    <query-param name="SiteM" type="java.lang.String"/>
    <query-param name="AreaM" type="java.lang.String"/>
    <query-param name="Super" type="java.lang.String"/>
    <query-param name="GF" type="java.lang.String"/>
    <query-param name="Foreman" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetDrawingsByTestPackagePipe">
        <![CDATA[
        SELECT DISTINCT ptd.EngDrawingNumber, ptd.SheetNumber, ptd.LineNumber
FROM PipeTrackerDetails ptd
WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetDrawingsByTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT ptd.EngDrawingNumber, ptd.SheetNumber, ptd.LineNumber
FROM PipeTrackerDetails ptd
WHERE ptd.TestPackageNumber = :TestPackage
ORDER BY ptd.EngDrawingNumber, ptd.SheetNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdatePipeWeld">
        <![CDATA[
        UPDATE PipeWeld
SET
WeldSpool1 = :Spool1,
WeldSpool2 = :Spool2,
WeldDrawingNumber = :DrawingNumber,
WeldLineNumber = :LineNumber,
WeldSheetNumber = :SheetNumber,
WeldLineSpec = :LineSpec,
WeldNumber = :WeldNumber,
WeldStencil = :Stencil,
WeldSize = :Size,
WeldThickness = :Thickness,
WeldType = :WeldType,
WeldPosition = :WeldPosition,
WeldMaterial = :Material,
WeldProcedure = :Procedure,
WeldComplete = :Complete,
WeldShared = :Shared,
WeldPercentCompleted = :PercentComplete,
WeldRework = :Rework,
WeldNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Spool1" type="java.lang.String"/>
    <query-param name="Spool2" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="LineSpec" type="java.lang.String"/>
    <query-param name="WeldNumber" type="java.lang.String"/>
    <query-param name="Stencil" type="java.lang.String"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Thickness" type="java.lang.String"/>
    <query-param name="WeldType" type="java.lang.String"/>
    <query-param name="WeldPosition" type="java.lang.String"/>
    <query-param name="Material" type="java.lang.String"/>
    <query-param name="Procedure" type="java.lang.String"/>
    <query-param name="Complete" type="java.lang.Byte"/>
    <query-param name="Shared" type="java.lang.Byte"/>
    <query-param name="PercentComplete" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Byte"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelBoltout">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelBoltoutHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetReportDPRCivil">
        <![CDATA[
        SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  

cfa.FAFoundation AS Foundation, 
cfa.FADescription AS Description, 
cfa.FADrawingNumber AS DrawingNumber, 
cfa.FADetailDrawingNumber AS DetailDrawing,
IF(sas.ActivityType = 70, CONCAT(cfa.FAPercentComplete*100,"%") , CONCAT(cfa.FAQuantity," yds") ) AS QuantityInstalled,
ats.Status AS CurrentStatus,
cfa.FARework AS Rework,
cfa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
        


WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day




UNION




SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  

'N/A' AS Foundation, 
CONCAT('Test Package: ',csell.SellTestPackageNumber) AS Description, 
'N/A' AS DrawingNumber, 
'N/A' AS DetailDrawing,
1 AS QuantityInstalled,
ats.Status AS CurrentStatus,
'0' AS Rework,
csell.SellNotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDPRCivil__count">
        <![CDATA[
        select count(*) from (SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  

cfa.FAFoundation AS Foundation, 
cfa.FADescription AS Description, 
cfa.FADrawingNumber AS DrawingNumber, 
cfa.FADetailDrawingNumber AS DetailDrawing,
IF(sas.ActivityType = 70, CONCAT(cfa.FAPercentComplete*100,"%") , CONCAT(cfa.FAQuantity," yds") ) AS QuantityInstalled,
ats.Status AS CurrentStatus,
cfa.FARework AS Rework,
cfa.FANotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev

JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
        


WHERE (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day




UNION




SELECT 
sas.ActivityID AS FieldActivityId, sas.ActivityType, at.ActivityType AS ActivityTypeName,  

'N/A' AS Foundation, 
CONCAT('Test Package: ',csell.SellTestPackageNumber) AS Description, 
'N/A' AS DrawingNumber, 
'N/A' AS DetailDrawing,
1 AS QuantityInstalled,
ats.Status AS CurrentStatus,
'0' AS Rework,
csell.SellNotes AS Notes,
DATE(sd.ReceivedTime) AS DateSubmitted

FROM SubmissionActivityStatus sas

JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
JOIN CivilSellPackage csell
	ON csell.ActivityID = sas.ActivityID

AND (tc.Foreman LIKE :ForemanID OR tcr.Foreman LIKE :ForemanID)
AND (tc.Superintendent LIKE :SuperID OR tcr.Superintendent LIKE :SuperID)
AND (tc.AreaManager LIKE :ManagerID OR tc.SiteManager LIKE :ManagerID OR tc.ConstructionManager LIKE :ManagerID OR tc.ProjectManager LIKE :ManagerID OR
	 tcr.AreaManager LIKE :ManagerID OR tcr.SiteManager LIKE :ManagerID OR tcr.ConstructionManager LIKE :ManagerID OR tcr.ProjectManager LIKE :ManagerID)     
AND sd.ReceivedTime BETWEEN :StartDate AND :EndDate + INTERVAL 1 day) wmTempTable
        ]]>
    <query-param name="ForemanID" type="java.lang.String"/>
    <query-param name="SuperID" type="java.lang.String"/>
    <query-param name="ManagerID" type="java.lang.String"/>
    <query-param name="StartDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesSteel">
        <![CDATA[
        SELECT 
min(std.UID) AS UID, min(std.BidID) AS BidID, std.EWONumber, std.Scope, std.Phase,  std.Stage, std.TestPackageNumber, std.CostCode, std.P6ID, std.AssignedContractor, std.Area, std.Location, std.Structure, std.CU, 
std.Elevation, std.P6Description, std.PieceMark, std.PieceMarkRev, std.Description, std.ActivityType, std.ClientMaterialSpec, std.PerformanceMaterialSpec, std.MaterialType, sum(std.Length) AS Length, 
sum(std.Weight) AS Weight, std.System, std.Service, sum(std.TakeOffQuantity) AS TakeOffQuantity, sum(std.WeldCount) AS WeldCount, sum(std.SteelHours) AS SteelHours, sum(std.WeldHours) WeldHours,
std.WBS1, std.WBS2, std.WBS3, std.WBS4, std.WBS5, std.WBS6, std.WBS7, std.WBS8, std.WBS9, std.WBS10

FROM SteelTrackerDetails std
WHERE Area LIKE :Area
AND PieceMark LIKE :PieceMark
AND ActivityType LIKE :BidActivityType
AND MaterialType LIKE :SteelType
GROUP BY Area, PieceMark
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="PieceMark" type="java.lang.String"/>
    <query-param name="BidActivityType" type="java.lang.String"/>
    <query-param name="SteelType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesSteel__count">
        <![CDATA[
        select count(*) from (SELECT 
min(std.UID) AS UID, min(std.BidID) AS BidID, std.EWONumber, std.Scope, std.Phase,  std.Stage, std.TestPackageNumber, std.CostCode, std.P6ID, std.AssignedContractor, std.Area, std.Location, std.Structure, std.CU, 
std.Elevation, std.P6Description, std.PieceMark, std.PieceMarkRev, std.Description, std.ActivityType, std.ClientMaterialSpec, std.PerformanceMaterialSpec, std.MaterialType, sum(std.Length) AS Length, 
sum(std.Weight) AS Weight, std.System, std.Service, sum(std.TakeOffQuantity) AS TakeOffQuantity, sum(std.WeldCount) AS WeldCount, sum(std.SteelHours) AS SteelHours, sum(std.WeldHours) WeldHours,
std.WBS1, std.WBS2, std.WBS3, std.WBS4, std.WBS5, std.WBS6, std.WBS7, std.WBS8, std.WBS9, std.WBS10

FROM SteelTrackerDetails std
WHERE Area LIKE :Area
AND PieceMark LIKE :PieceMark
AND ActivityType LIKE :BidActivityType
AND MaterialType LIKE :SteelType
GROUP BY Area, PieceMark) wmTempTable
        ]]>
    <query-param name="Area" type="java.lang.String"/>
    <query-param name="PieceMark" type="java.lang.String"/>
    <query-param name="BidActivityType" type="java.lang.String"/>
    <query-param name="SteelType" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingSteelBoltoutPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelBoltoutHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelBoltoutPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelBoltoutHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateCivilFAQuantity">
        <![CDATA[
        UPDATE `CivilFA` 
SET 
`FAPercentComplete`= :Percent,
`FAQuantity`= :Quantity
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelErect">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelErectHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetActivityHistoryStatus">
        <![CDATA[
        SELECT sas.ActivityID, CONCAT(ats.Status, ' - ', IF(sas.LockField = 1, 'Locked', COALESCE(sas.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sas.TimeStamp

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy
    
WHERE sas.ActivityID = :ActivityID



UNION ALL



SELECT sasr.*
FROM (SELECT sasr.fk_ActivityID, CONCAT(ats.Status, ' - ', IF(sasr.LockField = 1, 'Locked', COALESCE(sasr.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sasr.TimeStamp

FROM SubmissionActivityStatusREV sasr
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sasr.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy

WHERE sasr.fk_ActivityID = :ActivityID
ORDER BY sasr.TimeStamp DESC) sasr
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryStatus__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID, CONCAT(ats.Status, ' - ', IF(sas.LockField = 1, 'Locked', COALESCE(sas.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sas.TimeStamp

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy
    
WHERE sas.ActivityID = :ActivityID



UNION ALL



SELECT sasr.*
FROM (SELECT sasr.fk_ActivityID, CONCAT(ats.Status, ' - ', IF(sasr.LockField = 1, 'Locked', COALESCE(sasr.LockField,'Unlocked'))) AS Status, CONCAT(u.FirstName, ' ', u.LastName) AS LastModifiedBy, sasr.TimeStamp

FROM SubmissionActivityStatusREV sasr
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sasr.fk_ActivityStatus
LEFT JOIN PSA.tblUserPSA u
	ON u.ID = fk_LastModifiedBy

WHERE sasr.fk_ActivityID = :ActivityID
ORDER BY sasr.TimeStamp DESC) sasr) wmTempTable
        ]]>
    <query-param name="ActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeDemoQuantity">
        <![CDATA[
        UPDATE PipeDemo
SET 
DemoQuantity = :Quantity
WHERE ActivityID= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingSteelShakePercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelShakeHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelShakePercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelShakeHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="UpdateSettingPipeTestingPercent">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='TestingHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesSteel">
        <![CDATA[
        SELECT std.BidID,
### Quantities ###
(std.TakeOffQuantity) AS SteelQuantity,
(std.WeldCount) AS WeldQuantity,  

### Hours ###
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent'),0)) AS ShakeHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent'),0)) AS ErectHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent'),0)) AS BoltoutHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent'),0)) AS ImpHours,
(COALESCE(std.WeldHours,0)) AS WeldHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'),0)) AS SellHours,
(COALESCE(IF(std.ActivityType = 'D', std.SteelHours, 0),0)) AS DemoHours,
(COALESCE(IF(std.ActivityType = 'MISC', std.SteelHours, 0),0)) AS MiscHours,

### Installed Quantities ###
sum(COALESCE(er.InstalledShake,0)) AS InstalledShake,
sum(COALESCE(er.InstalledErect,0)) AS InstalledErect,
sum(COALESCE(er.InstalledBoltout,0)) AS InstalledBoltout,
sum(COALESCE(er.InstalledImp,0)) AS InstalledImp,
sum(COALESCE(er.InstalledWeld,0)) AS InstalledWeld,
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,
sum(COALESCE(er.InstalledDemo,0)) AS InstalledDemo,
sum(COALESCE(er.InstalledMisc,0)) AS InstalledMisc

FROM (SELECT BidID, TestPackageNumber, ActivityType, 
		sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours  
		FROM SteelTrackerDetails
        GROUP BY BidID) std

LEFT JOIN(SELECT std.BidID,
COALESCE(stls.FAShakeQuantity,0) AS InstalledShake,
COALESCE(stle.FAErectQuantity,0) AS InstalledErect,
COALESCE(stlb.FABoltOutQuantity,0) AS InstalledBoltout,
COALESCE(stli.FAImpQuantity,0) AS InstalledImp,
COALESCE(stlw.FAWeldQuantity,0) AS InstalledWeld,
COALESCE(stlsell.FASellQuantity,0) AS InstalledSell,
COALESCE(stld.DemoQuantity,0) AS InstalledDemo,
COALESCE(stlm.MiscQuantity,0) AS InstalledMisc

FROM SteelTrackerDetails std

LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96)
LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID AND stls.FARework = 0
WHERE sas.fk_ActivityStatus IN (5,12)
) er
	ON er.BidID = std.BidID

WHERE std.BidID = :BidID
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityQuantitiesSteel__count">
        <![CDATA[
        select count(*) from (SELECT std.BidID,
### Quantities ###
(std.TakeOffQuantity) AS SteelQuantity,
(std.WeldCount) AS WeldQuantity,  

### Hours ###
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelShakeHoursPercent'),0)) AS ShakeHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelErectHoursPercent'),0)) AS ErectHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelBoltoutHoursPercent'),0)) AS BoltoutHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelImpHoursPercent'),0)) AS ImpHours,
(COALESCE(std.WeldHours,0)) AS WeldHours,
(COALESCE(std.SteelHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'SteelSellHoursPercent'),0)) AS SellHours,
(COALESCE(IF(std.ActivityType = 'D', std.SteelHours, 0),0)) AS DemoHours,
(COALESCE(IF(std.ActivityType = 'MISC', std.SteelHours, 0),0)) AS MiscHours,

### Installed Quantities ###
sum(COALESCE(er.InstalledShake,0)) AS InstalledShake,
sum(COALESCE(er.InstalledErect,0)) AS InstalledErect,
sum(COALESCE(er.InstalledBoltout,0)) AS InstalledBoltout,
sum(COALESCE(er.InstalledImp,0)) AS InstalledImp,
sum(COALESCE(er.InstalledWeld,0)) AS InstalledWeld,
sum(COALESCE(er.InstalledSell,0)) AS InstalledSell,
sum(COALESCE(er.InstalledDemo,0)) AS InstalledDemo,
sum(COALESCE(er.InstalledMisc,0)) AS InstalledMisc

FROM (SELECT BidID, TestPackageNumber, ActivityType, 
		sum(WeldCount) AS WeldCount, sum(TakeOffQuantity) AS TakeOffQuantity, sum(SteelHours) AS SteelHours, sum(WeldHours) AS WeldHours  
		FROM SteelTrackerDetails
        GROUP BY BidID) std

LEFT JOIN(SELECT std.BidID,
COALESCE(stls.FAShakeQuantity,0) AS InstalledShake,
COALESCE(stle.FAErectQuantity,0) AS InstalledErect,
COALESCE(stlb.FABoltOutQuantity,0) AS InstalledBoltout,
COALESCE(stli.FAImpQuantity,0) AS InstalledImp,
COALESCE(stlw.FAWeldQuantity,0) AS InstalledWeld,
COALESCE(stlsell.FASellQuantity,0) AS InstalledSell,
COALESCE(stld.DemoQuantity,0) AS InstalledDemo,
COALESCE(stlm.MiscQuantity,0) AS InstalledMisc

FROM SteelTrackerDetails std

LEFT JOIN SubmissionActivityStatus sas
	ON sas.fk_BidIDAssigned = std.BidID AND sas.ActivityType IN (60,61,62,63,64,65,66,67,68,96)
LEFT JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID AND stls.FARework = 0
LEFT JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID AND stls.FARework = 0
WHERE sas.fk_ActivityStatus IN (5,12)
) er
	ON er.BidID = std.BidID

WHERE std.BidID = :BidID
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeCutPrep">
        <![CDATA[
        UPDATE PipeWeld
SET
WeldDrawingNumber = :DrawingNumber,
WeldLineNumber = :LineNumber,
WeldSheetNumber = :SheetNumber,
WeldSize = :Size,
WeldThickness = :Thickness,
WeldRework = :Rework,
WeldNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Thickness" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSettingSteelSell">
        <![CDATA[
        UPDATE SETTINGS
SET `Value1`= :Value1 
WHERE `Label`='SteelSellHoursPercent'
        ]]>
    <query-param name="Value1" type="java.math.BigDecimal"/>
    </sql-query>

    <sql-query name="UpdatePipeTrim">
        <![CDATA[
        UPDATE PipeTrim
SET
TrimSize = :Size,
TrimQuantity = :PlugQuantity,
TrimHandleType = :HandleType,
TrimInstrumentType = :InstType,
TrimDrawingNumber = :DrawingNumber,
TrimLineNumber = :LineNumber,
TrimSheetNumber = :SheetNumber,
TrimRework = :Rework,
TrimNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="PlugQuantity" type="java.lang.Integer"/>
    <query-param name="HandleType" type="java.lang.String"/>
    <query-param name="InstType" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTesting">
        <![CDATA[
        SELECT pt.* 
FROM PipeTesting pt
WHERE ID = :RowID

UNION ALL

SELECT ptr.fk_OrgActivityId, ptr.ActivityID, ptr.TestingTestPackageNumber, ptr.TestingRework, ptr.TestingNotes, ptr.TestingTimeInForm, 
ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTestingREV ptr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTesting__count">
        <![CDATA[
        select count(*) from (SELECT pt.* 
FROM PipeTesting pt
WHERE ID = :RowID

UNION ALL

SELECT ptr.fk_OrgActivityId, ptr.ActivityID, ptr.TestingTestPackageNumber, ptr.TestingRework, ptr.TestingNotes, ptr.TestingTimeInForm, 
ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTestingREV ptr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeMiscQuantity">
        <![CDATA[
        UPDATE PipeMisc
SET
MiscQuantity = :Quantity
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesEquip">
        <![CDATA[
        SELECT 
min(UID) AS UID, min(BidID) AS BidID, EWONumber, Scope, Phase, Stage, TestPackageNumber, CostCode, P6ID, AssignedContractor, Area, Location, Structure, CU, Elevation, P6Description, 
EngDrawingNumber, SheetNumber, DrawingRev, ComponentNumber, Description, EquipmentType, ActivityType, ClientMaterialSpec, PerformanceMaterialSpec, System, Service, 
sum(TakeOffQuantity) AS TakeOffQuantity, QuantityUnit, sum(EstimatedHours) AS EstimatedHours, 
WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10


FROM EquipTrackerDetails
WHERE BidID = :BidID
OR 
(ComponentNumber LIKE :TagNumber
AND Description LIKE :Description)
GROUP BY BidID
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    <query-param name="TagNumber" type="java.lang.String"/>
    <query-param name="Description" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetBidActivityMatchesEquip__count">
        <![CDATA[
        select count(*) from (SELECT 
min(UID) AS UID, min(BidID) AS BidID, EWONumber, Scope, Phase, Stage, TestPackageNumber, CostCode, P6ID, AssignedContractor, Area, Location, Structure, CU, Elevation, P6Description, 
EngDrawingNumber, SheetNumber, DrawingRev, ComponentNumber, Description, EquipmentType, ActivityType, ClientMaterialSpec, PerformanceMaterialSpec, System, Service, 
sum(TakeOffQuantity) AS TakeOffQuantity, QuantityUnit, sum(EstimatedHours) AS EstimatedHours, 
WBS1, WBS2, WBS3, WBS4, WBS5, WBS6, WBS7, WBS8, WBS9, WBS10


FROM EquipTrackerDetails
WHERE BidID = :BidID
OR 
(ComponentNumber LIKE :TagNumber
AND Description LIKE :Description)
GROUP BY BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.String"/>
    <query-param name="TagNumber" type="java.lang.String"/>
    <query-param name="Description" type="java.lang.String"/>
    </sql-query>

    <sql-query name="UpdatePipeBoltUp">
        <![CDATA[
        UPDATE PipeBoltUp 
SET BoltUpSpool1 = :Spool1,
BoltUpSpool2 = :Spool2,
BoltUpDrawingNumber = :DrawingNumber,
BoltUpLineNumber = :LineNumber,
BoltUpSheetNumber = :SheetNumber,
BoltUpSize = :Size,
BoltUpQuantity = :Quantity,
BoltUpRework = :Rework,
BoltUpNotes = :Notes
WHERE ActivityID= :FieldActivityID
        ]]>
    <query-param name="Spool1" type="java.lang.String"/>
    <query-param name="Spool2" type="java.lang.String"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryCivil">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,


### Quantities Installed ###
sum(COALESCE(cfa.FAQuantity,0)) AS Quantity,

((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * 100) AS PercentClaimed,

CONCAT(IF(cfa.FANotes IS NOT NULL, cfa.FANotes, ''), IF(cfm.MiscNotes IS NOT NULL, cfm.MiscNotes, '')) AS Notes,
IF(cfa.FARework = 1 OR cfm.MiscRework = 1, 1, 0) AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType IN (70,71,97)
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
LEFT JOIN CivilMisc cfm
	ON cfm.ActivityID = sas.ActivityID
LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
			FROM `CivilTrackerDetails`
			GROUP BY BidID) ctd
	ON ctd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID     
AND fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (70,71,97)

GROUP BY sas.ActivityID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetBidWorkHistoryCivil__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, at.ActivityType, 
CONCAT(u1.FirstName, ' ', u1.LastName)AS Foreman, 
CONCAT(u2.FirstName, ' ', u2.LastName)AS Supervisor, 
sd.CompleteTime, 
max(sasr.TimeStamp) AS ReviewedTime,


### Quantities Installed ###
sum(COALESCE(cfa.FAQuantity,0)) AS Quantity,

((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * 100) AS PercentClaimed,

CONCAT(IF(cfa.FANotes IS NOT NULL, cfa.FANotes, ''), IF(cfm.MiscNotes IS NOT NULL, cfm.MiscNotes, '')) AS Notes,
IF(cfa.FARework = 1 OR cfm.MiscRework = 1, 1, 0) AS Rework



FROM SubmissionActivityStatus sas

####User Info Joins ####
LEFT JOIN SubsDetails sd
	ON sas.SubmissionID = sd.SubmissionId
LEFT JOIN PSA.tblCrews tc
	ON tc.ID = sd.CrewID AND tc.Rev = sd.CrewRev
LEFT JOIN PSA.tblCrewsRev tcr
	ON tcr.OrgID = sd.CrewID AND tcr.Rev = sd.CrewRev
LEFT JOIN PSA.tblUserPSA u1
	ON u1.ID = tc.Foreman OR u1.ID = tcr.Foreman
LEFT JOIN PSA.tblUserPSA u2
	ON u2.ID = tc.Superintendent OR u2.ID = tcr.Superintendent
        
LEFT JOIN (SELECT sasr.fk_ActivityID, max(sasr.TimeStamp) AS TimeStamp
			FROM SubmissionActivityStatusREV sasr
            WHERE sasr.fk_ActivityStatus = 2
            AND sasr.ActivityType IN (70,71,97)
            GROUP BY sasr.fk_ActivityID) sasr
	ON sasr.fk_ActivityID = sas.ActivityID 

#### Assigned Activities Joins #####    
JOIN PSA.REF_ActivityTypes at
	ON at.ID = sas.ActivityType
LEFT JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
LEFT JOIN CivilMisc cfm
	ON cfm.ActivityID = sas.ActivityID
LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
			FROM `CivilTrackerDetails`
			GROUP BY BidID) ctd
	ON ctd.BidID = sas.fk_BidIDAssigned

WHERE sas.fk_BidIDAssigned = :BidID     
AND fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (70,71,97)

GROUP BY sas.ActivityID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingApproval">
        <![CDATA[
        SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pe.ErectionSpool1 AS Spool1,COALESCE(pe.ErectionSpool2, 'N/A') AS Spool2, 
pe.ErectionLineNumber AS Line1, pe.ErectionDrawingNumber AS Drawing1, pe.ErectionSheetNumber AS Sheet1, 
pe.ErectionLineNumber AS Line2, pe.ErectionDrawingNumber AS Drawing2, pe.ErectionSheetNumber AS Sheet2, 
pe.ErectionPipeSize AS Size, pe.ErectionNotes AS Notes,
(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0)) AS Quantity, 
'N/A' AS Area, 'N/A' AS PercentClaim, pe.ErectionRework AS Rework
FROM SubmissionActivityStatus sas


LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeErection pe
	ON pe.ActivityID = sas.ActivityID

WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)
 
 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pb.BoltUpSpool1, pb.BoltUpSpool2, 
pb.BoltUpLineNumber AS Line1, pb.BoltUpDrawingNumber AS DWG1, pb.BoltUpSheetNumber AS Sheet1,
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS DWG2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pb.BoltUpSize , pb.BoltUpNotes, 1 AS BoltUpInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, pb.BoltUpRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeBoltUp pb
	ON pb.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pb.BoltUpSpool2

WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pw.WeldSpool1, pw.WeldSpool2, 
pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, 
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS DWG2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pw.WeldSize , pw.WeldNotes, COALESCE((pw.WeldPercentCompleted * .01),0) AS WeldInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, pw.WeldRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus 
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pw.WeldSpool2
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pt.TrimLineNumber, pt.TrimDrawingNumber, pt.TrimSheetNumber, 
pt.TrimLineNumber AS Line2, pt.TrimDrawingNumber AS DWG2, pt.TrimSheetNumber AS Sheet2,
pt.TrimSize , pt.TrimNotes, pt.TrimQuantity
, 'N/A' AS Area, 'N/A' AS PercentClaim, pt.TrimRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus      
JOIN PipeTrim pt
	ON pt.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
psu.SupportLineNumber, psu.SupportDrawingNumber, psu.SupportSheetNumber, 
psu.SupportLineNumber AS Line2, psu.SupportDrawingNumber AS DWG2, psu.SupportSheetNumber AS Sheet2,
'N/A' AS SupportSize , psu.SupportNotes, COALESCE((psu.SupportPercentCompleted * .01),0) AS SupportInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, psu.SupportRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeSupports psu
	ON psu.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pte.TestingTestPackageNumber, 'N/A' AS DrawingNumber, pte.TestingRework AS SheetNumber, 
pte.TestingTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
'N/A' AS Size , pte.TestingNotes, 1 AS TestingQuantity, 
'N/A' AS Area, 'N/A' AS PercentClaim, pte.TestingRework AS Rework
            
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeTesting pte
	ON pte.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pd.DemoLineNumber, pd.DemoDrawingNumber, pd.DemoSheetNumber, 
pd.DemoLineNumber AS Line2, pd.DemoDrawingNumber AS DWG2, pd.DemoSheetNumber AS Sheet2,
'N/A' AS DemoSize , pd.DemoNotes, COALESCE(pd.DemoQuantity,0) AS DemoQuantity,
'N/A' AS Area, 'N/A' AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeDemo pd
	ON pd.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pm.MiscLineNumber, pm.MiscDrawingNumber, pm.MiscSheetNumber, 
pm.MiscLineNumber AS Line2, pm.MiscDrawingNumber AS DWG2, pm.MiscSheetNumber AS Sheet2,
'N/A' AS MiscSize , pm.MiscNotes, pm.MiscQuantity AS MiscInstalled,
'N/A' AS Area, 'N/A' AS PercentClaim, pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus	
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pEWO.EWOLineNumber, pEWO.EWODrawingNumber, pEWO.EWOSheetNumber, 
pEWO.EWOLineNumber AS Line2, pEWO.EWODrawingNumber AS DWG2, pEWO.EWOSheetNumber AS Sheet2,
'N/A' AS EWOSize , pEWO.EWONotes, 'N/A' AS TestingEarned,
'N/A' AS Area, 'N/A' AS PercentClaim, pEWO.EWORework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeEWO pEWO
	ON pEWO.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stls.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stls.FANotes, stls.FAShakeQuantity, stls.FAArea, 1.00 AS PercentClaim, stls.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stle.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stle.FANotes, stle.FAErectQuantity, stle.FAArea, stle.FAErectPercent, stle.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlb.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlb.FANotes, stlb.FABoltOutQuantity, stlb.FAArea, stlb.FABoltOutPercent , stlb.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stli.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stli.FANotes, stli.FAImpQuantity, stli.FAArea, stli.FAImpPercent , stli.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlw.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlw.FANotes, stlw.FAWeldQuantity, stlw.FAArea, stlw.FAWeldPercent , stlw.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlsell.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsell.FANotes, stlsell.FASellQuantity, stlsell.FAArea, 1.00 AS PercentClaim , stlsell.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
rst.SteelName AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, DemoSize AS Size , 
stld.DemoNotes, stld.DemoQuantity, stld.DemoArea, 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN PSA.REF_SteelTypes rst
	ON stld.DemoSteelType = rst.ID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
stlsp.SellTestPackageNumber AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
stlsp.SellTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsp.SellNotes, 1, 'N/A', 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSellPackage stlsp
	ON stlsp.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlm.MiscPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlm.MiscNotes, stlm.MiscQuantity, stlm.MiscArea, 1.00 AS PercentClaim, stlm.MiscRework AS Rework
 
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
cfa.FAFoundation AS Spool1, cfa.FABidID AS Spool2, 
cfa.FADrawingNumber AS LineNumber, cfa.FADetailDrawingNumber AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cfa.FANotes, IF(cfa.ActivityType = 70, (cfa.FAPercentComplete * ctd.TakeOffQuantity), cfa.FAQuantity) AS Quantity, 'N/A' AS Area, cfa.FAPercentComplete AS PercentClaim, cfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID =  cfa.FABidID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)




UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
csp.SellTestPackageNumber AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
csp.SellTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
csp.SellNotes, 'N/A' AS Quantity, 'N/A' AS Area, 'N/A' PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilSellPackage csp
	ON csp.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
cm.MiscFoundation AS Spool1, 'N/A' AS Spool2, 
cm.MiscDrawingNumber AS LineNumber, cm.MiscDetailDrawingNumber AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cm.MiscNotes, 0 AS Quantity, 'N/A' AS Area, cm.MiscPercentComplete AS PercentClaim, cm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilMisc cm
	ON cm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'EQUIP' AS Craft,
efa.FATagNumber AS Spool1, efa.FABidID AS Spool2, 
efa.FAActivitySelect AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
efa.FANotes, efa.FAQuantity AS Quantity, 'N/A' AS Area, efa.FAPercentComplete AS PercentClaim, efa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivitiesPendingApproval__count">
        <![CDATA[
        select count(*) from (SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pe.ErectionSpool1 AS Spool1,COALESCE(pe.ErectionSpool2, 'N/A') AS Spool2, 
pe.ErectionLineNumber AS Line1, pe.ErectionDrawingNumber AS Drawing1, pe.ErectionSheetNumber AS Sheet1, 
pe.ErectionLineNumber AS Line2, pe.ErectionDrawingNumber AS Drawing2, pe.ErectionSheetNumber AS Sheet2, 
pe.ErectionPipeSize AS Size, pe.ErectionNotes AS Notes,
(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0)) AS Quantity, 
'N/A' AS Area, 'N/A' AS PercentClaim, pe.ErectionRework AS Rework
FROM SubmissionActivityStatus sas


LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeErection pe
	ON pe.ActivityID = sas.ActivityID

WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)
 
 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pb.BoltUpSpool1, pb.BoltUpSpool2, 
pb.BoltUpLineNumber AS Line1, pb.BoltUpDrawingNumber AS DWG1, pb.BoltUpSheetNumber AS Sheet1,
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS DWG2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pb.BoltUpSize , pb.BoltUpNotes, 1 AS BoltUpInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, pb.BoltUpRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeBoltUp pb
	ON pb.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pb.BoltUpSpool2

WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
pw.WeldSpool1, pw.WeldSpool2, 
pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, 
COALESCE(sl.LineNumber,'N/A') AS Line2, COALESCE(sl.DrawingNumber,'N/A') AS DWG2, COALESCE(sl.Sheetnumber,'N/A') AS Sheet2,
pw.WeldSize , pw.WeldNotes, COALESCE((pw.WeldPercentCompleted * .01),0) AS WeldInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, pw.WeldRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus 
JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID
LEFT JOIN REF_SpoolList sl
	ON sl.SpoolNumber = pw.WeldSpool2
    
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pt.TrimLineNumber, pt.TrimDrawingNumber, pt.TrimSheetNumber, 
pt.TrimLineNumber AS Line2, pt.TrimDrawingNumber AS DWG2, pt.TrimSheetNumber AS Sheet2,
pt.TrimSize , pt.TrimNotes, pt.TrimQuantity
, 'N/A' AS Area, 'N/A' AS PercentClaim, pt.TrimRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus      
JOIN PipeTrim pt
	ON pt.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
psu.SupportLineNumber, psu.SupportDrawingNumber, psu.SupportSheetNumber, 
psu.SupportLineNumber AS Line2, psu.SupportDrawingNumber AS DWG2, psu.SupportSheetNumber AS Sheet2,
'N/A' AS SupportSize , psu.SupportNotes, COALESCE((psu.SupportPercentCompleted * .01),0) AS SupportInstalled
, 'N/A' AS Area, 'N/A' AS PercentClaim, psu.SupportRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeSupports psu
	ON psu.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pte.TestingTestPackageNumber, 'N/A' AS DrawingNumber, pte.TestingRework AS SheetNumber, 
pte.TestingTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2,
'N/A' AS Size , pte.TestingNotes, 1 AS TestingQuantity, 
'N/A' AS Area, 'N/A' AS PercentClaim, pte.TestingRework AS Rework
            
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeTesting pte
	ON pte.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pd.DemoLineNumber, pd.DemoDrawingNumber, pd.DemoSheetNumber, 
pd.DemoLineNumber AS Line2, pd.DemoDrawingNumber AS DWG2, pd.DemoSheetNumber AS Sheet2,
'N/A' AS DemoSize , pd.DemoNotes, COALESCE(pd.DemoQuantity,0) AS DemoQuantity,
'N/A' AS Area, 'N/A' AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeDemo pd
	ON pd.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pm.MiscLineNumber, pm.MiscDrawingNumber, pm.MiscSheetNumber, 
pm.MiscLineNumber AS Line2, pm.MiscDrawingNumber AS DWG2, pm.MiscSheetNumber AS Sheet2,
'N/A' AS MiscSize , pm.MiscNotes, pm.MiscQuantity AS MiscInstalled,
'N/A' AS Area, 'N/A' AS PercentClaim, pm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus	
JOIN PipeMisc pm
	ON pm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)


UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'PIPE' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
pEWO.EWOLineNumber, pEWO.EWODrawingNumber, pEWO.EWOSheetNumber, 
pEWO.EWOLineNumber AS Line2, pEWO.EWODrawingNumber AS DWG2, pEWO.EWOSheetNumber AS Sheet2,
'N/A' AS EWOSize , pEWO.EWONotes, 'N/A' AS TestingEarned,
'N/A' AS Area, 'N/A' AS PercentClaim, pEWO.EWORework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN PipeEWO pEWO
	ON pEWO.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)

 
UNION


SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stls.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stls.FANotes, stls.FAShakeQuantity, stls.FAArea, 1.00 AS PercentClaim, stls.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelShake stls
	ON stls.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stle.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stle.FANotes, stle.FAErectQuantity, stle.FAArea, stle.FAErectPercent, stle.FARework AS Rework
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelErect stle
	ON stle.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlb.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlb.FANotes, stlb.FABoltOutQuantity, stlb.FAArea, stlb.FABoltOutPercent , stlb.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelBoltOut stlb
	ON stlb.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stli.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stli.FANotes, stli.FAImpQuantity, stli.FAArea, stli.FAImpPercent , stli.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelImp stli
	ON stli.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlw.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlw.FANotes, stlw.FAWeldQuantity, stlw.FAArea, stlw.FAWeldPercent , stlw.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelWeld stlw
	ON stlw.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlsell.FAPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsell.FANotes, stlsell.FASellQuantity, stlsell.FAArea, 1.00 AS PercentClaim , stlsell.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSell stlsell
	ON stlsell.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
rst.SteelName AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, DemoSize AS Size , 
stld.DemoNotes, stld.DemoQuantity, stld.DemoArea, 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelDemo stld
	ON stld.ActivityID = sas.ActivityID
JOIN PSA.REF_SteelTypes rst
	ON stld.DemoSteelType = rst.ID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
stlsp.SellTestPackageNumber AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
stlsp.SellTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlsp.SellNotes, 1, 'N/A', 1.00 AS PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelSellPackage stlsp
	ON stlsp.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'STEEL' AS Craft, 
stlm.MiscPieceNumber AS Spool1, 'N/A' AS Spool2, 
'N/A' AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
stlm.MiscNotes, stlm.MiscQuantity, stlm.MiscArea, 1.00 AS PercentClaim, stlm.MiscRework AS Rework
 
FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN SteelMisc stlm
	ON stlm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
cfa.FAFoundation AS Spool1, cfa.FABidID AS Spool2, 
cfa.FADrawingNumber AS LineNumber, cfa.FADetailDrawingNumber AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cfa.FANotes, IF(cfa.ActivityType = 70, (cfa.FAPercentComplete * ctd.TakeOffQuantity), cfa.FAQuantity) AS Quantity, 'N/A' AS Area, cfa.FAPercentComplete AS PercentClaim, cfa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilFA cfa
	ON cfa.ActivityID = sas.ActivityID
JOIN CivilTrackerDetails ctd
	ON ctd.BidID =  cfa.FABidID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)




UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
'N/A' AS Spool1, 'N/A' AS Spool2, 
csp.SellTestPackageNumber AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
csp.SellTestPackageNumber AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
csp.SellNotes, 'N/A' AS Quantity, 'N/A' AS Area, 'N/A' PercentClaim, 0 AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilSellPackage csp
	ON csp.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'CIVIL' AS Craft, 
cm.MiscFoundation AS Spool1, 'N/A' AS Spool2, 
cm.MiscDrawingNumber AS LineNumber, cm.MiscDetailDrawingNumber AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
cm.MiscNotes, 0 AS Quantity, 'N/A' AS Area, cm.MiscPercentComplete AS PercentClaim, cm.MiscRework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN CivilMisc cm
	ON cm.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)



UNION



SELECT sas.SubmissionID, sas.ActivityID, sas.ActivityType, at.ActivityType AS ActivityTypeName, ats.Status, 'EQUIP' AS Craft,
efa.FATagNumber AS Spool1, efa.FABidID AS Spool2, 
efa.FAActivitySelect AS LineNumber, 'N/A' AS DrawingNumber, 'N/A' AS SheetNumber, 
'N/A' AS Line2, 'N/A' AS DWG2, 'N/A' AS Sheet2, 'N/A' AS Size , 
efa.FANotes, efa.FAQuantity AS Quantity, 'N/A' AS Area, efa.FAPercentComplete AS PercentClaim, efa.FARework AS Rework

FROM SubmissionActivityStatus sas
LEFT JOIN PSA.REF_ActivityTypes at
	ON at.ID =sas.ActivityType
LEFT JOIN PSA.REF_ActivityStatuses ats
	ON ats.ID = sas.fk_ActivityStatus
JOIN EquipFA efa
	ON efa.ActivityID = sas.ActivityID
WHERE sas.fk_ActivityStatus IN (2,7,9,11)
AND (sas.LockField IS NULL OR sas.LockField = :UserID)) wmTempTable
        ]]>
    <query-param name="UserID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetSettingPipeHydroPercent">
        <![CDATA[
        SELECT *
FROM SETTINGS
WHERE Label = 'HydroHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingPipeHydroPercent__count">
        <![CDATA[
        select count(*) from (SELECT *
FROM SETTINGS
WHERE Label = 'HydroHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageCivil">
        <![CDATA[
        SELECT DISTINCT ctd.EngDrawingNumber, ctd.DetailDrawingNumber, ctd.FoundationDescription
FROM CivilTrackerDetails ctd
WHERE ctd.TestPackageNumber = :TestPackage
ORDER BY ctd.EngDrawingNumber, ctd.DetailDrawingNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetDrawingByTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT ctd.EngDrawingNumber, ctd.DetailDrawingNumber, ctd.FoundationDescription
FROM CivilTrackerDetails ctd
WHERE ctd.TestPackageNumber = :TestPackage
ORDER BY ctd.EngDrawingNumber, ctd.DetailDrawingNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateCivilMiscQuantity">
        <![CDATA[
        UPDATE `CivilMisc` 
SET 
`MiscPercentComplete`= :Percent
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Percent" type="java.math.BigDecimal"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSS">
        <![CDATA[
        UPDATE SubmissionActivityStatus sas
SET 
sas.fk_ActivityStatus = :ActivityStatus,
sas.fk_LastModifiedBy = :UserID,
sas.fk_BidIDAssigned = IF(:BidID = 0, sas.fk_BidIDAssigned, :BidID)
WHERE sas.ActivityID = :FieldActivityID
        ]]>
    <query-param name="ActivityStatus" type="java.lang.Integer"/>
    <query-param name="UserID" type="java.lang.Integer"/>
    <query-param name="BidID" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackagePipe">
        <![CDATA[
        SELECT ptd.TestPackageNumber, 

count(ptd.BidID) AS ItemsTotal, 

TRUNCATE(sum(ste.ReadyForTestingHours),6) AS ReadyForTestingHours,
TRUNCATE(sum(ste.HydroHours),6) AS HydroHours,
TRUNCATE(sum(ste.ClientTurnoverHours),6) AS ClientTurnoverHours,

SUM(ert.ReadyForTestingInstalled) AS ReadyForTestingInstalled, 
SUM(ert.HydroInstalled) AS HydroInstalled, 
SUM(ert.ClientTurnoverInstalled) AS ClientTurnoverInstalled,

TRUNCATE(sum(ert.EarnedReadyForTestingHours),6) AS EarnedReadyForTestingHours, 
TRUNCATE(sum(ert.EarnedHydroHours),6) AS EarnedHydroHours, 
TRUNCATE(sum(ert.EarnedClientTurnoverHours),6) AS EarnedClientTurnoverHours,

TRUNCATE(sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity *(ptd.TakeOffQuantity 
- (COALESCE(er.InstalledFootage,0) 
  + COALESCE(er.InstalledBoltUps,0)
  + COALESCE(er.InstalledWelds,0)
  + COALESCE(er.InstalledCuts,0)
  + COALESCE(er.InstalledTrim,0)
  + COALESCE(er.InstalledSupports,0)
  + COALESCE(er.InstalledMisc,0)
  + COALESCE(er.InstalledDemo,0))))),6) AS LooseHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT min(ptd.ID) AS ID,
    
IF( sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) 
	> ptd.TakeOffQuantity, /*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0))),0))
    ) AS EarnedErectionHours,

IF(sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0))), 0))
    ) AS EarnedBoltUpHours,

IF(sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0))),0))
    ) AS EarnedWeldHours,

IF(sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0))),0))
    ) AS EarnedCutHours,
    
IF(sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0))),0))
    ) AS EarnedTrimHours,
    
IF(sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0))),0))
    ) AS EarnedSupportHours,
    
IF(sum(COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0)),0))
    ) AS EarnedMiscHours,
    
IF(sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours,
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours/ptd.TakeOffQuantity*(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0))),0))
    ) AS EarnedDemoHours,
    

sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS InstalledBoltUps, 
sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledCuts,
sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0)) AS InstalledSupports,
sum(COALESCE(pm.MiscQuantity,0)) AS InstalledMisc,
sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo

FROM `Job1112`.SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
				
			LEFT JOIN `Job1112`.PipeErection pe
				ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0

			LEFT JOIN `Job1112`.PipeBoltUp pb
				ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
		 
			LEFT JOIN `Job1112`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND sas.ActivityType = 22 AND  pw.WeldRework = 0
		 
			LEFT JOIN `Job1112`.PipeWeld pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.WeldRework = 0
				
			LEFT JOIN `Job1112`.PipeTrim pt
				ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
			
            LEFT JOIN `Job1112`.PipeSupports psu
				ON psu.ActivityID = sas.ActivityID AND psu.SupportRework = 0
				
			LEFT JOIN `Job1112`.PipeDemo pd
				ON pd.ActivityID = sas.ActivityID
			
			LEFT JOIN `Job1112`.`PipeTrackerDetails` ptd
				ON ptd.BidID = sas.fk_BidIDAssigned

		/* #### Begining of Misc activities assigned joins #### */	
			LEFT JOIN `Job1112`.PipeMisc pm
				ON pm.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "MISC"  AND pm.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "PE" AND pme.MiscRework = 0
			
			LEFT JOIN `Job1112`.PipeMisc pmb
				ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "BU" AND pmb.MiscRework = 0
			
			LEFT JOIN `Job1112`.PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "W" AND pmw.MiscRework = 0
				
			LEFT JOIN `Job1112`.PipeMisc pmc
				ON pmc.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "CUT" AND pmc.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pmt
				ON pmt.ActivityID = sas.ActivityID AND ptd.ECT = "T" AND ptd.PipingActivityType IN ("V","Plug","HpLp","Other","Blind") AND pmt.MiscRework = 0
			   
			LEFT JOIN `Job1112`.PipeMisc pmpsu
				ON pmpsu.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "S" AND pmpsu.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID AND ptd.ECT = "D" AND pmd.MiscRework = 0
        

        
WHERE fk_ActivityStatus IN (5,12)
GROUP BY ptd.BidID) er
		ON er.ID = ptd.ID

LEFT JOIN (SELECT min(ptd.ID) AS ID,
sum(COALESCE(steR.InstalledReadyForTesting, 0)) AS ReadyForTestingInstalled,
sum(COALESCE(steH.InstalledHydro, 0)) AS HydroInstalled,
sum(COALESCE(steC.InstalledClientTurnover, 0)) AS ClientTurnoverInstalled,

sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * steR.InstalledReadyForTesting, 0)) AS EarnedReadyForTestingHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent') * steH.InstalledHydro, 0)) AS EarnedHydroHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent') * steC.InstalledClientTurnover, 0)) AS EarnedClientTurnoverHours

FROM `Job1112`.`PipeTrackerDetails` ptd

		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steR
			ON steR.TestingTestPackageNumber = ptd.TestPackageNumber AND steR.ActivityType = 41 AND ptd.ECT != "D"
			
		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledHydro
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steH
			ON steH.TestingTestPackageNumber = ptd.TestPackageNumber AND steH.ActivityType = 42 AND ptd.ECT != "D"
			
		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledClientTurnover
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steC
			ON steC.TestingTestPackageNumber = ptd.TestPackageNumber AND steC.ActivityType = 43 AND ptd.ECT != "D"

		GROUP BY ptd.BidID) ert
	ON ert.ID = ptd.ID
    
LEFT JOIN (SELECT ptd.ID,
			COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent'),0) AS TestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent')),0) AS ReadyForTestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent')),0) AS HydroHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent')),0) AS ClientTurnoverHours
			FROM PipeTrackerDetails ptd
			WHERE ptd.ECT != 'D') ste
	ON ste.ID = ptd.ID
  
    
WHERE ptd.TestPackageNumber = :TestPackage
GROUP BY ptd.TestPackageNumber
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackagePipe__count">
        <![CDATA[
        select count(*) from (SELECT ptd.TestPackageNumber, 

count(ptd.BidID) AS ItemsTotal, 

TRUNCATE(sum(ste.ReadyForTestingHours),6) AS ReadyForTestingHours,
TRUNCATE(sum(ste.HydroHours),6) AS HydroHours,
TRUNCATE(sum(ste.ClientTurnoverHours),6) AS ClientTurnoverHours,

SUM(ert.ReadyForTestingInstalled) AS ReadyForTestingInstalled, 
SUM(ert.HydroInstalled) AS HydroInstalled, 
SUM(ert.ClientTurnoverInstalled) AS ClientTurnoverInstalled,

TRUNCATE(sum(ert.EarnedReadyForTestingHours),6) AS EarnedReadyForTestingHours, 
TRUNCATE(sum(ert.EarnedHydroHours),6) AS EarnedHydroHours, 
TRUNCATE(sum(ert.EarnedClientTurnoverHours),6) AS EarnedClientTurnoverHours,

TRUNCATE(sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity *(ptd.TakeOffQuantity 
- (COALESCE(er.InstalledFootage,0) 
  + COALESCE(er.InstalledBoltUps,0)
  + COALESCE(er.InstalledWelds,0)
  + COALESCE(er.InstalledCuts,0)
  + COALESCE(er.InstalledTrim,0)
  + COALESCE(er.InstalledSupports,0)
  + COALESCE(er.InstalledMisc,0)
  + COALESCE(er.InstalledDemo,0))))),6) AS LooseHours

FROM PipeTrackerDetails ptd

LEFT JOIN (SELECT min(ptd.ID) AS ID,
    
IF( sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) 
	> ptd.TakeOffQuantity, /*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0))),0))
    ) AS EarnedErectionHours,

IF(sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0))), 0))
    ) AS EarnedBoltUpHours,

IF(sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0))),0))
    ) AS EarnedWeldHours,

IF(sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0))),0))
    ) AS EarnedCutHours,
    
IF(sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0))),0))
    ) AS EarnedTrimHours,
    
IF(sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0))),0))
    ) AS EarnedSupportHours,
    
IF(sum(COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent'),
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'MechHoursPercent')/ptd.TakeOffQuantity*COALESCE(IF(ptd.PipingActivityType = 'MISC' AND ptd.ECT != 'D', pm.MiscQuantity,0),0)),0))
    ) AS EarnedMiscHours,
    
IF(sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0))
	> ptd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ptd.EstimatedHours,
    /*FALSE*/ sum(COALESCE((ptd.EstimatedHours/ptd.TakeOffQuantity*(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0))),0))
    ) AS EarnedDemoHours,
    

sum(COALESCE(pe.ErectionLengthSpool1,0) + COALESCE(pe.ErectionLengthSpool2,0) + COALESCE(pe.ErectionLengthSpool3,0) + COALESCE(pe.ErectionLengthSpool4,0) + COALESCE(pe.ErectionLengthSpool5,0) + COALESCE(pe.ErectionLengthSpool6,0) + COALESCE(pme.MiscQuantity,0)) AS InstalledFootage,
sum(COALESCE(pb.BoltUpQuantity,0) + COALESCE(pmb.MiscQuantity,0)) AS InstalledBoltUps, 
sum(COALESCE(pw.WeldPercentCompleted * .01,0) + COALESCE(pmw.MiscQuantity,0)) AS InstalledWelds,
sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0)) AS InstalledCuts,
sum(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS InstalledTrim,
sum(COALESCE((psu.SupportPercentCompleted * .01 * psu.SupportQuantity),0) + COALESCE(pmpsu.MiscQuantity,0)) AS InstalledSupports,
sum(COALESCE(pm.MiscQuantity,0)) AS InstalledMisc,
sum(COALESCE(pd.DemoQuantity,0) + COALESCE(pmd.MiscQuantity,0)) AS InstalledDemo

FROM `Job1112`.SubmissionActivityStatus sas
			JOIN PSA.REF_ActivityTypes at
				ON at.ID = sas.ActivityType
				
			LEFT JOIN `Job1112`.PipeErection pe
				ON pe.ActivityID = sas.ActivityID AND pe.ErectionRework = 0

			LEFT JOIN `Job1112`.PipeBoltUp pb
				ON pb.ActivityID = sas.ActivityID AND pb.BoltUpRework = 0
		 
			LEFT JOIN `Job1112`.PipeWeld pw
				ON pw.ActivityID = sas.ActivityID AND sas.ActivityType = 22 AND  pw.WeldRework = 0
		 
			LEFT JOIN `Job1112`.PipeWeld pcut
				ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.WeldRework = 0
				
			LEFT JOIN `Job1112`.PipeTrim pt
				ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
			
            LEFT JOIN `Job1112`.PipeSupports psu
				ON psu.ActivityID = sas.ActivityID AND psu.SupportRework = 0
				
			LEFT JOIN `Job1112`.PipeDemo pd
				ON pd.ActivityID = sas.ActivityID
			
			LEFT JOIN `Job1112`.`PipeTrackerDetails` ptd
				ON ptd.BidID = sas.fk_BidIDAssigned

		/* #### Begining of Misc activities assigned joins #### */	
			LEFT JOIN `Job1112`.PipeMisc pm
				ON pm.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "MISC"  AND pm.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pme
				ON pme.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "PE" AND pme.MiscRework = 0
			
			LEFT JOIN `Job1112`.PipeMisc pmb
				ON pmb.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "BU" AND pmb.MiscRework = 0
			
			LEFT JOIN `Job1112`.PipeMisc pmw
				ON pmw.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "W" AND pmw.MiscRework = 0
				
			LEFT JOIN `Job1112`.PipeMisc pmc
				ON pmc.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "CUT" AND pmc.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pmt
				ON pmt.ActivityID = sas.ActivityID AND ptd.ECT = "T" AND ptd.PipingActivityType IN ("V","Plug","HpLp","Other","Blind") AND pmt.MiscRework = 0
			   
			LEFT JOIN `Job1112`.PipeMisc pmpsu
				ON pmpsu.ActivityID = sas.ActivityID AND ptd.PipingActivityType = "S" AND pmpsu.MiscRework = 0

			LEFT JOIN `Job1112`.PipeMisc pmd
				ON pmd.ActivityID = sas.ActivityID AND ptd.ECT = "D" AND pmd.MiscRework = 0
        

        
WHERE fk_ActivityStatus IN (5,12)
GROUP BY ptd.BidID) er
		ON er.ID = ptd.ID

LEFT JOIN (SELECT min(ptd.ID) AS ID,
sum(COALESCE(steR.InstalledReadyForTesting, 0)) AS ReadyForTestingInstalled,
sum(COALESCE(steH.InstalledHydro, 0)) AS HydroInstalled,
sum(COALESCE(steC.InstalledClientTurnover, 0)) AS ClientTurnoverInstalled,

sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent') * steR.InstalledReadyForTesting, 0)) AS EarnedReadyForTestingHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent') * steH.InstalledHydro, 0)) AS EarnedHydroHours,
sum(COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent') * steC.InstalledClientTurnover, 0)) AS EarnedClientTurnoverHours

FROM `Job1112`.`PipeTrackerDetails` ptd

		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledReadyForTesting
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 41 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steR
			ON steR.TestingTestPackageNumber = ptd.TestPackageNumber AND steR.ActivityType = 41 AND ptd.ECT != "D"
			
		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledHydro
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 42 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steH
			ON steH.TestingTestPackageNumber = ptd.TestPackageNumber AND steH.ActivityType = 42 AND ptd.ECT != "D"
			
		LEFT JOIN (SELECT ste.ActivityType, ste.TestingTestPackageNumber, 1 AS InstalledClientTurnover
					FROM `Job1112`.PipeTesting ste
					JOIN `Job1112`.SubmissionActivityStatus sas
						ON sas.ActivityID = ste.ActivityID AND sas.ActivityType = 43 AND sas.fk_ActivityStatus IN (5,12) AND ste.TestingRework = 0) steC
			ON steC.TestingTestPackageNumber = ptd.TestPackageNumber AND steC.ActivityType = 43 AND ptd.ECT != "D"

		GROUP BY ptd.BidID) ert
	ON ert.ID = ptd.ID
    
LEFT JOIN (SELECT ptd.ID,
			COALESCE(ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent'),0) AS TestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'CompleteForTestPercent')),0) AS ReadyForTestingHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'HydroHoursPercent')),0) AS HydroHours,
            COALESCE((ptd.EstimatedHours*(SELECT Value1 FROM SETTINGS WHERE Label = 'TestingHoursPercent')*(SELECT Value1 FROM SETTINGS WHERE Label = 'ClientTurnoverPercent')),0) AS ClientTurnoverHours
			FROM PipeTrackerDetails ptd
			WHERE ptd.ECT != 'D') ste
	ON ste.ID = ptd.ID
  
    
WHERE ptd.TestPackageNumber = :TestPackage
GROUP BY ptd.TestPackageNumber) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetSettingSteelSellPercent">
        <![CDATA[
        SELECT * 
FROM SETTINGS
WHERE Label = 'SteelSellHoursPercent'
        ]]>
    </sql-query>

    <sql-query name="GetSettingSteelSellPercent__count">
        <![CDATA[
        select count(*) from (SELECT * 
FROM SETTINGS
WHERE Label = 'SteelSellHoursPercent') wmTempTable
        ]]>
    </sql-query>

    <sql-query name="GetNotesByFieldActivityID">
        <![CDATA[
        SELECT sasn.Notes, sasn.TimeStamp, u.Email
FROM SASNotes sasn
	JOIN PSA.tblUserPSA u
		ON u.ID = sasn.UserID
WHERE sasn.ActivityID = :FieldActivityID
        ]]>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetNotesByFieldActivityID__count">
        <![CDATA[
        select count(*) from (SELECT sasn.Notes, sasn.TimeStamp, u.Email
FROM SASNotes sasn
	JOIN PSA.tblUserPSA u
		ON u.ID = sasn.UserID
WHERE sasn.ActivityID = :FieldActivityID) wmTempTable
        ]]>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeTrimQuantity">
        <![CDATA[
        UPDATE PipeTrim
SET
TrimQuantity = :Quantity
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityCutPrepInstalled">
        <![CDATA[
        SELECT sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

	LEFT JOIN PipeWeld pcut
		ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.WeldRework = 0
        
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	        
	LEFT JOIN PipeMisc pmc
		ON pmc.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "CUT" AND pmc.MiscRework = 0



WHERE sas.ActivityType IN (23, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityCutPrepInstalled__count">
        <![CDATA[
        select count(*) from (SELECT sum(COALESCE(pcut.WeldPercentCompleted * .01,0) + COALESCE(pmc.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

	LEFT JOIN PipeWeld pcut
		ON pcut.ActivityID = sas.ActivityID AND sas.ActivityType = 23 AND pcut.WeldRework = 0
        
    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	        
	LEFT JOIN PipeMisc pmc
		ON pmc.ActivityID = sas.ActivityID AND ptd.ECT != "D" AND ptd.PipingActivityType = "CUT" AND pmc.MiscRework = 0



WHERE sas.ActivityType IN (23, 91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeTesting">
        <![CDATA[
        UPDATE PipeTesting
SET 
TestingTestPackageNumber = :TestPackageNumber,
TestingRework = :Rework,
TestingNotes = :Notes
WHERE ActivityID= :FieldActivityID
        ]]>
    <query-param name="TestPackageNumber" type="java.lang.String"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdateSteelSellQuantity">
        <![CDATA[
        UPDATE `SteelSell` 
SET 

`FASellQuantity`= :Quantity
WHERE `ActivityID`= :FieldActivityID
        ]]>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="FieldActivityID" type="java.lang.Float"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageCivil">
        <![CDATA[
        SELECT ctd.BidID, ctd.TestPackageNumber, 

#### Count ####
count(ctd.BidID) AS SellPunchCount,

#### Hours ####
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,

#### Installed Count ####
sum(COALESCE(ers.InstalledSellPunch,0)) AS SellPunchInstalled,

#### Earned Hours ####
sum(IF(ers.InstalledSellPunch = 1, 
/*TRUE*/
(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')),
/*FALSE*/
0
)) AS EarnedSellPunchHours,

#### Loose Hours ####
sum(
(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent') / COALESCE(ctd.TakeOffQuantity,0)) 
*
(COALESCE(ctd.TakeOffQuantity,0) - COALESCE(EarnedFAHours,0))
) AS LooseHours

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT min(ctd.UID) AS UID,
### Hours Earned ###
IF(sum(COALESCE(IF(sas.ActivityType IN (70,97), ((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * ctd.TakeOffQuantity), COALESCE(cfa.FAQuantity,0)),0)) /*Nested IF convertes % to Quantity*/
	> ctd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ctd.EstimatedHours*', CivilHoursPercent, ',
    /*FALSE*/ sum(COALESCE((ctd.EstimatedHours*', CivilHoursPercent, '/ctd.TakeOffQuantity*(COALESCE(IF(sas.ActivityType IN (70,97), ((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * ctd.TakeOffQuantity), cfa.FAQuantity),0))), 0))
    ) AS EarnedFAHours

### SS Joins ###
FROM SubmissionActivityStatus sas
	JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN CivilFA cfa
		ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0

	LEFT JOIN CivilMisc cfm
		ON cfm.ActivityID = sas.ActivityID AND cfm.MiscRework = 0
 
    LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
				FROM`CivilTrackerDetails`
				GROUP BY BidID) ctd
		ON ctd.BidID = sas.fk_BidIDAssigned
        
WHERE fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (70,71,97)
GROUP BY ctd.BidID) er
		ON er.UID = ctd.UID


 ##### Earned Sell HOURS #####       
LEFT JOIN (SELECT min(ctd.UID) AS UID, cs.InstalledSellPunch
			FROM CivilTrackerDetails ctd
			LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
						FROM CivilSellPackage cs 
						INNER JOIN SubmissionActivityStatus sas
							ON sas.ActivityID = sas.ActivityID AND sas.fk_ActivityStatus IN (5,12)) cs
	ON cs.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"
GROUP BY ctd.BidID) ers
	On ers.UID = ctd.UID

WHERE ctd.TestPackageNumber = :TestPackage
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetQuantitiesTestPackageCivil__count">
        <![CDATA[
        select count(*) from (SELECT ctd.BidID, ctd.TestPackageNumber, 

#### Count ####
count(ctd.BidID) AS SellPunchCount,

#### Hours ####
sum(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')) AS SellPunchHours,

#### Installed Count ####
sum(COALESCE(ers.InstalledSellPunch,0)) AS SellPunchInstalled,

#### Earned Hours ####
sum(IF(ers.InstalledSellPunch = 1, 
/*TRUE*/
(ctd.EstimatedHours * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilSellPunchHoursPercent')),
/*FALSE*/
0
)) AS EarnedSellPunchHours,

#### Loose Hours ####
sum(
(COALESCE(ctd.EstimatedHours,0) * (SELECT Value1 FROM SETTINGS WHERE Label = 'CivilWorkHoursPercent') / COALESCE(ctd.TakeOffQuantity,0)) 
*
(COALESCE(ctd.TakeOffQuantity,0) - COALESCE(EarnedFAHours,0))
) AS LooseHours

FROM CivilTrackerDetails ctd

LEFT JOIN (SELECT min(ctd.UID) AS UID,
### Hours Earned ###
IF(sum(COALESCE(IF(sas.ActivityType IN (70,97), ((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * ctd.TakeOffQuantity), COALESCE(cfa.FAQuantity,0)),0)) /*Nested IF convertes % to Quantity*/
	> ctd.TakeOffQuantity,/*Is Installed Greater then TakeOff*/
    /*TRUE*/ ctd.EstimatedHours*', CivilHoursPercent, ',
    /*FALSE*/ sum(COALESCE((ctd.EstimatedHours*', CivilHoursPercent, '/ctd.TakeOffQuantity*(COALESCE(IF(sas.ActivityType IN (70,97), ((COALESCE(cfa.FAPercentComplete,0) + COALESCE(cfm.MiscPercentComplete,0)) * ctd.TakeOffQuantity), cfa.FAQuantity),0))), 0))
    ) AS EarnedFAHours

### SS Joins ###
FROM SubmissionActivityStatus sas
	JOIN PSA.REF_ActivityTypes at
		ON at.ID = sas.ActivityType
        
	LEFT JOIN CivilFA cfa
		ON cfa.ActivityID = sas.ActivityID AND cfa.FARework = 0

	LEFT JOIN CivilMisc cfm
		ON cfm.ActivityID = sas.ActivityID AND cfm.MiscRework = 0
 
    LEFT JOIN (SELECT min(UID) AS UID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours
				FROM`CivilTrackerDetails`
				GROUP BY BidID) ctd
		ON ctd.BidID = sas.fk_BidIDAssigned
        
WHERE fk_ActivityStatus IN (5,12)
AND sas.ActivityType IN (70,71,97)
GROUP BY ctd.BidID) er
		ON er.UID = ctd.UID


 ##### Earned Sell HOURS #####       
LEFT JOIN (SELECT min(ctd.UID) AS UID, cs.InstalledSellPunch
			FROM CivilTrackerDetails ctd
			LEFT JOIN (SELECT sas.ActivityType, cs.SellTestPackageNumber, 1 AS InstalledSellPunch
						FROM CivilSellPackage cs 
						INNER JOIN SubmissionActivityStatus sas
							ON sas.ActivityID = sas.ActivityID AND sas.fk_ActivityStatus IN (5,12)) cs
	ON cs.SellTestPackageNumber = ctd.TestPackageNumber AND ctd.ActivityType != "Demo"
GROUP BY ctd.BidID) ers
	On ers.UID = ctd.UID

WHERE ctd.TestPackageNumber = :TestPackage) wmTempTable
        ]]>
    <query-param name="TestPackage" type="java.lang.String"/>
    </sql-query>

    <sql-query name="GetReportDWRByDate">
        <![CDATA[
        SELECT sas.ActivityID AS FieldActivityID, pw.ID AS RowID,
pw.WeldSpool1, pw.WeldSpool2, pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, pw.WeldNumber,
pw.WeldStencil, pw.WeldSize, pw.WeldThickness, pw.WeldMaterial, pw.WeldType, pw.WeldLineSpec, pw.WeldProcedure, pw.WeldNotes,
sd.ReceivedTime
FROM SubmissionActivityStatus sas

JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID AND pw.ActivityType = 22

JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
    
WHERE sd.ReceivedTime BETWEEN :BeginDate and :EndDate

ORDER BY sd.ReceivedTime
        ]]>
    <query-param name="BeginDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetReportDWRByDate__count">
        <![CDATA[
        select count(*) from (SELECT sas.ActivityID AS FieldActivityID, pw.ID AS RowID,
pw.WeldSpool1, pw.WeldSpool2, pw.WeldLineNumber, pw.WeldDrawingNumber, pw.WeldSheetNumber, pw.WeldNumber,
pw.WeldStencil, pw.WeldSize, pw.WeldThickness, pw.WeldMaterial, pw.WeldType, pw.WeldLineSpec, pw.WeldProcedure, pw.WeldNotes,
sd.ReceivedTime
FROM SubmissionActivityStatus sas

JOIN PipeWeld pw
	ON pw.ActivityID = sas.ActivityID AND pw.ActivityType = 22

JOIN SubsDetails sd
	ON sd.SubmissionId = sas.SubmissionID
    
WHERE sd.ReceivedTime BETWEEN :BeginDate and :EndDate

ORDER BY sd.ReceivedTime) wmTempTable
        ]]>
    <query-param name="BeginDate" type="java.sql.Date"/>
    <query-param name="EndDate" type="java.sql.Date"/>
    </sql-query>

    <sql-query name="GetNoteCount">
        <![CDATA[
        SELECT count(sasn.ID) AS NoteCount
FROM SASNotes sasn
WHERE sasn.ActivityID = :FieldActivityID
        ]]>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetNoteCount__count">
        <![CDATA[
        select count(*) from (SELECT count(sasn.ID) AS NoteCount
FROM SASNotes sasn
WHERE sasn.ActivityID = :FieldActivityID) wmTempTable
        ]]>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTrim">
        <![CDATA[
        SELECT pt.* 
FROM PipeTrim pt
WHERE ID = :RowID

UNION ALL

SELECT  ptr.fk_OrgActivityId, ptr.ActivityID, 
ptr.TrimActivitySelect, ptr.TrimSize, ptr.TrimQuantity, ptr.TrimHandleType, ptr.TrimInstrumentType, ptr.TrimDrawingNumber, ptr.TrimLineNumber, ptr.TrimSheetNumber, ptr.TrimTimeInForm, ptr.TrimRework, ptr.TrimNotes ,

ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTrimREV ptr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeTrim__count">
        <![CDATA[
        select count(*) from (SELECT pt.* 
FROM PipeTrim pt
WHERE ID = :RowID

UNION ALL

SELECT  ptr.fk_OrgActivityId, ptr.ActivityID, 
ptr.TrimActivitySelect, ptr.TrimSize, ptr.TrimQuantity, ptr.TrimHandleType, ptr.TrimInstrumentType, ptr.TrimDrawingNumber, ptr.TrimLineNumber, ptr.TrimSheetNumber, ptr.TrimTimeInForm, ptr.TrimRework, ptr.TrimNotes ,

ptr.ActivityType, ptr.Rev, ptr.TimeStamp
FROM PipeTrimREV ptr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelMisc">
        <![CDATA[
        SELECT stlm.* 
FROM SteelMisc stlm
WHERE ID = :RowID

UNION ALL

SELECT stlmr.fk_OrgActivityId, stlmr.ActivityID, stlmr.MiscArea, stlmr.MiscPieceNumber, stlmr.MiscQuantity, stlmr.MiscRework, stlmr.MiscNotes, stlmr.ActivityType, stlmr.MiscTimeInForm, stlmr.Rev, stlmr.TimeStamp
FROM SteelMiscREV stlmr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistorySteelMisc__count">
        <![CDATA[
        select count(*) from (SELECT stlm.* 
FROM SteelMisc stlm
WHERE ID = :RowID

UNION ALL

SELECT stlmr.fk_OrgActivityId, stlmr.ActivityID, stlmr.MiscArea, stlmr.MiscPieceNumber, stlmr.MiscQuantity, stlmr.MiscRework, stlmr.MiscNotes, stlmr.ActivityType, stlmr.MiscTimeInForm, stlmr.Rev, stlmr.TimeStamp
FROM SteelMiscREV stlmr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilFA">
        <![CDATA[
        SELECT cfa.* 
FROM CivilFA cfa
WHERE ID = :RowID

UNION

SELECT cfar.fk_OrgActivityId, cfar.ActivityID, cfar.FABidID, cfar.FAFoundation, cfar.FADescription, cfar.FADrawingNumber, cfar.FADetailDrawingNumber, cfar.FAPercentComplete, cfar.FAQuantity, cfar.FARework, 
cfar.FANotes, cfar.ActivityType, cfar.FATimeInForm, cfar.Rev, cfar.TimeStamp
FROM CivilFAREV cfar
WHERE cfar.fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryCivilFA__count">
        <![CDATA[
        select count(*) from (SELECT cfa.* 
FROM CivilFA cfa
WHERE ID = :RowID

UNION

SELECT cfar.fk_OrgActivityId, cfar.ActivityID, cfar.FABidID, cfar.FAFoundation, cfar.FADescription, cfar.FADrawingNumber, cfar.FADetailDrawingNumber, cfar.FAPercentComplete, cfar.FAQuantity, cfar.FARework, 
cfar.FANotes, cfar.ActivityType, cfar.FATimeInForm, cfar.Rev, cfar.TimeStamp
FROM CivilFAREV cfar
WHERE cfar.fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeDemo">
        <![CDATA[
        UPDATE PipeDemo
SET 
DemoDrawingNumber = :DrawingNumber,
DemoLineNumber = :LineNumber,
DemoSheetNumber = :SheetNumber,
DemoQuantity = :Quantity,
DemoSize = :Size,
DemoNotes = :Notes
WHERE ActivityID= :FieldActivityID
        ]]>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Quantity" type="java.lang.Integer"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="UpdatePipeErection">
        <![CDATA[
        UPDATE PipeErection
SET
ErectionSpool1 = :Spool1,
ErectionLengthSpool1 = :Spool1Length,
ErectionSpool2 = :Spool2,
ErectionLengthSpool2 = :Spool2Length,
ErectionSpool3 = :Spool3,
ErectionLengthSpool3 = :Spool3Length,
ErectionSpool4 = :Spool4,
ErectionLengthSpool4 = :Spool4Length,
ErectionSpool5 = :Spool5,
ErectionLengthSpool5 = :Spool5Length,
ErectionSpool6 = :Spool6,
ErectionLengthSpool6 = :Spool6Length,
ErectionOnCords = :OnCords,
ErectionDrawingNumber = :DrawingNumber,
ErectionLineNumber = :LineNumber,
ErectionSheetNumber = :SheetNumber,
ErectionPipeSize = :Size,
ErectionRework = :Rework,
ErectionNotes = :Notes
WHERE ActivityID = :FieldActivityID
        ]]>
    <query-param name="Spool1" type="java.lang.String"/>
    <query-param name="Spool1Length" type="java.lang.Integer"/>
    <query-param name="Spool2" type="java.lang.String"/>
    <query-param name="Spool2Length" type="java.lang.Integer"/>
    <query-param name="Spool3" type="java.lang.String"/>
    <query-param name="Spool3Length" type="java.lang.Integer"/>
    <query-param name="Spool4" type="java.lang.String"/>
    <query-param name="Spool4Length" type="java.lang.Integer"/>
    <query-param name="Spool5" type="java.lang.String"/>
    <query-param name="Spool5Length" type="java.lang.Integer"/>
    <query-param name="Spool6" type="java.lang.String"/>
    <query-param name="Spool6Length" type="java.lang.Integer"/>
    <query-param name="OnCords" type="java.lang.Byte"/>
    <query-param name="DrawingNumber" type="java.lang.String"/>
    <query-param name="LineNumber" type="java.lang.String"/>
    <query-param name="SheetNumber" type="java.lang.String"/>
    <query-param name="Size" type="java.math.BigDecimal"/>
    <query-param name="Rework" type="java.lang.Integer"/>
    <query-param name="Notes" type="java.lang.String"/>
    <query-param name="FieldActivityID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityTrimInstalled">
        <![CDATA[
        SELECT SUM(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
   LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
        
	LEFT JOIN PipeMisc pmt
		ON pmt.ActivityID = sas.ActivityID AND ptd.ECT = "T" AND ptd.PipingActivityType IN ("V","Plug","HpLp","Other","Blind") AND pmt.MiscRework = 0



WHERE sas.ActivityType IN (30,31,33,34,35,39,91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetQuantityTrimInstalled__count">
        <![CDATA[
        select count(*) from (SELECT SUM(COALESCE(pt.TrimQuantity,0) + COALESCE(pmt.MiscQuantity,0)) AS Total

FROM SubmissionActivityStatus sas

    LEFT JOIN (SELECT min(ID) AS ID, BidID, sum(TakeOffQuantity) AS TakeOffQuantity, sum(EstimatedHours) AS EstimatedHours, ECT, PipingActivityType
				FROM `PipeTrackerDetails`
				GROUP BY BidID) ptd
		ON ptd.BidID = sas.fk_BidIDAssigned
	
   LEFT JOIN PipeTrim pt
		ON pt.ActivityID = sas.ActivityID AND pt.TrimRework = 0
        
	LEFT JOIN PipeMisc pmt
		ON pmt.ActivityID = sas.ActivityID AND ptd.ECT = "T" AND ptd.PipingActivityType IN ("V","Plug","HpLp","Other","Blind") AND pmt.MiscRework = 0



WHERE sas.ActivityType IN (30,31,33,34,35,39,91)
AND sas.fk_ActivityStatus IN (5,12)
AND fk_BidIDAssigned = :BidID) wmTempTable
        ]]>
    <query-param name="BidID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeDemo">
        <![CDATA[
        SELECT pd.* 
FROM PipeDemo pd
WHERE ID = :RowID

UNION ALL

SELECT  pdr.fk_OrgActivityId, pdr.ActivityID, 
pdr.DemoDrawingNumber, pdr.DemoLineNumber, pdr.DemoSheetNumber, pdr.DemoQuantity, pdr.DemoSize, pdr.DemoNotes,
pdr.ActivityType, pdr.DemoTimeInForm, pdr.Rev, pdr.TimeStamp
FROM PipeDemoREV pdr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="GetActivityHistoryPipeDemo__count">
        <![CDATA[
        select count(*) from (SELECT pd.* 
FROM PipeDemo pd
WHERE ID = :RowID

UNION ALL

SELECT  pdr.fk_OrgActivityId, pdr.ActivityID, 
pdr.DemoDrawingNumber, pdr.DemoLineNumber, pdr.DemoSheetNumber, pdr.DemoQuantity, pdr.DemoSize, pdr.DemoNotes,
pdr.ActivityType, pdr.DemoTimeInForm, pdr.Rev, pdr.TimeStamp
FROM PipeDemoREV pdr
WHERE fk_OrgActivityId = :RowID
ORDER BY TimeStamp DESC) wmTempTable
        ]]>
    <query-param name="RowID" type="java.lang.Integer"/>
    </sql-query>
</hibernate-mapping>
