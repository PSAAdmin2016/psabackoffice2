/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilFarev;
import com.psabackoffice.job1111.service.CivilFarevService;


/**
 * Controller object for domain model class CivilFarev.
 * @see CivilFarev
 */
@RestController("Job1111.CivilFarevController")
@Api(value = "CivilFarevController", description = "Exposes APIs to work with CivilFarev resource.")
@RequestMapping("/Job1111/CivilFarev")
public class CivilFarevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilFarevController.class);

    @Autowired
	@Qualifier("Job1111.CivilFarevService")
	private CivilFarevService civilFarevService;

	@ApiOperation(value = "Creates a new CivilFarev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CivilFarev createCivilFarev(@RequestBody CivilFarev civilFarev) {
		LOGGER.debug("Create CivilFarev with information: {}" , civilFarev);

		civilFarev = civilFarevService.create(civilFarev);
		LOGGER.debug("Created CivilFarev with information: {}" , civilFarev);

	    return civilFarev;
	}


    @ApiOperation(value = "Returns the CivilFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilFarev getCivilFarev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CivilFarev with id: {}" , id);

        CivilFarev foundCivilFarev = civilFarevService.getById(id);
        LOGGER.debug("CivilFarev details with id: {}" , foundCivilFarev);

        return foundCivilFarev;
    }

    @ApiOperation(value = "Updates the CivilFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilFarev editCivilFarev(@PathVariable("id") Integer id, @RequestBody CivilFarev civilFarev) throws EntityNotFoundException {
        LOGGER.debug("Editing CivilFarev with id: {}" , civilFarev.getId());

        civilFarev.setId(id);
        civilFarev = civilFarevService.update(civilFarev);
        LOGGER.debug("CivilFarev details with id: {}" , civilFarev);

        return civilFarev;
    }

    @ApiOperation(value = "Deletes the CivilFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCivilFarev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CivilFarev with id: {}" , id);

        CivilFarev deletedCivilFarev = civilFarevService.delete(id);

        return deletedCivilFarev != null;
    }

    /**
     * @deprecated Use {@link #findCivilFarevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CivilFarev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilFarev> searchCivilFarevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CivilFarevs list");
        return civilFarevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilFarev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilFarev> findCivilFarevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilFarevs list");
        return civilFarevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilFarev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilFarev> filterCivilFarevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilFarevs list");
        return civilFarevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCivilFarevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return civilFarevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CivilFarev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCivilFarevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CivilFarevs");
		return civilFarevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCivilFarevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return civilFarevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilFarevService instance
	 */
	protected void setCivilFarevService(CivilFarevService service) {
		this.civilFarevService = service;
	}

}

