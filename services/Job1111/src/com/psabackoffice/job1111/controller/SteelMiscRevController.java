/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelMiscRev;
import com.psabackoffice.job1111.service.SteelMiscRevService;


/**
 * Controller object for domain model class SteelMiscRev.
 * @see SteelMiscRev
 */
@RestController("Job1111.SteelMiscRevController")
@Api(value = "SteelMiscRevController", description = "Exposes APIs to work with SteelMiscRev resource.")
@RequestMapping("/Job1111/SteelMiscRev")
public class SteelMiscRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelMiscRevController.class);

    @Autowired
	@Qualifier("Job1111.SteelMiscRevService")
	private SteelMiscRevService steelMiscRevService;

	@ApiOperation(value = "Creates a new SteelMiscRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelMiscRev createSteelMiscRev(@RequestBody SteelMiscRev steelMiscRev) {
		LOGGER.debug("Create SteelMiscRev with information: {}" , steelMiscRev);

		steelMiscRev = steelMiscRevService.create(steelMiscRev);
		LOGGER.debug("Created SteelMiscRev with information: {}" , steelMiscRev);

	    return steelMiscRev;
	}


    @ApiOperation(value = "Returns the SteelMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelMiscRev getSteelMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelMiscRev with id: {}" , id);

        SteelMiscRev foundSteelMiscRev = steelMiscRevService.getById(id);
        LOGGER.debug("SteelMiscRev details with id: {}" , foundSteelMiscRev);

        return foundSteelMiscRev;
    }

    @ApiOperation(value = "Updates the SteelMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelMiscRev editSteelMiscRev(@PathVariable("id") Integer id, @RequestBody SteelMiscRev steelMiscRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelMiscRev with id: {}" , steelMiscRev.getId());

        steelMiscRev.setId(id);
        steelMiscRev = steelMiscRevService.update(steelMiscRev);
        LOGGER.debug("SteelMiscRev details with id: {}" , steelMiscRev);

        return steelMiscRev;
    }

    @ApiOperation(value = "Deletes the SteelMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelMiscRev with id: {}" , id);

        SteelMiscRev deletedSteelMiscRev = steelMiscRevService.delete(id);

        return deletedSteelMiscRev != null;
    }

    /**
     * @deprecated Use {@link #findSteelMiscRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelMiscRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMiscRev> searchSteelMiscRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelMiscRevs list");
        return steelMiscRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelMiscRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMiscRev> findSteelMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelMiscRevs list");
        return steelMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelMiscRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMiscRev> filterSteelMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelMiscRevs list");
        return steelMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelMiscRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelMiscRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelMiscRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelMiscRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelMiscRevs");
		return steelMiscRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelMiscRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelMiscRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelMiscRevService instance
	 */
	protected void setSteelMiscRevService(SteelMiscRevService service) {
		this.steelMiscRevService = service;
	}

}

