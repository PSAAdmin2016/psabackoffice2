/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilTrackerDetailsRev;
import com.psabackoffice.job1111.service.CivilTrackerDetailsRevService;


/**
 * Controller object for domain model class CivilTrackerDetailsRev.
 * @see CivilTrackerDetailsRev
 */
@RestController("Job1111.CivilTrackerDetailsRevController")
@Api(value = "CivilTrackerDetailsRevController", description = "Exposes APIs to work with CivilTrackerDetailsRev resource.")
@RequestMapping("/Job1111/CivilTrackerDetailsRev")
public class CivilTrackerDetailsRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilTrackerDetailsRevController.class);

    @Autowired
	@Qualifier("Job1111.CivilTrackerDetailsRevService")
	private CivilTrackerDetailsRevService civilTrackerDetailsRevService;

	@ApiOperation(value = "Creates a new CivilTrackerDetailsRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CivilTrackerDetailsRev createCivilTrackerDetailsRev(@RequestBody CivilTrackerDetailsRev civilTrackerDetailsRev) {
		LOGGER.debug("Create CivilTrackerDetailsRev with information: {}" , civilTrackerDetailsRev);

		civilTrackerDetailsRev = civilTrackerDetailsRevService.create(civilTrackerDetailsRev);
		LOGGER.debug("Created CivilTrackerDetailsRev with information: {}" , civilTrackerDetailsRev);

	    return civilTrackerDetailsRev;
	}


    @ApiOperation(value = "Returns the CivilTrackerDetailsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilTrackerDetailsRev getCivilTrackerDetailsRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CivilTrackerDetailsRev with id: {}" , id);

        CivilTrackerDetailsRev foundCivilTrackerDetailsRev = civilTrackerDetailsRevService.getById(id);
        LOGGER.debug("CivilTrackerDetailsRev details with id: {}" , foundCivilTrackerDetailsRev);

        return foundCivilTrackerDetailsRev;
    }

    @ApiOperation(value = "Updates the CivilTrackerDetailsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilTrackerDetailsRev editCivilTrackerDetailsRev(@PathVariable("id") Integer id, @RequestBody CivilTrackerDetailsRev civilTrackerDetailsRev) throws EntityNotFoundException {
        LOGGER.debug("Editing CivilTrackerDetailsRev with id: {}" , civilTrackerDetailsRev.getUid());

        civilTrackerDetailsRev.setUid(id);
        civilTrackerDetailsRev = civilTrackerDetailsRevService.update(civilTrackerDetailsRev);
        LOGGER.debug("CivilTrackerDetailsRev details with id: {}" , civilTrackerDetailsRev);

        return civilTrackerDetailsRev;
    }

    @ApiOperation(value = "Deletes the CivilTrackerDetailsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCivilTrackerDetailsRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CivilTrackerDetailsRev with id: {}" , id);

        CivilTrackerDetailsRev deletedCivilTrackerDetailsRev = civilTrackerDetailsRevService.delete(id);

        return deletedCivilTrackerDetailsRev != null;
    }

    /**
     * @deprecated Use {@link #findCivilTrackerDetailsRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CivilTrackerDetailsRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerDetailsRev> searchCivilTrackerDetailsRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CivilTrackerDetailsRevs list");
        return civilTrackerDetailsRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilTrackerDetailsRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerDetailsRev> findCivilTrackerDetailsRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilTrackerDetailsRevs list");
        return civilTrackerDetailsRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilTrackerDetailsRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerDetailsRev> filterCivilTrackerDetailsRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilTrackerDetailsRevs list");
        return civilTrackerDetailsRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCivilTrackerDetailsRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return civilTrackerDetailsRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CivilTrackerDetailsRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCivilTrackerDetailsRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CivilTrackerDetailsRevs");
		return civilTrackerDetailsRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCivilTrackerDetailsRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return civilTrackerDetailsRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilTrackerDetailsRevService instance
	 */
	protected void setCivilTrackerDetailsRevService(CivilTrackerDetailsRevService service) {
		this.civilTrackerDetailsRevService = service;
	}

}

