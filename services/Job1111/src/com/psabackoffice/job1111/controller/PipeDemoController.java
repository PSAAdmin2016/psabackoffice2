/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.PipeDemo;
import com.psabackoffice.job1111.service.PipeDemoService;


/**
 * Controller object for domain model class PipeDemo.
 * @see PipeDemo
 */
@RestController("Job1111.PipeDemoController")
@Api(value = "PipeDemoController", description = "Exposes APIs to work with PipeDemo resource.")
@RequestMapping("/Job1111/PipeDemo")
public class PipeDemoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipeDemoController.class);

    @Autowired
	@Qualifier("Job1111.PipeDemoService")
	private PipeDemoService pipeDemoService;

	@ApiOperation(value = "Creates a new PipeDemo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeDemo createPipeDemo(@RequestBody PipeDemo pipeDemo) {
		LOGGER.debug("Create PipeDemo with information: {}" , pipeDemo);

		pipeDemo = pipeDemoService.create(pipeDemo);
		LOGGER.debug("Created PipeDemo with information: {}" , pipeDemo);

	    return pipeDemo;
	}

    @ApiOperation(value = "Returns the PipeDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeDemo getPipeDemo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PipeDemo with id: {}" , id);

        PipeDemo foundPipeDemo = pipeDemoService.getById(id);
        LOGGER.debug("PipeDemo details with id: {}" , foundPipeDemo);

        return foundPipeDemo;
    }

    @ApiOperation(value = "Updates the PipeDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeDemo editPipeDemo(@PathVariable("id") Integer id, @RequestBody PipeDemo pipeDemo) throws EntityNotFoundException {
        LOGGER.debug("Editing PipeDemo with id: {}" , pipeDemo.getId());

        pipeDemo.setId(id);
        pipeDemo = pipeDemoService.update(pipeDemo);
        LOGGER.debug("PipeDemo details with id: {}" , pipeDemo);

        return pipeDemo;
    }

    @ApiOperation(value = "Deletes the PipeDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePipeDemo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PipeDemo with id: {}" , id);

        PipeDemo deletedPipeDemo = pipeDemoService.delete(id);

        return deletedPipeDemo != null;
    }

    /**
     * @deprecated Use {@link #findPipeDemos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PipeDemo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDemo> searchPipeDemosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PipeDemos list");
        return pipeDemoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeDemo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDemo> findPipeDemos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeDemos list");
        return pipeDemoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeDemo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDemo> filterPipeDemos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeDemos list");
        return pipeDemoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipeDemos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipeDemoService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PipeDemo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipeDemos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PipeDemos");
		return pipeDemoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipeDemoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipeDemoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeDemoService instance
	 */
	protected void setPipeDemoService(PipeDemoService service) {
		this.pipeDemoService = service;
	}

}

