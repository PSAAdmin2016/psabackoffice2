/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.PipeDelay;
import com.psabackoffice.job1111.service.PipeDelayService;


/**
 * Controller object for domain model class PipeDelay.
 * @see PipeDelay
 */
@RestController("Job1111.PipeDelayController")
@Api(value = "PipeDelayController", description = "Exposes APIs to work with PipeDelay resource.")
@RequestMapping("/Job1111/PipeDelay")
public class PipeDelayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipeDelayController.class);

    @Autowired
	@Qualifier("Job1111.PipeDelayService")
	private PipeDelayService pipeDelayService;

	@ApiOperation(value = "Creates a new PipeDelay instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public PipeDelay createPipeDelay(@RequestBody PipeDelay pipeDelay) {
		LOGGER.debug("Create PipeDelay with information: {}" , pipeDelay);

		pipeDelay = pipeDelayService.create(pipeDelay);
		LOGGER.debug("Created PipeDelay with information: {}" , pipeDelay);

	    return pipeDelay;
	}


    @ApiOperation(value = "Returns the PipeDelay instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeDelay getPipeDelay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PipeDelay with id: {}" , id);

        PipeDelay foundPipeDelay = pipeDelayService.getById(id);
        LOGGER.debug("PipeDelay details with id: {}" , foundPipeDelay);

        return foundPipeDelay;
    }

    @ApiOperation(value = "Updates the PipeDelay instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeDelay editPipeDelay(@PathVariable("id") Integer id, @RequestBody PipeDelay pipeDelay) throws EntityNotFoundException {
        LOGGER.debug("Editing PipeDelay with id: {}" , pipeDelay.getActivityId());

        pipeDelay.setActivityId(id);
        pipeDelay = pipeDelayService.update(pipeDelay);
        LOGGER.debug("PipeDelay details with id: {}" , pipeDelay);

        return pipeDelay;
    }

    @ApiOperation(value = "Deletes the PipeDelay instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePipeDelay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PipeDelay with id: {}" , id);

        PipeDelay deletedPipeDelay = pipeDelayService.delete(id);

        return deletedPipeDelay != null;
    }

    /**
     * @deprecated Use {@link #findPipeDelays(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PipeDelay instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDelay> searchPipeDelaysByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PipeDelays list");
        return pipeDelayService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeDelay instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDelay> findPipeDelays(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeDelays list");
        return pipeDelayService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeDelay instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeDelay> filterPipeDelays(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeDelays list");
        return pipeDelayService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipeDelays(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipeDelayService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PipeDelay instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipeDelays( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PipeDelays");
		return pipeDelayService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipeDelayAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipeDelayService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeDelayService instance
	 */
	protected void setPipeDelayService(PipeDelayService service) {
		this.pipeDelayService = service;
	}

}

