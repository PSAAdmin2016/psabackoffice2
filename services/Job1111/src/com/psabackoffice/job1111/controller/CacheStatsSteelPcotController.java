/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheStatsSteelPcot;
import com.psabackoffice.job1111.service.CacheStatsSteelPcotService;


/**
 * Controller object for domain model class CacheStatsSteelPcot.
 * @see CacheStatsSteelPcot
 */
@RestController("Job1111.CacheStatsSteelPcotController")
@Api(value = "CacheStatsSteelPcotController", description = "Exposes APIs to work with CacheStatsSteelPcot resource.")
@RequestMapping("/Job1111/CacheStatsSteelPcot")
public class CacheStatsSteelPcotController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheStatsSteelPcotController.class);

    @Autowired
	@Qualifier("Job1111.CacheStatsSteelPcotService")
	private CacheStatsSteelPcotService cacheStatsSteelPcotService;

	@ApiOperation(value = "Creates a new CacheStatsSteelPcot instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsSteelPcot createCacheStatsSteelPcot(@RequestBody CacheStatsSteelPcot cacheStatsSteelPcot) {
		LOGGER.debug("Create CacheStatsSteelPcot with information: {}" , cacheStatsSteelPcot);

		cacheStatsSteelPcot = cacheStatsSteelPcotService.create(cacheStatsSteelPcot);
		LOGGER.debug("Created CacheStatsSteelPcot with information: {}" , cacheStatsSteelPcot);

	    return cacheStatsSteelPcot;
	}

    @ApiOperation(value = "Returns the CacheStatsSteelPcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsSteelPcot getCacheStatsSteelPcot(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheStatsSteelPcot with id: {}" , id);

        CacheStatsSteelPcot foundCacheStatsSteelPcot = cacheStatsSteelPcotService.getById(id);
        LOGGER.debug("CacheStatsSteelPcot details with id: {}" , foundCacheStatsSteelPcot);

        return foundCacheStatsSteelPcot;
    }

    @ApiOperation(value = "Updates the CacheStatsSteelPcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsSteelPcot editCacheStatsSteelPcot(@PathVariable("id") Integer id, @RequestBody CacheStatsSteelPcot cacheStatsSteelPcot) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheStatsSteelPcot with id: {}" , cacheStatsSteelPcot.getId());

        cacheStatsSteelPcot.setId(id);
        cacheStatsSteelPcot = cacheStatsSteelPcotService.update(cacheStatsSteelPcot);
        LOGGER.debug("CacheStatsSteelPcot details with id: {}" , cacheStatsSteelPcot);

        return cacheStatsSteelPcot;
    }

    @ApiOperation(value = "Deletes the CacheStatsSteelPcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheStatsSteelPcot(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheStatsSteelPcot with id: {}" , id);

        CacheStatsSteelPcot deletedCacheStatsSteelPcot = cacheStatsSteelPcotService.delete(id);

        return deletedCacheStatsSteelPcot != null;
    }

    /**
     * @deprecated Use {@link #findCacheStatsSteelPcots(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheStatsSteelPcot instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsSteelPcot> searchCacheStatsSteelPcotsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheStatsSteelPcots list");
        return cacheStatsSteelPcotService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsSteelPcot instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsSteelPcot> findCacheStatsSteelPcots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsSteelPcots list");
        return cacheStatsSteelPcotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsSteelPcot instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsSteelPcot> filterCacheStatsSteelPcots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsSteelPcots list");
        return cacheStatsSteelPcotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheStatsSteelPcots(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheStatsSteelPcotService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheStatsSteelPcot instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheStatsSteelPcots( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheStatsSteelPcots");
		return cacheStatsSteelPcotService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheStatsSteelPcotAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheStatsSteelPcotService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheStatsSteelPcotService instance
	 */
	protected void setCacheStatsSteelPcotService(CacheStatsSteelPcotService service) {
		this.cacheStatsSteelPcotService = service;
	}

}

