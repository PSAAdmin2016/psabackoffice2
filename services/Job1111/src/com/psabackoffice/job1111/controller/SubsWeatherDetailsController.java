/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsDetails;
import com.psabackoffice.job1111.SubsWeatherDetails;
import com.psabackoffice.job1111.service.SubsWeatherDetailsService;


/**
 * Controller object for domain model class SubsWeatherDetails.
 * @see SubsWeatherDetails
 */
@RestController("Job1111.SubsWeatherDetailsController")
@Api(value = "SubsWeatherDetailsController", description = "Exposes APIs to work with SubsWeatherDetails resource.")
@RequestMapping("/Job1111/SubsWeatherDetails")
public class SubsWeatherDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsWeatherDetailsController.class);

    @Autowired
	@Qualifier("Job1111.SubsWeatherDetailsService")
	private SubsWeatherDetailsService subsWeatherDetailsService;

	@ApiOperation(value = "Creates a new SubsWeatherDetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsWeatherDetails createSubsWeatherDetails(@RequestBody SubsWeatherDetails subsWeatherDetails) {
		LOGGER.debug("Create SubsWeatherDetails with information: {}" , subsWeatherDetails);

		subsWeatherDetails = subsWeatherDetailsService.create(subsWeatherDetails);
		LOGGER.debug("Created SubsWeatherDetails with information: {}" , subsWeatherDetails);

	    return subsWeatherDetails;
	}


    @ApiOperation(value = "Returns the SubsWeatherDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeatherDetails getSubsWeatherDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsWeatherDetails with id: {}" , id);

        SubsWeatherDetails foundSubsWeatherDetails = subsWeatherDetailsService.getById(id);
        LOGGER.debug("SubsWeatherDetails details with id: {}" , foundSubsWeatherDetails);

        return foundSubsWeatherDetails;
    }

    @ApiOperation(value = "Updates the SubsWeatherDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeatherDetails editSubsWeatherDetails(@PathVariable("id") Integer id, @RequestBody SubsWeatherDetails subsWeatherDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsWeatherDetails with id: {}" , subsWeatherDetails.getId());

        subsWeatherDetails.setId(id);
        subsWeatherDetails = subsWeatherDetailsService.update(subsWeatherDetails);
        LOGGER.debug("SubsWeatherDetails details with id: {}" , subsWeatherDetails);

        return subsWeatherDetails;
    }

    @ApiOperation(value = "Deletes the SubsWeatherDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsWeatherDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsWeatherDetails with id: {}" , id);

        SubsWeatherDetails deletedSubsWeatherDetails = subsWeatherDetailsService.delete(id);

        return deletedSubsWeatherDetails != null;
    }

    /**
     * @deprecated Use {@link #findSubsWeatherDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsWeatherDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeatherDetails> searchSubsWeatherDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsWeatherDetails list");
        return subsWeatherDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeatherDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeatherDetails> findSubsWeatherDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWeatherDetails list");
        return subsWeatherDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeatherDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeatherDetails> filterSubsWeatherDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWeatherDetails list");
        return subsWeatherDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsWeatherDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsWeatherDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsWeatherDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsWeatherDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsWeatherDetails");
		return subsWeatherDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsWeatherDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsWeatherDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsDetailses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDetails> findAssociatedSubsDetailses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsDetailses");
        return subsWeatherDetailsService.findAssociatedSubsDetailses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsWeatherDetailsService instance
	 */
	protected void setSubsWeatherDetailsService(SubsWeatherDetailsService service) {
		this.subsWeatherDetailsService = service;
	}

}

