/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsMiscRev;
import com.psabackoffice.job1111.service.SubsMiscRevService;


/**
 * Controller object for domain model class SubsMiscRev.
 * @see SubsMiscRev
 */
@RestController("Job1111.SubsMiscRevController")
@Api(value = "SubsMiscRevController", description = "Exposes APIs to work with SubsMiscRev resource.")
@RequestMapping("/Job1111/SubsMiscRev")
public class SubsMiscRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsMiscRevController.class);

    @Autowired
	@Qualifier("Job1111.SubsMiscRevService")
	private SubsMiscRevService subsMiscRevService;

	@ApiOperation(value = "Creates a new SubsMiscRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsMiscRev createSubsMiscRev(@RequestBody SubsMiscRev subsMiscRev) {
		LOGGER.debug("Create SubsMiscRev with information: {}" , subsMiscRev);

		subsMiscRev = subsMiscRevService.create(subsMiscRev);
		LOGGER.debug("Created SubsMiscRev with information: {}" , subsMiscRev);

	    return subsMiscRev;
	}


    @ApiOperation(value = "Returns the SubsMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsMiscRev getSubsMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsMiscRev with id: {}" , id);

        SubsMiscRev foundSubsMiscRev = subsMiscRevService.getById(id);
        LOGGER.debug("SubsMiscRev details with id: {}" , foundSubsMiscRev);

        return foundSubsMiscRev;
    }

    @ApiOperation(value = "Updates the SubsMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsMiscRev editSubsMiscRev(@PathVariable("id") Integer id, @RequestBody SubsMiscRev subsMiscRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsMiscRev with id: {}" , subsMiscRev.getId());

        subsMiscRev.setId(id);
        subsMiscRev = subsMiscRevService.update(subsMiscRev);
        LOGGER.debug("SubsMiscRev details with id: {}" , subsMiscRev);

        return subsMiscRev;
    }

    @ApiOperation(value = "Deletes the SubsMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsMiscRev with id: {}" , id);

        SubsMiscRev deletedSubsMiscRev = subsMiscRevService.delete(id);

        return deletedSubsMiscRev != null;
    }

    /**
     * @deprecated Use {@link #findSubsMiscRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsMiscRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsMiscRev> searchSubsMiscRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsMiscRevs list");
        return subsMiscRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsMiscRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsMiscRev> findSubsMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsMiscRevs list");
        return subsMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsMiscRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsMiscRev> filterSubsMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsMiscRevs list");
        return subsMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsMiscRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsMiscRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsMiscRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsMiscRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsMiscRevs");
		return subsMiscRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsMiscRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsMiscRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsMiscRevService instance
	 */
	protected void setSubsMiscRevService(SubsMiscRevService service) {
		this.subsMiscRevService = service;
	}

}

