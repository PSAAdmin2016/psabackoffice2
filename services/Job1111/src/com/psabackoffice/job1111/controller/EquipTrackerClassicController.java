/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.EquipTrackerClassic;
import com.psabackoffice.job1111.service.EquipTrackerClassicService;


/**
 * Controller object for domain model class EquipTrackerClassic.
 * @see EquipTrackerClassic
 */
@RestController("Job1111.EquipTrackerClassicController")
@Api(value = "EquipTrackerClassicController", description = "Exposes APIs to work with EquipTrackerClassic resource.")
@RequestMapping("/Job1111/EquipTrackerClassic")
public class EquipTrackerClassicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EquipTrackerClassicController.class);

    @Autowired
	@Qualifier("Job1111.EquipTrackerClassicService")
	private EquipTrackerClassicService equipTrackerClassicService;

	@ApiOperation(value = "Creates a new EquipTrackerClassic instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipTrackerClassic createEquipTrackerClassic(@RequestBody EquipTrackerClassic equipTrackerClassic) {
		LOGGER.debug("Create EquipTrackerClassic with information: {}" , equipTrackerClassic);

		equipTrackerClassic = equipTrackerClassicService.create(equipTrackerClassic);
		LOGGER.debug("Created EquipTrackerClassic with information: {}" , equipTrackerClassic);

	    return equipTrackerClassic;
	}

    @ApiOperation(value = "Returns the EquipTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public EquipTrackerClassic getEquipTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EquipTrackerClassic with id: {}" , id);

        EquipTrackerClassic foundEquipTrackerClassic = equipTrackerClassicService.getById(id);
        LOGGER.debug("EquipTrackerClassic details with id: {}" , foundEquipTrackerClassic);

        return foundEquipTrackerClassic;
    }

    @ApiOperation(value = "Updates the EquipTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipTrackerClassic editEquipTrackerClassic(@PathVariable("id") Integer id, @RequestBody EquipTrackerClassic equipTrackerClassic) {
        LOGGER.debug("Editing EquipTrackerClassic with id: {}" , equipTrackerClassic.getUid());

        equipTrackerClassic.setUid(id);
        equipTrackerClassic = equipTrackerClassicService.update(equipTrackerClassic);
        LOGGER.debug("EquipTrackerClassic details with id: {}" , equipTrackerClassic);

        return equipTrackerClassic;
    }

    @ApiOperation(value = "Deletes the EquipTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteEquipTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EquipTrackerClassic with id: {}" , id);

        EquipTrackerClassic deletedEquipTrackerClassic = equipTrackerClassicService.delete(id);

        return deletedEquipTrackerClassic != null;
    }

    /**
     * @deprecated Use {@link #findEquipTrackerClassics(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EquipTrackerClassic instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerClassic> searchEquipTrackerClassicsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EquipTrackerClassics list by query filter:{}", (Object) queryFilters);
        return equipTrackerClassicService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipTrackerClassic instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerClassic> findEquipTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipTrackerClassics list by filter:", query);
        return equipTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipTrackerClassic instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerClassic> filterEquipTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipTrackerClassics list by filter", query);
        return equipTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEquipTrackerClassics(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return equipTrackerClassicService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EquipTrackerClassic instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEquipTrackerClassics( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EquipTrackerClassics");
		return equipTrackerClassicService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEquipTrackerClassicAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return equipTrackerClassicService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipTrackerClassicService instance
	 */
	protected void setEquipTrackerClassicService(EquipTrackerClassicService service) {
		this.equipTrackerClassicService = service;
	}

}

