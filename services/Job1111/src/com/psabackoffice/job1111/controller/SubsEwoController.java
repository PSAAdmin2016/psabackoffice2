/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsEwo;
import com.psabackoffice.job1111.service.SubsEwoService;


/**
 * Controller object for domain model class SubsEwo.
 * @see SubsEwo
 */
@RestController("Job1111.SubsEwoController")
@Api(value = "SubsEwoController", description = "Exposes APIs to work with SubsEwo resource.")
@RequestMapping("/Job1111/SubsEwo")
public class SubsEwoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsEwoController.class);

    @Autowired
	@Qualifier("Job1111.SubsEwoService")
	private SubsEwoService subsEwoService;

	@ApiOperation(value = "Creates a new SubsEwo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsEwo createSubsEwo(@RequestBody SubsEwo subsEwo) {
		LOGGER.debug("Create SubsEwo with information: {}" , subsEwo);

		subsEwo = subsEwoService.create(subsEwo);
		LOGGER.debug("Created SubsEwo with information: {}" , subsEwo);

	    return subsEwo;
	}

    @ApiOperation(value = "Returns the SubsEwo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public SubsEwo getSubsEwo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SubsEwo with id: {}" , id);

        SubsEwo foundSubsEwo = subsEwoService.getById(id);
        LOGGER.debug("SubsEwo details with id: {}" , foundSubsEwo);

        return foundSubsEwo;
    }

    @ApiOperation(value = "Updates the SubsEwo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsEwo editSubsEwo(@PathVariable("id") Integer id, @RequestBody SubsEwo subsEwo) {
        LOGGER.debug("Editing SubsEwo with id: {}" , subsEwo.getId());

        subsEwo.setId(id);
        subsEwo = subsEwoService.update(subsEwo);
        LOGGER.debug("SubsEwo details with id: {}" , subsEwo);

        return subsEwo;
    }

    @ApiOperation(value = "Deletes the SubsEwo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteSubsEwo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SubsEwo with id: {}" , id);

        SubsEwo deletedSubsEwo = subsEwoService.delete(id);

        return deletedSubsEwo != null;
    }

    /**
     * @deprecated Use {@link #findSubsEwos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsEwo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsEwo> searchSubsEwosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsEwos list by query filter:{}", (Object) queryFilters);
        return subsEwoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsEwo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsEwo> findSubsEwos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsEwos list by filter:", query);
        return subsEwoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsEwo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsEwo> filterSubsEwos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsEwos list by filter", query);
        return subsEwoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsEwos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsEwoService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsEwo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsEwos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsEwos");
		return subsEwoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsEwoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsEwoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsEwoService instance
	 */
	protected void setSubsEwoService(SubsEwoService service) {
		this.subsEwoService = service;
	}

}

