/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilMiscRev;
import com.psabackoffice.job1111.service.CivilMiscRevService;


/**
 * Controller object for domain model class CivilMiscRev.
 * @see CivilMiscRev
 */
@RestController("Job1111.CivilMiscRevController")
@Api(value = "CivilMiscRevController", description = "Exposes APIs to work with CivilMiscRev resource.")
@RequestMapping("/Job1111/CivilMiscRev")
public class CivilMiscRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilMiscRevController.class);

    @Autowired
	@Qualifier("Job1111.CivilMiscRevService")
	private CivilMiscRevService civilMiscRevService;

	@ApiOperation(value = "Creates a new CivilMiscRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CivilMiscRev createCivilMiscRev(@RequestBody CivilMiscRev civilMiscRev) {
		LOGGER.debug("Create CivilMiscRev with information: {}" , civilMiscRev);

		civilMiscRev = civilMiscRevService.create(civilMiscRev);
		LOGGER.debug("Created CivilMiscRev with information: {}" , civilMiscRev);

	    return civilMiscRev;
	}


    @ApiOperation(value = "Returns the CivilMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilMiscRev getCivilMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CivilMiscRev with id: {}" , id);

        CivilMiscRev foundCivilMiscRev = civilMiscRevService.getById(id);
        LOGGER.debug("CivilMiscRev details with id: {}" , foundCivilMiscRev);

        return foundCivilMiscRev;
    }

    @ApiOperation(value = "Updates the CivilMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilMiscRev editCivilMiscRev(@PathVariable("id") Integer id, @RequestBody CivilMiscRev civilMiscRev) throws EntityNotFoundException {
        LOGGER.debug("Editing CivilMiscRev with id: {}" , civilMiscRev.getId());

        civilMiscRev.setId(id);
        civilMiscRev = civilMiscRevService.update(civilMiscRev);
        LOGGER.debug("CivilMiscRev details with id: {}" , civilMiscRev);

        return civilMiscRev;
    }

    @ApiOperation(value = "Deletes the CivilMiscRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCivilMiscRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CivilMiscRev with id: {}" , id);

        CivilMiscRev deletedCivilMiscRev = civilMiscRevService.delete(id);

        return deletedCivilMiscRev != null;
    }

    /**
     * @deprecated Use {@link #findCivilMiscRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CivilMiscRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilMiscRev> searchCivilMiscRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CivilMiscRevs list");
        return civilMiscRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilMiscRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilMiscRev> findCivilMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilMiscRevs list");
        return civilMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilMiscRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilMiscRev> filterCivilMiscRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilMiscRevs list");
        return civilMiscRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCivilMiscRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return civilMiscRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CivilMiscRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCivilMiscRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CivilMiscRevs");
		return civilMiscRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCivilMiscRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return civilMiscRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilMiscRevService instance
	 */
	protected void setCivilMiscRevService(CivilMiscRevService service) {
		this.civilMiscRevService = service;
	}

}

