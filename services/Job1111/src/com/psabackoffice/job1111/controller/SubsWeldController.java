/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsWeld;
import com.psabackoffice.job1111.SubsWeldRev;
import com.psabackoffice.job1111.service.SubsWeldService;


/**
 * Controller object for domain model class SubsWeld.
 * @see SubsWeld
 */
@RestController("Job1111.SubsWeldController")
@Api(value = "SubsWeldController", description = "Exposes APIs to work with SubsWeld resource.")
@RequestMapping("/Job1111/SubsWeld")
public class SubsWeldController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsWeldController.class);

    @Autowired
	@Qualifier("Job1111.SubsWeldService")
	private SubsWeldService subsWeldService;

	@ApiOperation(value = "Creates a new SubsWeld instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsWeld createSubsWeld(@RequestBody SubsWeld subsWeld) {
		LOGGER.debug("Create SubsWeld with information: {}" , subsWeld);

		subsWeld = subsWeldService.create(subsWeld);
		LOGGER.debug("Created SubsWeld with information: {}" , subsWeld);

	    return subsWeld;
	}


    @ApiOperation(value = "Returns the SubsWeld instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeld getSubsWeld(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsWeld with id: {}" , id);

        SubsWeld foundSubsWeld = subsWeldService.getById(id);
        LOGGER.debug("SubsWeld details with id: {}" , foundSubsWeld);

        return foundSubsWeld;
    }

    @ApiOperation(value = "Updates the SubsWeld instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeld editSubsWeld(@PathVariable("id") Integer id, @RequestBody SubsWeld subsWeld) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsWeld with id: {}" , subsWeld.getId());

        subsWeld.setId(id);
        subsWeld = subsWeldService.update(subsWeld);
        LOGGER.debug("SubsWeld details with id: {}" , subsWeld);

        return subsWeld;
    }

    @ApiOperation(value = "Deletes the SubsWeld instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsWeld(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsWeld with id: {}" , id);

        SubsWeld deletedSubsWeld = subsWeldService.delete(id);

        return deletedSubsWeld != null;
    }

    /**
     * @deprecated Use {@link #findSubsWelds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsWeld instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeld> searchSubsWeldsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsWelds list");
        return subsWeldService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeld instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeld> findSubsWelds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWelds list");
        return subsWeldService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeld instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeld> filterSubsWelds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWelds list");
        return subsWeldService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsWelds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsWeldService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsWeld instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsWelds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsWelds");
		return subsWeldService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsWeldAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsWeldService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsWeldRevs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsWeldRevs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeldRev> findAssociatedSubsWeldRevs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsWeldRevs");
        return subsWeldService.findAssociatedSubsWeldRevs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsWeldService instance
	 */
	protected void setSubsWeldService(SubsWeldService service) {
		this.subsWeldService = service;
	}

}

