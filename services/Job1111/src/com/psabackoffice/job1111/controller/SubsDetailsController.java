/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilFa;
import com.psabackoffice.job1111.CivilMisc;
import com.psabackoffice.job1111.CivilSellPackage;
import com.psabackoffice.job1111.EquipFa;
import com.psabackoffice.job1111.SteelBoltOut;
import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelErect;
import com.psabackoffice.job1111.SteelImp;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelSell;
import com.psabackoffice.job1111.SteelSellPackage;
import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.SteelWeld;
import com.psabackoffice.job1111.SubmissionStatus;
import com.psabackoffice.job1111.SubsBoltUp;
import com.psabackoffice.job1111.SubsDelay;
import com.psabackoffice.job1111.SubsDemo;
import com.psabackoffice.job1111.SubsDetails;
import com.psabackoffice.job1111.SubsErection;
import com.psabackoffice.job1111.SubsEwo;
import com.psabackoffice.job1111.SubsMisc;
import com.psabackoffice.job1111.SubsSupports;
import com.psabackoffice.job1111.SubsTesting;
import com.psabackoffice.job1111.SubsTrim;
import com.psabackoffice.job1111.SubsWeld;
import com.psabackoffice.job1111.service.SubsDetailsService;


/**
 * Controller object for domain model class SubsDetails.
 * @see SubsDetails
 */
@RestController("Job1111.SubsDetailsController")
@Api(value = "SubsDetailsController", description = "Exposes APIs to work with SubsDetails resource.")
@RequestMapping("/Job1111/SubsDetails")
public class SubsDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsDetailsController.class);

    @Autowired
	@Qualifier("Job1111.SubsDetailsService")
	private SubsDetailsService subsDetailsService;

	@ApiOperation(value = "Creates a new SubsDetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsDetails createSubsDetails(@RequestBody SubsDetails subsDetails) {
		LOGGER.debug("Create SubsDetails with information: {}" , subsDetails);

		subsDetails = subsDetailsService.create(subsDetails);
		LOGGER.debug("Created SubsDetails with information: {}" , subsDetails);

	    return subsDetails;
	}


    @ApiOperation(value = "Returns the SubsDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsDetails getSubsDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsDetails with id: {}" , id);

        SubsDetails foundSubsDetails = subsDetailsService.getById(id);
        LOGGER.debug("SubsDetails details with id: {}" , foundSubsDetails);

        return foundSubsDetails;
    }

    @ApiOperation(value = "Updates the SubsDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsDetails editSubsDetails(@PathVariable("id") Integer id, @RequestBody SubsDetails subsDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsDetails with id: {}" , subsDetails.getSubmissionId());

        subsDetails.setSubmissionId(id);
        subsDetails = subsDetailsService.update(subsDetails);
        LOGGER.debug("SubsDetails details with id: {}" , subsDetails);

        return subsDetails;
    }

    @ApiOperation(value = "Deletes the SubsDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsDetails with id: {}" , id);

        SubsDetails deletedSubsDetails = subsDetailsService.delete(id);

        return deletedSubsDetails != null;
    }

    /**
     * @deprecated Use {@link #findSubsDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDetails> searchSubsDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsDetails list");
        return subsDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDetails> findSubsDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsDetails list");
        return subsDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDetails> filterSubsDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsDetails list");
        return subsDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsDetails");
		return subsDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/civilFas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the civilFas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilFa> findAssociatedCivilFas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated civilFas");
        return subsDetailsService.findAssociatedCivilFas(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/civilMiscs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the civilMiscs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilMisc> findAssociatedCivilMiscs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated civilMiscs");
        return subsDetailsService.findAssociatedCivilMiscs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/civilSellPackages", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the civilSellPackages instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilSellPackage> findAssociatedCivilSellPackages(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated civilSellPackages");
        return subsDetailsService.findAssociatedCivilSellPackages(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/equipFas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the equipFas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipFa> findAssociatedEquipFas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated equipFas");
        return subsDetailsService.findAssociatedEquipFas(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelBoltOuts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelBoltOuts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelBoltOut> findAssociatedSteelBoltOuts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelBoltOuts");
        return subsDetailsService.findAssociatedSteelBoltOuts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelDemos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelDemos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelDemo> findAssociatedSteelDemos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelDemos");
        return subsDetailsService.findAssociatedSteelDemos(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelErects", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelErects instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelErect> findAssociatedSteelErects(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelErects");
        return subsDetailsService.findAssociatedSteelErects(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelImps", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelImps instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelImp> findAssociatedSteelImps(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelImps");
        return subsDetailsService.findAssociatedSteelImps(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelMiscs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelMiscs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMisc> findAssociatedSteelMiscs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelMiscs");
        return subsDetailsService.findAssociatedSteelMiscs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelSells", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelSells instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelSell> findAssociatedSteelSells(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelSells");
        return subsDetailsService.findAssociatedSteelSells(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelSellPackages", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelSellPackages instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelSellPackage> findAssociatedSteelSellPackages(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelSellPackages");
        return subsDetailsService.findAssociatedSteelSellPackages(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelShakes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelShakes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShake> findAssociatedSteelShakes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelShakes");
        return subsDetailsService.findAssociatedSteelShakes(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelWelds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelWelds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelWeld> findAssociatedSteelWelds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelWelds");
        return subsDetailsService.findAssociatedSteelWelds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/submissionStatuses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the submissionStatuses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionStatus> findAssociatedSubmissionStatuses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated submissionStatuses");
        return subsDetailsService.findAssociatedSubmissionStatuses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsBoltUps", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsBoltUps instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsBoltUp> findAssociatedSubsBoltUps(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsBoltUps");
        return subsDetailsService.findAssociatedSubsBoltUps(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsDelays", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsDelays instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDelay> findAssociatedSubsDelays(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsDelays");
        return subsDetailsService.findAssociatedSubsDelays(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsDemos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsDemos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDemo> findAssociatedSubsDemos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsDemos");
        return subsDetailsService.findAssociatedSubsDemos(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsEwos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsEwos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsEwo> findAssociatedSubsEwos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsEwos");
        return subsDetailsService.findAssociatedSubsEwos(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsErections", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsErections instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsErection> findAssociatedSubsErections(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsErections");
        return subsDetailsService.findAssociatedSubsErections(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsMiscs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsMiscs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsMisc> findAssociatedSubsMiscs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsMiscs");
        return subsDetailsService.findAssociatedSubsMiscs(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsSupportses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsSupportses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSupports> findAssociatedSubsSupportses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsSupportses");
        return subsDetailsService.findAssociatedSubsSupportses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsTestings", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsTestings instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsTesting> findAssociatedSubsTestings(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsTestings");
        return subsDetailsService.findAssociatedSubsTestings(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsTrims", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsTrims instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsTrim> findAssociatedSubsTrims(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsTrims");
        return subsDetailsService.findAssociatedSubsTrims(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsWelds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsWelds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeld> findAssociatedSubsWelds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsWelds");
        return subsDetailsService.findAssociatedSubsWelds(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsDetailsService instance
	 */
	protected void setSubsDetailsService(SubsDetailsService service) {
		this.subsDetailsService = service;
	}

}

