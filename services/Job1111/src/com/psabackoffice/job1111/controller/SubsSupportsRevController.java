/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsSupportsRev;
import com.psabackoffice.job1111.service.SubsSupportsRevService;


/**
 * Controller object for domain model class SubsSupportsRev.
 * @see SubsSupportsRev
 */
@RestController("Job1111.SubsSupportsRevController")
@Api(value = "SubsSupportsRevController", description = "Exposes APIs to work with SubsSupportsRev resource.")
@RequestMapping("/Job1111/SubsSupportsRev")
public class SubsSupportsRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsSupportsRevController.class);

    @Autowired
	@Qualifier("Job1111.SubsSupportsRevService")
	private SubsSupportsRevService subsSupportsRevService;

	@ApiOperation(value = "Creates a new SubsSupportsRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsSupportsRev createSubsSupportsRev(@RequestBody SubsSupportsRev subsSupportsRev) {
		LOGGER.debug("Create SubsSupportsRev with information: {}" , subsSupportsRev);

		subsSupportsRev = subsSupportsRevService.create(subsSupportsRev);
		LOGGER.debug("Created SubsSupportsRev with information: {}" , subsSupportsRev);

	    return subsSupportsRev;
	}


    @ApiOperation(value = "Returns the SubsSupportsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsSupportsRev getSubsSupportsRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsSupportsRev with id: {}" , id);

        SubsSupportsRev foundSubsSupportsRev = subsSupportsRevService.getById(id);
        LOGGER.debug("SubsSupportsRev details with id: {}" , foundSubsSupportsRev);

        return foundSubsSupportsRev;
    }

    @ApiOperation(value = "Updates the SubsSupportsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsSupportsRev editSubsSupportsRev(@PathVariable("id") Integer id, @RequestBody SubsSupportsRev subsSupportsRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsSupportsRev with id: {}" , subsSupportsRev.getId());

        subsSupportsRev.setId(id);
        subsSupportsRev = subsSupportsRevService.update(subsSupportsRev);
        LOGGER.debug("SubsSupportsRev details with id: {}" , subsSupportsRev);

        return subsSupportsRev;
    }

    @ApiOperation(value = "Deletes the SubsSupportsRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsSupportsRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsSupportsRev with id: {}" , id);

        SubsSupportsRev deletedSubsSupportsRev = subsSupportsRevService.delete(id);

        return deletedSubsSupportsRev != null;
    }

    /**
     * @deprecated Use {@link #findSubsSupportsRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsSupportsRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSupportsRev> searchSubsSupportsRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsSupportsRevs list");
        return subsSupportsRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsSupportsRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSupportsRev> findSubsSupportsRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsSupportsRevs list");
        return subsSupportsRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsSupportsRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSupportsRev> filterSubsSupportsRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsSupportsRevs list");
        return subsSupportsRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsSupportsRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsSupportsRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsSupportsRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsSupportsRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsSupportsRevs");
		return subsSupportsRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsSupportsRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsSupportsRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsSupportsRevService instance
	 */
	protected void setSubsSupportsRevService(SubsSupportsRevService service) {
		this.subsSupportsRevService = service;
	}

}

