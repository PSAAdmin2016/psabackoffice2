/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsBoltUp;
import com.psabackoffice.job1111.SubsBoltUpRev;
import com.psabackoffice.job1111.service.SubsBoltUpService;


/**
 * Controller object for domain model class SubsBoltUp.
 * @see SubsBoltUp
 */
@RestController("Job1111.SubsBoltUpController")
@Api(value = "SubsBoltUpController", description = "Exposes APIs to work with SubsBoltUp resource.")
@RequestMapping("/Job1111/SubsBoltUp")
public class SubsBoltUpController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsBoltUpController.class);

    @Autowired
	@Qualifier("Job1111.SubsBoltUpService")
	private SubsBoltUpService subsBoltUpService;

	@ApiOperation(value = "Creates a new SubsBoltUp instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsBoltUp createSubsBoltUp(@RequestBody SubsBoltUp subsBoltUp) {
		LOGGER.debug("Create SubsBoltUp with information: {}" , subsBoltUp);

		subsBoltUp = subsBoltUpService.create(subsBoltUp);
		LOGGER.debug("Created SubsBoltUp with information: {}" , subsBoltUp);

	    return subsBoltUp;
	}


    @ApiOperation(value = "Returns the SubsBoltUp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsBoltUp getSubsBoltUp(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsBoltUp with id: {}" , id);

        SubsBoltUp foundSubsBoltUp = subsBoltUpService.getById(id);
        LOGGER.debug("SubsBoltUp details with id: {}" , foundSubsBoltUp);

        return foundSubsBoltUp;
    }

    @ApiOperation(value = "Updates the SubsBoltUp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsBoltUp editSubsBoltUp(@PathVariable("id") Integer id, @RequestBody SubsBoltUp subsBoltUp) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsBoltUp with id: {}" , subsBoltUp.getId());

        subsBoltUp.setId(id);
        subsBoltUp = subsBoltUpService.update(subsBoltUp);
        LOGGER.debug("SubsBoltUp details with id: {}" , subsBoltUp);

        return subsBoltUp;
    }

    @ApiOperation(value = "Deletes the SubsBoltUp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsBoltUp(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsBoltUp with id: {}" , id);

        SubsBoltUp deletedSubsBoltUp = subsBoltUpService.delete(id);

        return deletedSubsBoltUp != null;
    }

    /**
     * @deprecated Use {@link #findSubsBoltUps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsBoltUp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsBoltUp> searchSubsBoltUpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsBoltUps list");
        return subsBoltUpService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsBoltUp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsBoltUp> findSubsBoltUps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsBoltUps list");
        return subsBoltUpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsBoltUp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsBoltUp> filterSubsBoltUps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsBoltUps list");
        return subsBoltUpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsBoltUps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsBoltUpService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsBoltUp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsBoltUps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsBoltUps");
		return subsBoltUpService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsBoltUpAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsBoltUpService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsBoltUpRevs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsBoltUpRevs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsBoltUpRev> findAssociatedSubsBoltUpRevs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsBoltUpRevs");
        return subsBoltUpService.findAssociatedSubsBoltUpRevs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsBoltUpService instance
	 */
	protected void setSubsBoltUpService(SubsBoltUpService service) {
		this.subsBoltUpService = service;
	}

}

