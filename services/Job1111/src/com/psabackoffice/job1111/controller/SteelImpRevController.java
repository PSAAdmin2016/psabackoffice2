/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelImpRev;
import com.psabackoffice.job1111.service.SteelImpRevService;


/**
 * Controller object for domain model class SteelImpRev.
 * @see SteelImpRev
 */
@RestController("Job1111.SteelImpRevController")
@Api(value = "SteelImpRevController", description = "Exposes APIs to work with SteelImpRev resource.")
@RequestMapping("/Job1111/SteelImpRev")
public class SteelImpRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelImpRevController.class);

    @Autowired
	@Qualifier("Job1111.SteelImpRevService")
	private SteelImpRevService steelImpRevService;

	@ApiOperation(value = "Creates a new SteelImpRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelImpRev createSteelImpRev(@RequestBody SteelImpRev steelImpRev) {
		LOGGER.debug("Create SteelImpRev with information: {}" , steelImpRev);

		steelImpRev = steelImpRevService.create(steelImpRev);
		LOGGER.debug("Created SteelImpRev with information: {}" , steelImpRev);

	    return steelImpRev;
	}


    @ApiOperation(value = "Returns the SteelImpRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelImpRev getSteelImpRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelImpRev with id: {}" , id);

        SteelImpRev foundSteelImpRev = steelImpRevService.getById(id);
        LOGGER.debug("SteelImpRev details with id: {}" , foundSteelImpRev);

        return foundSteelImpRev;
    }

    @ApiOperation(value = "Updates the SteelImpRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelImpRev editSteelImpRev(@PathVariable("id") Integer id, @RequestBody SteelImpRev steelImpRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelImpRev with id: {}" , steelImpRev.getId());

        steelImpRev.setId(id);
        steelImpRev = steelImpRevService.update(steelImpRev);
        LOGGER.debug("SteelImpRev details with id: {}" , steelImpRev);

        return steelImpRev;
    }

    @ApiOperation(value = "Deletes the SteelImpRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelImpRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelImpRev with id: {}" , id);

        SteelImpRev deletedSteelImpRev = steelImpRevService.delete(id);

        return deletedSteelImpRev != null;
    }

    /**
     * @deprecated Use {@link #findSteelImpRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelImpRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelImpRev> searchSteelImpRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelImpRevs list");
        return steelImpRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelImpRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelImpRev> findSteelImpRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelImpRevs list");
        return steelImpRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelImpRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelImpRev> filterSteelImpRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelImpRevs list");
        return steelImpRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelImpRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelImpRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelImpRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelImpRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelImpRevs");
		return steelImpRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelImpRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelImpRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelImpRevService instance
	 */
	protected void setSteelImpRevService(SteelImpRevService service) {
		this.steelImpRevService = service;
	}

}

