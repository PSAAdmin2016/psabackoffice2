/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheStatsPipeStats;
import com.psabackoffice.job1111.service.CacheStatsPipeStatsService;


/**
 * Controller object for domain model class CacheStatsPipeStats.
 * @see CacheStatsPipeStats
 */
@RestController("Job1111.CacheStatsPipeStatsController")
@Api(value = "CacheStatsPipeStatsController", description = "Exposes APIs to work with CacheStatsPipeStats resource.")
@RequestMapping("/Job1111/CacheStatsPipeStats")
public class CacheStatsPipeStatsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheStatsPipeStatsController.class);

    @Autowired
	@Qualifier("Job1111.CacheStatsPipeStatsService")
	private CacheStatsPipeStatsService cacheStatsPipeStatsService;

	@ApiOperation(value = "Creates a new CacheStatsPipeStats instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipeStats createCacheStatsPipeStats(@RequestBody CacheStatsPipeStats cacheStatsPipeStats) {
		LOGGER.debug("Create CacheStatsPipeStats with information: {}" , cacheStatsPipeStats);

		cacheStatsPipeStats = cacheStatsPipeStatsService.create(cacheStatsPipeStats);
		LOGGER.debug("Created CacheStatsPipeStats with information: {}" , cacheStatsPipeStats);

	    return cacheStatsPipeStats;
	}

    @ApiOperation(value = "Returns the CacheStatsPipeStats instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipeStats getCacheStatsPipeStats(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheStatsPipeStats with id: {}" , id);

        CacheStatsPipeStats foundCacheStatsPipeStats = cacheStatsPipeStatsService.getById(id);
        LOGGER.debug("CacheStatsPipeStats details with id: {}" , foundCacheStatsPipeStats);

        return foundCacheStatsPipeStats;
    }

    @ApiOperation(value = "Updates the CacheStatsPipeStats instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipeStats editCacheStatsPipeStats(@PathVariable("id") Integer id, @RequestBody CacheStatsPipeStats cacheStatsPipeStats) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheStatsPipeStats with id: {}" , cacheStatsPipeStats.getBidId());

        cacheStatsPipeStats.setBidId(id);
        cacheStatsPipeStats = cacheStatsPipeStatsService.update(cacheStatsPipeStats);
        LOGGER.debug("CacheStatsPipeStats details with id: {}" , cacheStatsPipeStats);

        return cacheStatsPipeStats;
    }

    @ApiOperation(value = "Deletes the CacheStatsPipeStats instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheStatsPipeStats(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheStatsPipeStats with id: {}" , id);

        CacheStatsPipeStats deletedCacheStatsPipeStats = cacheStatsPipeStatsService.delete(id);

        return deletedCacheStatsPipeStats != null;
    }

    /**
     * @deprecated Use {@link #findCacheStatsPipeStats(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheStatsPipeStats instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipeStats> searchCacheStatsPipeStatsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheStatsPipeStats list");
        return cacheStatsPipeStatsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsPipeStats instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipeStats> findCacheStatsPipeStats(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsPipeStats list");
        return cacheStatsPipeStatsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsPipeStats instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipeStats> filterCacheStatsPipeStats(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsPipeStats list");
        return cacheStatsPipeStatsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheStatsPipeStats(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheStatsPipeStatsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheStatsPipeStats instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheStatsPipeStats( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheStatsPipeStats");
		return cacheStatsPipeStatsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheStatsPipeStatsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheStatsPipeStatsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheStatsPipeStatsService instance
	 */
	protected void setCacheStatsPipeStatsService(CacheStatsPipeStatsService service) {
		this.cacheStatsPipeStatsService = service;
	}

}

