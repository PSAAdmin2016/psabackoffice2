/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelSellPackageRev;
import com.psabackoffice.job1111.service.SteelSellPackageRevService;


/**
 * Controller object for domain model class SteelSellPackageRev.
 * @see SteelSellPackageRev
 */
@RestController("Job1111.SteelSellPackageRevController")
@Api(value = "SteelSellPackageRevController", description = "Exposes APIs to work with SteelSellPackageRev resource.")
@RequestMapping("/Job1111/SteelSellPackageRev")
public class SteelSellPackageRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelSellPackageRevController.class);

    @Autowired
	@Qualifier("Job1111.SteelSellPackageRevService")
	private SteelSellPackageRevService steelSellPackageRevService;

	@ApiOperation(value = "Creates a new SteelSellPackageRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelSellPackageRev createSteelSellPackageRev(@RequestBody SteelSellPackageRev steelSellPackageRev) {
		LOGGER.debug("Create SteelSellPackageRev with information: {}" , steelSellPackageRev);

		steelSellPackageRev = steelSellPackageRevService.create(steelSellPackageRev);
		LOGGER.debug("Created SteelSellPackageRev with information: {}" , steelSellPackageRev);

	    return steelSellPackageRev;
	}


    @ApiOperation(value = "Returns the SteelSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelSellPackageRev getSteelSellPackageRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelSellPackageRev with id: {}" , id);

        SteelSellPackageRev foundSteelSellPackageRev = steelSellPackageRevService.getById(id);
        LOGGER.debug("SteelSellPackageRev details with id: {}" , foundSteelSellPackageRev);

        return foundSteelSellPackageRev;
    }

    @ApiOperation(value = "Updates the SteelSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelSellPackageRev editSteelSellPackageRev(@PathVariable("id") Integer id, @RequestBody SteelSellPackageRev steelSellPackageRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelSellPackageRev with id: {}" , steelSellPackageRev.getId());

        steelSellPackageRev.setId(id);
        steelSellPackageRev = steelSellPackageRevService.update(steelSellPackageRev);
        LOGGER.debug("SteelSellPackageRev details with id: {}" , steelSellPackageRev);

        return steelSellPackageRev;
    }

    @ApiOperation(value = "Deletes the SteelSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelSellPackageRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelSellPackageRev with id: {}" , id);

        SteelSellPackageRev deletedSteelSellPackageRev = steelSellPackageRevService.delete(id);

        return deletedSteelSellPackageRev != null;
    }

    /**
     * @deprecated Use {@link #findSteelSellPackageRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelSellPackageRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelSellPackageRev> searchSteelSellPackageRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelSellPackageRevs list");
        return steelSellPackageRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelSellPackageRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelSellPackageRev> findSteelSellPackageRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelSellPackageRevs list");
        return steelSellPackageRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelSellPackageRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelSellPackageRev> filterSteelSellPackageRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelSellPackageRevs list");
        return steelSellPackageRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelSellPackageRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelSellPackageRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelSellPackageRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelSellPackageRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelSellPackageRevs");
		return steelSellPackageRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelSellPackageRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelSellPackageRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellPackageRevService instance
	 */
	protected void setSteelSellPackageRevService(SteelSellPackageRevService service) {
		this.steelSellPackageRevService = service;
	}

}

