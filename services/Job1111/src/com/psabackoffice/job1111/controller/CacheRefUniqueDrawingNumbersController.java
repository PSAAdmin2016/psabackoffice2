/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheRefUniqueDrawingNumbers;
import com.psabackoffice.job1111.service.CacheRefUniqueDrawingNumbersService;


/**
 * Controller object for domain model class CacheRefUniqueDrawingNumbers.
 * @see CacheRefUniqueDrawingNumbers
 */
@RestController("Job1111.CacheRefUniqueDrawingNumbersController")
@Api(value = "CacheRefUniqueDrawingNumbersController", description = "Exposes APIs to work with CacheRefUniqueDrawingNumbers resource.")
@RequestMapping("/Job1111/CacheRefUniqueDrawingNumbers")
public class CacheRefUniqueDrawingNumbersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheRefUniqueDrawingNumbersController.class);

    @Autowired
	@Qualifier("Job1111.CacheRefUniqueDrawingNumbersService")
	private CacheRefUniqueDrawingNumbersService cacheRefUniqueDrawingNumbersService;

	@ApiOperation(value = "Creates a new CacheRefUniqueDrawingNumbers instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CacheRefUniqueDrawingNumbers createCacheRefUniqueDrawingNumbers(@RequestBody CacheRefUniqueDrawingNumbers cacheRefUniqueDrawingNumbers) {
		LOGGER.debug("Create CacheRefUniqueDrawingNumbers with information: {}" , cacheRefUniqueDrawingNumbers);

		cacheRefUniqueDrawingNumbers = cacheRefUniqueDrawingNumbersService.create(cacheRefUniqueDrawingNumbers);
		LOGGER.debug("Created CacheRefUniqueDrawingNumbers with information: {}" , cacheRefUniqueDrawingNumbers);

	    return cacheRefUniqueDrawingNumbers;
	}


    @ApiOperation(value = "Returns the CacheRefUniqueDrawingNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefUniqueDrawingNumbers getCacheRefUniqueDrawingNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheRefUniqueDrawingNumbers with id: {}" , id);

        CacheRefUniqueDrawingNumbers foundCacheRefUniqueDrawingNumbers = cacheRefUniqueDrawingNumbersService.getById(id);
        LOGGER.debug("CacheRefUniqueDrawingNumbers details with id: {}" , foundCacheRefUniqueDrawingNumbers);

        return foundCacheRefUniqueDrawingNumbers;
    }

    @ApiOperation(value = "Updates the CacheRefUniqueDrawingNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefUniqueDrawingNumbers editCacheRefUniqueDrawingNumbers(@PathVariable("id") Integer id, @RequestBody CacheRefUniqueDrawingNumbers cacheRefUniqueDrawingNumbers) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheRefUniqueDrawingNumbers with id: {}" , cacheRefUniqueDrawingNumbers.getId());

        cacheRefUniqueDrawingNumbers.setId(id);
        cacheRefUniqueDrawingNumbers = cacheRefUniqueDrawingNumbersService.update(cacheRefUniqueDrawingNumbers);
        LOGGER.debug("CacheRefUniqueDrawingNumbers details with id: {}" , cacheRefUniqueDrawingNumbers);

        return cacheRefUniqueDrawingNumbers;
    }

    @ApiOperation(value = "Deletes the CacheRefUniqueDrawingNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheRefUniqueDrawingNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheRefUniqueDrawingNumbers with id: {}" , id);

        CacheRefUniqueDrawingNumbers deletedCacheRefUniqueDrawingNumbers = cacheRefUniqueDrawingNumbersService.delete(id);

        return deletedCacheRefUniqueDrawingNumbers != null;
    }

    /**
     * @deprecated Use {@link #findCacheRefUniqueDrawingNumbers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheRefUniqueDrawingNumbers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueDrawingNumbers> searchCacheRefUniqueDrawingNumbersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheRefUniqueDrawingNumbers list");
        return cacheRefUniqueDrawingNumbersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefUniqueDrawingNumbers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueDrawingNumbers> findCacheRefUniqueDrawingNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefUniqueDrawingNumbers list");
        return cacheRefUniqueDrawingNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefUniqueDrawingNumbers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueDrawingNumbers> filterCacheRefUniqueDrawingNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefUniqueDrawingNumbers list");
        return cacheRefUniqueDrawingNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheRefUniqueDrawingNumbers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheRefUniqueDrawingNumbersService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheRefUniqueDrawingNumbers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheRefUniqueDrawingNumbers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheRefUniqueDrawingNumbers");
		return cacheRefUniqueDrawingNumbersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheRefUniqueDrawingNumbersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheRefUniqueDrawingNumbersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheRefUniqueDrawingNumbersService instance
	 */
	protected void setCacheRefUniqueDrawingNumbersService(CacheRefUniqueDrawingNumbersService service) {
		this.cacheRefUniqueDrawingNumbersService = service;
	}

}

