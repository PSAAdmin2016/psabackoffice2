/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsDemo;
import com.psabackoffice.job1111.service.SubsDemoService;


/**
 * Controller object for domain model class SubsDemo.
 * @see SubsDemo
 */
@RestController("Job1111.SubsDemoController")
@Api(value = "SubsDemoController", description = "Exposes APIs to work with SubsDemo resource.")
@RequestMapping("/Job1111/SubsDemo")
public class SubsDemoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsDemoController.class);

    @Autowired
	@Qualifier("Job1111.SubsDemoService")
	private SubsDemoService subsDemoService;

	@ApiOperation(value = "Creates a new SubsDemo instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsDemo createSubsDemo(@RequestBody SubsDemo subsDemo) {
		LOGGER.debug("Create SubsDemo with information: {}" , subsDemo);

		subsDemo = subsDemoService.create(subsDemo);
		LOGGER.debug("Created SubsDemo with information: {}" , subsDemo);

	    return subsDemo;
	}


    @ApiOperation(value = "Returns the SubsDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsDemo getSubsDemo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsDemo with id: {}" , id);

        SubsDemo foundSubsDemo = subsDemoService.getById(id);
        LOGGER.debug("SubsDemo details with id: {}" , foundSubsDemo);

        return foundSubsDemo;
    }

    @ApiOperation(value = "Updates the SubsDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsDemo editSubsDemo(@PathVariable("id") Integer id, @RequestBody SubsDemo subsDemo) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsDemo with id: {}" , subsDemo.getId());

        subsDemo.setId(id);
        subsDemo = subsDemoService.update(subsDemo);
        LOGGER.debug("SubsDemo details with id: {}" , subsDemo);

        return subsDemo;
    }

    @ApiOperation(value = "Deletes the SubsDemo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsDemo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsDemo with id: {}" , id);

        SubsDemo deletedSubsDemo = subsDemoService.delete(id);

        return deletedSubsDemo != null;
    }

    /**
     * @deprecated Use {@link #findSubsDemos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsDemo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDemo> searchSubsDemosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsDemos list");
        return subsDemoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsDemo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDemo> findSubsDemos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsDemos list");
        return subsDemoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsDemo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDemo> filterSubsDemos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsDemos list");
        return subsDemoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsDemos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsDemoService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsDemo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsDemos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsDemos");
		return subsDemoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsDemoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsDemoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsDemoService instance
	 */
	protected void setSubsDemoService(SubsDemoService service) {
		this.subsDemoService = service;
	}

}

