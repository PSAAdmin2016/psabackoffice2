/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.PipeTrackerClassic;
import com.psabackoffice.job1111.service.PipeTrackerClassicService;


/**
 * Controller object for domain model class PipeTrackerClassic.
 * @see PipeTrackerClassic
 */
@RestController("Job1111.PipeTrackerClassicController")
@Api(value = "PipeTrackerClassicController", description = "Exposes APIs to work with PipeTrackerClassic resource.")
@RequestMapping("/Job1111/PipeTrackerClassic")
public class PipeTrackerClassicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipeTrackerClassicController.class);

    @Autowired
	@Qualifier("Job1111.PipeTrackerClassicService")
	private PipeTrackerClassicService pipeTrackerClassicService;

	@ApiOperation(value = "Creates a new PipeTrackerClassic instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeTrackerClassic createPipeTrackerClassic(@RequestBody PipeTrackerClassic pipeTrackerClassic) {
		LOGGER.debug("Create PipeTrackerClassic with information: {}" , pipeTrackerClassic);

		pipeTrackerClassic = pipeTrackerClassicService.create(pipeTrackerClassic);
		LOGGER.debug("Created PipeTrackerClassic with information: {}" , pipeTrackerClassic);

	    return pipeTrackerClassic;
	}

    @ApiOperation(value = "Returns the PipeTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PipeTrackerClassic getPipeTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PipeTrackerClassic with id: {}" , id);

        PipeTrackerClassic foundPipeTrackerClassic = pipeTrackerClassicService.getById(id);
        LOGGER.debug("PipeTrackerClassic details with id: {}" , foundPipeTrackerClassic);

        return foundPipeTrackerClassic;
    }

    @ApiOperation(value = "Updates the PipeTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeTrackerClassic editPipeTrackerClassic(@PathVariable("id") Integer id, @RequestBody PipeTrackerClassic pipeTrackerClassic) {
        LOGGER.debug("Editing PipeTrackerClassic with id: {}" , pipeTrackerClassic.getUid());

        pipeTrackerClassic.setUid(id);
        pipeTrackerClassic = pipeTrackerClassicService.update(pipeTrackerClassic);
        LOGGER.debug("PipeTrackerClassic details with id: {}" , pipeTrackerClassic);

        return pipeTrackerClassic;
    }

    @ApiOperation(value = "Deletes the PipeTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deletePipeTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PipeTrackerClassic with id: {}" , id);

        PipeTrackerClassic deletedPipeTrackerClassic = pipeTrackerClassicService.delete(id);

        return deletedPipeTrackerClassic != null;
    }

    /**
     * @deprecated Use {@link #findPipeTrackerClassics(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PipeTrackerClassic instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTrackerClassic> searchPipeTrackerClassicsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PipeTrackerClassics list by query filter:{}", (Object) queryFilters);
        return pipeTrackerClassicService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeTrackerClassic instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTrackerClassic> findPipeTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeTrackerClassics list by filter:", query);
        return pipeTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeTrackerClassic instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTrackerClassic> filterPipeTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeTrackerClassics list by filter", query);
        return pipeTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipeTrackerClassics(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipeTrackerClassicService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PipeTrackerClassic instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipeTrackerClassics( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PipeTrackerClassics");
		return pipeTrackerClassicService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipeTrackerClassicAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipeTrackerClassicService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeTrackerClassicService instance
	 */
	protected void setPipeTrackerClassicService(PipeTrackerClassicService service) {
		this.pipeTrackerClassicService = service;
	}

}

