/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.Sasnotes;
import com.psabackoffice.job1111.service.SasnotesService;


/**
 * Controller object for domain model class Sasnotes.
 * @see Sasnotes
 */
@RestController("Job1111.SasnotesController")
@Api(value = "SasnotesController", description = "Exposes APIs to work with Sasnotes resource.")
@RequestMapping("/Job1111/Sasnotes")
public class SasnotesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SasnotesController.class);

    @Autowired
	@Qualifier("Job1111.SasnotesService")
	private SasnotesService sasnotesService;

	@ApiOperation(value = "Creates a new Sasnotes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sasnotes createSasnotes(@RequestBody Sasnotes sasnotes) {
		LOGGER.debug("Create Sasnotes with information: {}" , sasnotes);

		sasnotes = sasnotesService.create(sasnotes);
		LOGGER.debug("Created Sasnotes with information: {}" , sasnotes);

	    return sasnotes;
	}

    @ApiOperation(value = "Returns the Sasnotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Sasnotes getSasnotes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Sasnotes with id: {}" , id);

        Sasnotes foundSasnotes = sasnotesService.getById(id);
        LOGGER.debug("Sasnotes details with id: {}" , foundSasnotes);

        return foundSasnotes;
    }

    @ApiOperation(value = "Updates the Sasnotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sasnotes editSasnotes(@PathVariable("id") Integer id, @RequestBody Sasnotes sasnotes) {
        LOGGER.debug("Editing Sasnotes with id: {}" , sasnotes.getId());

        sasnotes.setId(id);
        sasnotes = sasnotesService.update(sasnotes);
        LOGGER.debug("Sasnotes details with id: {}" , sasnotes);

        return sasnotes;
    }

    @ApiOperation(value = "Deletes the Sasnotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteSasnotes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Sasnotes with id: {}" , id);

        Sasnotes deletedSasnotes = sasnotesService.delete(id);

        return deletedSasnotes != null;
    }

    /**
     * @deprecated Use {@link #findSasnotes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Sasnotes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sasnotes> searchSasnotesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Sasnotes list by query filter:{}", (Object) queryFilters);
        return sasnotesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sasnotes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sasnotes> findSasnotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sasnotes list by filter:", query);
        return sasnotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sasnotes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sasnotes> filterSasnotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sasnotes list by filter", query);
        return sasnotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSasnotes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sasnotesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Sasnotes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSasnotes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Sasnotes");
		return sasnotesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSasnotesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sasnotesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SasnotesService instance
	 */
	protected void setSasnotesService(SasnotesService service) {
		this.sasnotesService = service;
	}

}

