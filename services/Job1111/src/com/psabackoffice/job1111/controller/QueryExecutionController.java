/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.psabackoffice.job1111.service.Job1111QueryExecutorService;
import com.psabackoffice.job1111.models.query.*;

@RestController(value = "Job1111.QueryExecutionController")
@RequestMapping("/Job1111/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Job1111QueryExecutorService queryService;

    @RequestMapping(value = "/queries/UpdateCivilSellPackage", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateCivilSellPackage(@Valid @RequestBody UpdateCivilSellPackageRequest updateCivilSellPackageRequest) {
        LOGGER.debug("Executing named query: UpdateCivilSellPackage");
        Integer _result = queryService.executeUpdateCivilSellPackage(updateCivilSellPackageRequest);
        LOGGER.debug("got the result for named query: UpdateCivilSellPackage, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSuperRecentActivites", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get recent activites modified by a given user super review page")
    public Page<GetSuperRecentActivitesResponse> executeGetSuperRecentActivites(@RequestParam(value = "UserID", required = false) Integer userId, @RequestParam(value = "SelectedSuper", required = false) Integer selectedSuper, Pageable pageable) {
        LOGGER.debug("Executing named query: GetSuperRecentActivites");
        Page<GetSuperRecentActivitesResponse> _result = queryService.executeGetSuperRecentActivites(userId, selectedSuper, pageable);
        LOGGER.debug("got the result for named query: GetSuperRecentActivites, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSuperRecentActivites")
    @RequestMapping(value = "/queries/GetSuperRecentActivites/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSuperRecentActivites(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "UserID", required = false) Integer userId, @RequestParam(value = "SelectedSuper", required = false) Integer selectedSuper, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSuperRecentActivites");

        return queryService.exportGetSuperRecentActivites(exportType, userId, selectedSuper, pageable);
    }

    @RequestMapping(value = "/queries/GetErectionTotal", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Total footage of a given Erection Activity")
    public Page<GetErectionTotalResponse> executeGetErectionTotal(@RequestParam(value = "ActivityId", required = false) Integer activityId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetErectionTotal");
        Page<GetErectionTotalResponse> _result = queryService.executeGetErectionTotal(activityId, pageable);
        LOGGER.debug("got the result for named query: GetErectionTotal, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetErectionTotal")
    @RequestMapping(value = "/queries/GetErectionTotal/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetErectionTotal(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ActivityId", required = false) Integer activityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetErectionTotal");

        return queryService.exportGetErectionTotal(exportType, activityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingSteelShake", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingSteelShake(@Valid @RequestBody UpdateSettingSteelShakeRequest updateSettingSteelShakeRequest) {
        LOGGER.debug("Executing named query: UpdateSettingSteelShake");
        Integer _result = queryService.executeUpdateSettingSteelShake(updateSettingSteelShakeRequest);
        LOGGER.debug("got the result for named query: UpdateSettingSteelShake, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryOverride", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryOverrideResponse> executeGetActivityHistoryOverride(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryOverride");
        Page<GetActivityHistoryOverrideResponse> _result = queryService.executeGetActivityHistoryOverride(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryOverride, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryOverride")
    @RequestMapping(value = "/queries/GetActivityHistoryOverride/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryOverride(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryOverride");

        return queryService.exportGetActivityHistoryOverride(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotalsByCU", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all takeoffs quantities, Installed quantities,takoff Hours, Hours earned, Remaining Quantities, and remaining hours BY CU")
    public Page<GetAlltotalsByCuResponse> executeGetALLTotalsByCU(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByCU");
        Page<GetAlltotalsByCuResponse> _result = queryService.executeGetALLTotalsByCU(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByCU, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByCU")
    @RequestMapping(value = "/queries/GetALLTotalsByCU/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByCU(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByCU");

        return queryService.exportGetALLTotalsByCU(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotals", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Sum of all totals")
    public Page<GetAlltotalsResponse> executeGetALLTotals(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotals");
        Page<GetAlltotalsResponse> _result = queryService.executeGetALLTotals(pageable);
        LOGGER.debug("got the result for named query: GetALLTotals, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotals")
    @RequestMapping(value = "/queries/GetALLTotals/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotals(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotals");

        return queryService.exportGetALLTotals(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistoryDemo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryDemoResponse> executeGetActivityHistoryDemo(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryDemo");
        Page<GetActivityHistoryDemoResponse> _result = queryService.executeGetActivityHistoryDemo(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryDemo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryDemo")
    @RequestMapping(value = "/queries/GetActivityHistoryDemo/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryDemo(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryDemo");

        return queryService.exportGetActivityHistoryDemo(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelErect", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelErectResponse> executeGetActivityHistorySteelErect(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelErect");
        Page<GetActivityHistorySteelErectResponse> _result = queryService.executeGetActivityHistorySteelErect(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelErect, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelErect")
    @RequestMapping(value = "/queries/GetActivityHistorySteelErect/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelErect(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelErect");

        return queryService.exportGetActivityHistorySteelErect(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantityWeldInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the number of Welds installed BY BidID")
    public Page<GetQuantityWeldInstalledResponse> executeGetQuantityWeldInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityWeldInstalled");
        Page<GetQuantityWeldInstalledResponse> _result = queryService.executeGetQuantityWeldInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityWeldInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityWeldInstalled")
    @RequestMapping(value = "/queries/GetQuantityWeldInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityWeldInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityWeldInstalled");

        return queryService.exportGetQuantityWeldInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetBidWorkHistorySteelExpanded", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Bid Work History, with each Field activity having its own row.  Of the given SubID")
    public Page<GetBidWorkHistorySteelExpandedResponse> executeGetBidWorkHistorySteelExpanded(@RequestParam(value = "BidID", required = false) Integer bidId, @RequestParam(value = "SubID", required = false) Integer subId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidWorkHistorySteelExpanded");
        Page<GetBidWorkHistorySteelExpandedResponse> _result = queryService.executeGetBidWorkHistorySteelExpanded(bidId, subId, pageable);
        LOGGER.debug("got the result for named query: GetBidWorkHistorySteelExpanded, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidWorkHistorySteelExpanded")
    @RequestMapping(value = "/queries/GetBidWorkHistorySteelExpanded/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidWorkHistorySteelExpanded(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, @RequestParam(value = "SubID", required = false) Integer subId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidWorkHistorySteelExpanded");

        return queryService.exportGetBidWorkHistorySteelExpanded(exportType, bidId, subId, pageable);
    }

    @RequestMapping(value = "/queries/GetSettingPipeRFTPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingPipeRftpercentResponse> executeGetSettingPipeRFTPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingPipeRFTPercent");
        Page<GetSettingPipeRftpercentResponse> _result = queryService.executeGetSettingPipeRFTPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingPipeRFTPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingPipeRFTPercent")
    @RequestMapping(value = "/queries/GetSettingPipeRFTPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingPipeRFTPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingPipeRFTPercent");

        return queryService.exportGetSettingPipeRFTPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelImpQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelImpQuantity(@Valid @RequestBody UpdateSteelImpQuantityRequest updateSteelImpQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelImpQuantity");
        Integer _result = queryService.executeUpdateSteelImpQuantity(updateSteelImpQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelImpQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateTrim", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsTrim with data inputs")
    public Integer executeUpdateTrim(@Valid @RequestBody UpdateTrimRequest updateTrimRequest) {
        LOGGER.debug("Executing named query: UpdateTrim");
        Integer _result = queryService.executeUpdateTrim(updateTrimRequest);
        LOGGER.debug("got the result for named query: UpdateTrim, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelShake", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelShakeResponse> executeGetActivityHistorySteelShake(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelShake");
        Page<GetActivityHistorySteelShakeResponse> _result = queryService.executeGetActivityHistorySteelShake(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelShake, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelShake")
    @RequestMapping(value = "/queries/GetActivityHistorySteelShake/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelShake(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelShake");

        return queryService.exportGetActivityHistorySteelShake(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelWeld", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelWeld(@Valid @RequestBody UpdateSteelWeldRequest updateSteelWeldRequest) {
        LOGGER.debug("Executing named query: UpdateSteelWeld");
        Integer _result = queryService.executeUpdateSteelWeld(updateSteelWeldRequest);
        LOGGER.debug("got the result for named query: UpdateSteelWeld, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSettingCivilPunch", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingCivilPunch(@Valid @RequestBody UpdateSettingCivilPunchRequest updateSettingCivilPunchRequest) {
        LOGGER.debug("Executing named query: UpdateSettingCivilPunch");
        Integer _result = queryService.executeUpdateSettingCivilPunch(updateSettingCivilPunchRequest);
        LOGGER.debug("got the result for named query: UpdateSettingCivilPunch, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryWeld", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryWeldResponse> executeGetActivityHistoryWeld(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryWeld");
        Page<GetActivityHistoryWeldResponse> _result = queryService.executeGetActivityHistoryWeld(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryWeld, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryWeld")
    @RequestMapping(value = "/queries/GetActivityHistoryWeld/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryWeld(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryWeld");

        return queryService.exportGetActivityHistoryWeld(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySupport", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistorySupportResponse> executeGetActivityHistorySupport(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySupport");
        Page<GetActivityHistorySupportResponse> _result = queryService.executeGetActivityHistorySupport(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySupport, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySupport")
    @RequestMapping(value = "/queries/GetActivityHistorySupport/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySupport(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySupport");

        return queryService.exportGetActivityHistorySupport(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistoryEquipFA", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistoryEquipFaResponse> executeGetActivityHistoryEquipFA(@RequestParam(value = "RowID") String rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryEquipFA");
        Page<GetActivityHistoryEquipFaResponse> _result = queryService.executeGetActivityHistoryEquipFA(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryEquipFA, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryEquipFA")
    @RequestMapping(value = "/queries/GetActivityHistoryEquipFA/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryEquipFA(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID") String rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryEquipFA");

        return queryService.exportGetActivityHistoryEquipFA(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelMiscQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelMiscQuantity(@Valid @RequestBody UpdateSteelMiscQuantityRequest updateSteelMiscQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelMiscQuantity");
        Integer _result = queryService.executeUpdateSteelMiscQuantity(updateSteelMiscQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelMiscQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetBidWorkHistory", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all activities assigned/ earning hours against bid ID")
    public Page<GetBidWorkHistoryResponse> executeGetBidWorkHistory(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidWorkHistory");
        Page<GetBidWorkHistoryResponse> _result = queryService.executeGetBidWorkHistory(bidId, pageable);
        LOGGER.debug("got the result for named query: GetBidWorkHistory, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidWorkHistory")
    @RequestMapping(value = "/queries/GetBidWorkHistory/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidWorkHistory(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidWorkHistory");

        return queryService.exportGetBidWorkHistory(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetDrawingsByTestPackage", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetDrawingsByTestPackageResponse> executeGetDrawingsByTestPackage(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetDrawingsByTestPackage");
        Page<GetDrawingsByTestPackageResponse> _result = queryService.executeGetDrawingsByTestPackage(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetDrawingsByTestPackage, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetDrawingsByTestPackage")
    @RequestMapping(value = "/queries/GetDrawingsByTestPackage/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetDrawingsByTestPackage(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetDrawingsByTestPackage");

        return queryService.exportGetDrawingsByTestPackage(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/UpdateMisc", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsMisc table with data inputs")
    public Integer executeUpdateMisc(@Valid @RequestBody UpdateMiscRequest updateMiscRequest) {
        LOGGER.debug("Executing named query: UpdateMisc");
        Integer _result = queryService.executeUpdateMisc(updateMiscRequest);
        LOGGER.debug("got the result for named query: UpdateMisc, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelMisc", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelMisc(@Valid @RequestBody UpdateSteelMiscRequest updateSteelMiscRequest) {
        LOGGER.debug("Executing named query: UpdateSteelMisc");
        Integer _result = queryService.executeUpdateSteelMisc(updateSteelMiscRequest);
        LOGGER.debug("got the result for named query: UpdateSteelMisc, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelDemoQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelDemoQuantity(@Valid @RequestBody UpdateSteelDemoQuantityRequest updateSteelDemoQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelDemoQuantity");
        Integer _result = queryService.executeUpdateSteelDemoQuantity(updateSteelDemoQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelDemoQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelDemo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelDemo(@Valid @RequestBody UpdateSteelDemoRequest updateSteelDemoRequest) {
        LOGGER.debug("Executing named query: UpdateSteelDemo");
        Integer _result = queryService.executeUpdateSteelDemo(updateSteelDemoRequest);
        LOGGER.debug("got the result for named query: UpdateSteelDemo, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateBoltupQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateBoltupQuantity(@Valid @RequestBody UpdateBoltupQuantityRequest updateBoltupQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateBoltupQuantity");
        Integer _result = queryService.executeUpdateBoltupQuantity(updateBoltupQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateBoltupQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryBoltup", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryBoltupResponse> executeGetActivityHistoryBoltup(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryBoltup");
        Page<GetActivityHistoryBoltupResponse> _result = queryService.executeGetActivityHistoryBoltup(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryBoltup, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryBoltup")
    @RequestMapping(value = "/queries/GetActivityHistoryBoltup/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryBoltup(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryBoltup");

        return queryService.exportGetActivityHistoryBoltup(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetReportDPRSteelCondensed", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Daily Progress Report (steel)  Input users, and date range")
    public Page<GetReportDprsteelCondensedResponse> executeGetReportDPRSteelCondensed(@RequestParam(value = "PM", required = false) String pm, @RequestParam(value = "ConstM", required = false) String constM, @RequestParam(value = "SiteM", required = false) String siteM, @RequestParam(value = "AreaM", required = false) String areaM, @RequestParam(value = "Super", required = false) String super_, @RequestParam(value = "GF", required = false) String gf, @RequestParam(value = "Foreman", required = false) String foreman, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDPRSteelCondensed");
        Page<GetReportDprsteelCondensedResponse> _result = queryService.executeGetReportDPRSteelCondensed(pm, constM, siteM, areaM, super_, gf, foreman, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDPRSteelCondensed, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDPRSteelCondensed")
    @RequestMapping(value = "/queries/GetReportDPRSteelCondensed/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDPRSteelCondensed(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "PM", required = false) String pm, @RequestParam(value = "ConstM", required = false) String constM, @RequestParam(value = "SiteM", required = false) String siteM, @RequestParam(value = "AreaM", required = false) String areaM, @RequestParam(value = "Super", required = false) String super_, @RequestParam(value = "GF", required = false) String gf, @RequestParam(value = "Foreman", required = false) String foreman, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDPRSteelCondensed");

        return queryService.exportGetReportDPRSteelCondensed(exportType, pm, constM, siteM, areaM, super_, gf, foreman, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelBoltout", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelBoltout(@Valid @RequestBody UpdateSteelBoltoutRequest updateSteelBoltoutRequest) {
        LOGGER.debug("Executing named query: UpdateSteelBoltout");
        Integer _result = queryService.executeUpdateSteelBoltout(updateSteelBoltoutRequest);
        LOGGER.debug("got the result for named query: UpdateSteelBoltout, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetUniqueDrawingNumber", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetUniqueDrawingNumberResponse> executeGetUniqueDrawingNumber(Pageable pageable) {
        LOGGER.debug("Executing named query: GetUniqueDrawingNumber");
        Page<GetUniqueDrawingNumberResponse> _result = queryService.executeGetUniqueDrawingNumber(pageable);
        LOGGER.debug("got the result for named query: GetUniqueDrawingNumber, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetUniqueDrawingNumber")
    @RequestMapping(value = "/queries/GetUniqueDrawingNumber/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetUniqueDrawingNumber(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetUniqueDrawingNumber");

        return queryService.exportGetUniqueDrawingNumber(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSubDetails", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates Job####.SubsDetails with Data inputs")
    public Integer executeUpdateSubDetails(@Valid @RequestBody UpdateSubDetailsRequest updateSubDetailsRequest) {
        LOGGER.debug("Executing named query: UpdateSubDetails");
        Integer _result = queryService.executeUpdateSubDetails(updateSubDetailsRequest);
        LOGGER.debug("got the result for named query: UpdateSubDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UnLockSSActivity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUnLockSSActivity(@Valid @RequestBody UnLockSsactivityRequest unLockSsactivityRequest) {
        LOGGER.debug("Executing named query: UnLockSSActivity");
        Integer _result = queryService.executeUnLockSSActivity(unLockSsactivityRequest);
        LOGGER.debug("got the result for named query: UnLockSSActivity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingSteelImpPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingSteelImpPercentResponse> executeGetSettingSteelImpPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingSteelImpPercent");
        Page<GetSettingSteelImpPercentResponse> _result = queryService.executeGetSettingSteelImpPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingSteelImpPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingSteelImpPercent")
    @RequestMapping(value = "/queries/GetSettingSteelImpPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingSteelImpPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingSteelImpPercent");

        return queryService.exportGetSettingSteelImpPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackageCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Bid items with the supplied TestPackage")
    public Page<GetBidActivityMatchesByTestPackageCivilResponse> executeGetBidActivityMatchesByTestPackageCivil(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesByTestPackageCivil");
        Page<GetBidActivityMatchesByTestPackageCivilResponse> _result = queryService.executeGetBidActivityMatchesByTestPackageCivil(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesByTestPackageCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesByTestPackageCivil")
    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackageCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesByTestPackageCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesByTestPackageCivil");

        return queryService.exportGetBidActivityMatchesByTestPackageCivil(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotalsByTestPackage", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all takeoffs quantities, Installed quantities,takeoff Hours, Hours earned, Remaining Quantities, and remaining hours BY Test Package")
    public Page<GetAlltotalsByTestPackageResponse> executeGetALLTotalsByTestPackage(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByTestPackage");
        Page<GetAlltotalsByTestPackageResponse> _result = queryService.executeGetALLTotalsByTestPackage(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByTestPackage, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByTestPackage")
    @RequestMapping(value = "/queries/GetALLTotalsByTestPackage/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByTestPackage(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByTestPackage");

        return queryService.exportGetALLTotalsByTestPackage(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingCivilWork", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingCivilWork(@Valid @RequestBody UpdateSettingCivilWorkRequest updateSettingCivilWorkRequest) {
        LOGGER.debug("Executing named query: UpdateSettingCivilWork");
        Integer _result = queryService.executeUpdateSettingCivilWork(updateSettingCivilWorkRequest);
        LOGGER.debug("got the result for named query: UpdateSettingCivilWork, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetPSAActivityByUid", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all activities pending Supervisor review BY SuperID")
    public Page<GetPsaactivityByUidResponse> executeGetPSAActivityByUid(@RequestParam(value = "SuperID", required = false) Integer superId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetPSAActivityByUid");
        Page<GetPsaactivityByUidResponse> _result = queryService.executeGetPSAActivityByUid(superId, pageable);
        LOGGER.debug("got the result for named query: GetPSAActivityByUid, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetPSAActivityByUid")
    @RequestMapping(value = "/queries/GetPSAActivityByUid/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetPSAActivityByUid(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "SuperID", required = false) Integer superId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetPSAActivityByUid");

        return queryService.exportGetPSAActivityByUid(exportType, superId, pageable);
    }

    @RequestMapping(value = "/queries/GetUniqueLineNumbers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetUniqueLineNumbersResponse> executeGetUniqueLineNumbers(Pageable pageable) {
        LOGGER.debug("Executing named query: GetUniqueLineNumbers");
        Page<GetUniqueLineNumbersResponse> _result = queryService.executeGetUniqueLineNumbers(pageable);
        LOGGER.debug("got the result for named query: GetUniqueLineNumbers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetUniqueLineNumbers")
    @RequestMapping(value = "/queries/GetUniqueLineNumbers/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetUniqueLineNumbers(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetUniqueLineNumbers");

        return queryService.exportGetUniqueLineNumbers(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantitiesTestPackageSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Page<GetQuantitiesTestPackageSteelResponse> executeGetQuantitiesTestPackageSteel(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantitiesTestPackageSteel");
        Page<GetQuantitiesTestPackageSteelResponse> _result = queryService.executeGetQuantitiesTestPackageSteel(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetQuantitiesTestPackageSteel, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantitiesTestPackageSteel")
    @RequestMapping(value = "/queries/GetQuantitiesTestPackageSteel/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantitiesTestPackageSteel(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantitiesTestPackageSteel");

        return queryService.exportGetQuantitiesTestPackageSteel(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityMatches", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the Bid Activities that match the input parameters.")
    public Page<GetBidActivityMatchesResponse> executeGetBidActivityMatches(@RequestParam(value = "LineNumber", required = false) String lineNumber, @RequestParam(value = "DrawingNumber", required = false) String drawingNumber, @RequestParam(value = "SheetNumber", required = false) String sheetNumber, @RequestParam(value = "ECT", required = false) String ect, @RequestParam(value = "ECTType", required = false) String ecttype, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatches");
        Page<GetBidActivityMatchesResponse> _result = queryService.executeGetBidActivityMatches(lineNumber, drawingNumber, sheetNumber, ect, ecttype, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatches, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatches")
    @RequestMapping(value = "/queries/GetBidActivityMatches/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatches(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "LineNumber", required = false) String lineNumber, @RequestParam(value = "DrawingNumber", required = false) String drawingNumber, @RequestParam(value = "SheetNumber", required = false) String sheetNumber, @RequestParam(value = "ECT", required = false) String ect, @RequestParam(value = "ECTType", required = false) String ecttype, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatches");

        return queryService.exportGetBidActivityMatches(exportType, lineNumber, drawingNumber, sheetNumber, ect, ecttype, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelErectQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelErectQuantity(@Valid @RequestBody UpdateSteelErectQuantityRequest updateSteelErectQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelErectQuantity");
        Integer _result = queryService.executeUpdateSteelErectQuantity(updateSteelErectQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelErectQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelShake", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelShake(@Valid @RequestBody UpdateSteelShakeRequest updateSteelShakeRequest) {
        LOGGER.debug("Executing named query: UpdateSteelShake");
        Integer _result = queryService.executeUpdateSteelShake(updateSteelShakeRequest);
        LOGGER.debug("got the result for named query: UpdateSteelShake, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetALLTotalsByArea", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all takeoffs quantities, Installed quantities,takoff Hours, Hours earned, Remaining Quantities, and remaining hours BY Area")
    public Page<GetAlltotalsByAreaResponse> executeGetALLTotalsByArea(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByArea");
        Page<GetAlltotalsByAreaResponse> _result = queryService.executeGetALLTotalsByArea(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByArea, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByArea")
    @RequestMapping(value = "/queries/GetALLTotalsByArea/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByArea(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByArea");

        return queryService.exportGetALLTotalsByArea(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingPipeCTOPercent", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingPipeCTOPercent(@Valid @RequestBody UpdateSettingPipeCtopercentRequest updateSettingPipeCtopercentRequest) {
        LOGGER.debug("Executing named query: UpdateSettingPipeCTOPercent");
        Integer _result = queryService.executeUpdateSettingPipeCTOPercent(updateSettingPipeCtopercentRequest);
        LOGGER.debug("got the result for named query: UpdateSettingPipeCTOPercent, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingSteelErectPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SteelErectHoursPercent")
    public Page<GetSettingSteelErectPercentResponse> executeGetSettingSteelErectPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingSteelErectPercent");
        Page<GetSettingSteelErectPercentResponse> _result = queryService.executeGetSettingSteelErectPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingSteelErectPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingSteelErectPercent")
    @RequestMapping(value = "/queries/GetSettingSteelErectPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingSteelErectPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingSteelErectPercent");

        return queryService.exportGetSettingSteelErectPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetPSAActivityByUidCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the number of activities pending supervisor approval")
    public Page<GetPsaactivityByUidCountResponse> executeGetPSAActivityByUidCount(@RequestParam(value = "SuperID", required = false) Integer superId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetPSAActivityByUidCount");
        Page<GetPsaactivityByUidCountResponse> _result = queryService.executeGetPSAActivityByUidCount(superId, pageable);
        LOGGER.debug("got the result for named query: GetPSAActivityByUidCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetPSAActivityByUidCount")
    @RequestMapping(value = "/queries/GetPSAActivityByUidCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetPSAActivityByUidCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "SuperID", required = false) Integer superId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetPSAActivityByUidCount");

        return queryService.exportGetPSAActivityByUidCount(exportType, superId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateTrimQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateTrimQuantity(@Valid @RequestBody UpdateTrimQuantityRequest updateTrimQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateTrimQuantity");
        Integer _result = queryService.executeUpdateTrimQuantity(updateTrimQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateTrimQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingCivilWork", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingCivilWorkResponse> executeGetSettingCivilWork(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingCivilWork");
        Page<GetSettingCivilWorkResponse> _result = queryService.executeGetSettingCivilWork(pageable);
        LOGGER.debug("got the result for named query: GetSettingCivilWork, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingCivilWork")
    @RequestMapping(value = "/queries/GetSettingCivilWork/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingCivilWork(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingCivilWork");

        return queryService.exportGetSettingCivilWork(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelShakeQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelShakeQuantity(@Valid @RequestBody UpdateSteelShakeQuantityRequest updateSteelShakeQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelShakeQuantity");
        Integer _result = queryService.executeUpdateSteelShakeQuantity(updateSteelShakeQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelShakeQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSettingSteelImp", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingSteelImp(@Valid @RequestBody UpdateSettingSteelImpRequest updateSettingSteelImpRequest) {
        LOGGER.debug("Executing named query: UpdateSettingSteelImp");
        Integer _result = queryService.executeUpdateSettingSteelImp(updateSettingSteelImpRequest);
        LOGGER.debug("got the result for named query: UpdateSettingSteelImp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingPipeMechPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingPipeMechPercentResponse> executeGetSettingPipeMechPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingPipeMechPercent");
        Page<GetSettingPipeMechPercentResponse> _result = queryService.executeGetSettingPipeMechPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingPipeMechPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingPipeMechPercent")
    @RequestMapping(value = "/queries/GetSettingPipeMechPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingPipeMechPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingPipeMechPercent");

        return queryService.exportGetSettingPipeMechPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelWeldQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Integer executeUpdateSteelWeldQuantity(@Valid @RequestBody UpdateSteelWeldQuantityRequest updateSteelWeldQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelWeldQuantity");
        Integer _result = queryService.executeUpdateSteelWeldQuantity(updateSteelWeldQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelWeldQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelImp", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelImp(@Valid @RequestBody UpdateSteelImpRequest updateSteelImpRequest) {
        LOGGER.debug("Executing named query: UpdateSteelImp");
        Integer _result = queryService.executeUpdateSteelImp(updateSteelImpRequest);
        LOGGER.debug("got the result for named query: UpdateSteelImp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSteelSell", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelSell(@Valid @RequestBody UpdateSteelSellRequest updateSteelSellRequest) {
        LOGGER.debug("Executing named query: UpdateSteelSell");
        Integer _result = queryService.executeUpdateSteelSell(updateSteelSellRequest);
        LOGGER.debug("got the result for named query: UpdateSteelSell, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingPipeTestingPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Percent of Mech hours for testing")
    public Page<GetSettingPipeTestingPercentResponse> executeGetSettingPipeTestingPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingPipeTestingPercent");
        Page<GetSettingPipeTestingPercentResponse> _result = queryService.executeGetSettingPipeTestingPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingPipeTestingPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingPipeTestingPercent")
    @RequestMapping(value = "/queries/GetSettingPipeTestingPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingPipeTestingPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingPipeTestingPercent");

        return queryService.exportGetSettingPipeTestingPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateErectionQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateErectionQuantity(@Valid @RequestBody UpdateErectionQuantityRequest updateErectionQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateErectionQuantity");
        Integer _result = queryService.executeUpdateErectionQuantity(updateErectionQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateErectionQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Page<GetBidActivityMatchesCivilResponse> executeGetBidActivityMatchesCivil(@RequestParam(value = "BidID", required = false) Integer bidId, @RequestParam(value = "Foundation", required = false) String foundation, @RequestParam(value = "DrawingNumber", required = false) String drawingNumber, @RequestParam(value = "DetailDrawingNumber", required = false) String detailDrawingNumber, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesCivil");
        Page<GetBidActivityMatchesCivilResponse> _result = queryService.executeGetBidActivityMatchesCivil(bidId, foundation, drawingNumber, detailDrawingNumber, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesCivil")
    @RequestMapping(value = "/queries/GetBidActivityMatchesCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, @RequestParam(value = "Foundation", required = false) String foundation, @RequestParam(value = "DrawingNumber", required = false) String drawingNumber, @RequestParam(value = "DetailDrawingNumber", required = false) String detailDrawingNumber, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesCivil");

        return queryService.exportGetBidActivityMatchesCivil(exportType, bidId, foundation, drawingNumber, detailDrawingNumber, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelErect", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelErect(@Valid @RequestBody UpdateSteelErectRequest updateSteelErectRequest) {
        LOGGER.debug("Executing named query: UpdateSteelErect");
        Integer _result = queryService.executeUpdateSteelErect(updateSteelErectRequest);
        LOGGER.debug("got the result for named query: UpdateSteelErect, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSupports", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsSupports with Data inputs")
    public Integer executeUpdateSupports(@Valid @RequestBody UpdateSupportsRequest updateSupportsRequest) {
        LOGGER.debug("Executing named query: UpdateSupports");
        Integer _result = queryService.executeUpdateSupports(updateSupportsRequest);
        LOGGER.debug("got the result for named query: UpdateSupports, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetQuantityLFInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Total footage installed by all PSA activities assigned to a BidID BY BidID")
    public Page<GetQuantityLfinstalledResponse> executeGetQuantityLFInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityLFInstalled");
        Page<GetQuantityLfinstalledResponse> _result = queryService.executeGetQuantityLFInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityLFInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityLFInstalled")
    @RequestMapping(value = "/queries/GetQuantityLFInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityLFInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityLFInstalled");

        return queryService.exportGetQuantityLFInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateDemoQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateDemoQuantity(@Valid @RequestBody UpdateDemoQuantityRequest updateDemoQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateDemoQuantity");
        Integer _result = queryService.executeUpdateDemoQuantity(updateDemoQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateDemoQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelSell", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelSellResponse> executeGetActivityHistorySteelSell(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelSell");
        Page<GetActivityHistorySteelSellResponse> _result = queryService.executeGetActivityHistorySteelSell(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelSell, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelSell")
    @RequestMapping(value = "/queries/GetActivityHistorySteelSell/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelSell(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelSell");

        return queryService.exportGetActivityHistorySteelSell(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingPipeRFTPercent", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingPipeRFTPercent(@Valid @RequestBody UpdateSettingPipeRftpercentRequest updateSettingPipeRftpercentRequest) {
        LOGGER.debug("Executing named query: UpdateSettingPipeRFTPercent");
        Integer _result = queryService.executeUpdateSettingPipeRFTPercent(updateSettingPipeRftpercentRequest);
        LOGGER.debug("got the result for named query: UpdateSettingPipeRFTPercent, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateCutPrep", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateCutPrep(@Valid @RequestBody UpdateCutPrepRequest updateCutPrepRequest) {
        LOGGER.debug("Executing named query: UpdateCutPrep");
        Integer _result = queryService.executeUpdateCutPrep(updateCutPrepRequest);
        LOGGER.debug("got the result for named query: UpdateCutPrep, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateCivilMisc", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateCivilMisc(@Valid @RequestBody UpdateCivilMiscRequest updateCivilMiscRequest) {
        LOGGER.debug("Executing named query: UpdateCivilMisc");
        Integer _result = queryService.executeUpdateCivilMisc(updateCivilMiscRequest);
        LOGGER.debug("got the result for named query: UpdateCivilMisc, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetQuantitySupportsInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the number of Supports installed BY BidID")
    public Page<GetQuantitySupportsInstalledResponse> executeGetQuantitySupportsInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantitySupportsInstalled");
        Page<GetQuantitySupportsInstalledResponse> _result = queryService.executeGetQuantitySupportsInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantitySupportsInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantitySupportsInstalled")
    @RequestMapping(value = "/queries/GetQuantitySupportsInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantitySupportsInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantitySupportsInstalled");

        return queryService.exportGetQuantitySupportsInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/CreateSSNote", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a Submission Note")
    public Integer executeCreateSSNote(@Valid @RequestBody CreateSsnoteRequest createSsnoteRequest) {
        LOGGER.debug("Executing named query: CreateSSNote");
        Integer _result = queryService.executeCreateSSNote(createSsnoteRequest);
        LOGGER.debug("got the result for named query: CreateSSNote, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSettingPipeMechPercent", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingPipeMechPercent(@Valid @RequestBody UpdateSettingPipeMechPercentRequest updateSettingPipeMechPercentRequest) {
        LOGGER.debug("Executing named query: UpdateSettingPipeMechPercent");
        Integer _result = queryService.executeUpdateSettingPipeMechPercent(updateSettingPipeMechPercentRequest);
        LOGGER.debug("got the result for named query: UpdateSettingPipeMechPercent, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingPipeCTOPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingPipeCtopercentResponse> executeGetSettingPipeCTOPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingPipeCTOPercent");
        Page<GetSettingPipeCtopercentResponse> _result = queryService.executeGetSettingPipeCTOPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingPipeCTOPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingPipeCTOPercent")
    @RequestMapping(value = "/queries/GetSettingPipeCTOPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingPipeCTOPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingPipeCTOPercent");

        return queryService.exportGetSettingPipeCTOPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingPipeHydroPercent", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingPipeHydroPercent(@Valid @RequestBody UpdateSettingPipeHydroPercentRequest updateSettingPipeHydroPercentRequest) {
        LOGGER.debug("Executing named query: UpdateSettingPipeHydroPercent");
        Integer _result = queryService.executeUpdateSettingPipeHydroPercent(updateSettingPipeHydroPercentRequest);
        LOGGER.debug("got the result for named query: UpdateSettingPipeHydroPercent, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateTesting", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsTesting with input fields")
    public Integer executeUpdateTesting(@Valid @RequestBody UpdateTestingRequest updateTestingRequest) {
        LOGGER.debug("Executing named query: UpdateTesting");
        Integer _result = queryService.executeUpdateTesting(updateTestingRequest);
        LOGGER.debug("got the result for named query: UpdateTesting, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateCivilFA", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateCivilFA(@Valid @RequestBody UpdateCivilFaRequest updateCivilFaRequest) {
        LOGGER.debug("Executing named query: UpdateCivilFA");
        Integer _result = queryService.executeUpdateCivilFA(updateCivilFaRequest);
        LOGGER.debug("got the result for named query: UpdateCivilFA, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetEarnedHoursReport", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Hours earned total.  Over the last 1,7,14, & 21 days")
    public Page<GetEarnedHoursReportResponse> executeGetEarnedHoursReport(@RequestParam(value = "ForemanID", required = false) String foremanId, @RequestParam(value = "SuperID", required = false) String superId, @RequestParam(value = "ManagerID", required = false) String managerId, @RequestParam(value = "Date", required = false) Date date, Pageable pageable) {
        LOGGER.debug("Executing named query: GetEarnedHoursReport");
        Page<GetEarnedHoursReportResponse> _result = queryService.executeGetEarnedHoursReport(foremanId, superId, managerId, date, pageable);
        LOGGER.debug("got the result for named query: GetEarnedHoursReport, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetEarnedHoursReport")
    @RequestMapping(value = "/queries/GetEarnedHoursReport/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetEarnedHoursReport(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ForemanID", required = false) String foremanId, @RequestParam(value = "SuperID", required = false) String superId, @RequestParam(value = "ManagerID", required = false) String managerId, @RequestParam(value = "Date", required = false) Date date, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetEarnedHoursReport");

        return queryService.exportGetEarnedHoursReport(exportType, foremanId, superId, managerId, date, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelWeld", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelWeldResponse> executeGetActivityHistorySteelWeld(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelWeld");
        Page<GetActivityHistorySteelWeldResponse> _result = queryService.executeGetActivityHistorySteelWeld(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelWeld, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelWeld")
    @RequestMapping(value = "/queries/GetActivityHistorySteelWeld/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelWeld(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelWeld");

        return queryService.exportGetActivityHistorySteelWeld(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityQuantity", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Bid estimate Quantity of a specified BidID")
    public Page<GetBidActivityQuantityResponse> executeGetBidActivityQuantity(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityQuantity");
        Page<GetBidActivityQuantityResponse> _result = queryService.executeGetBidActivityQuantity(bidId, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityQuantity, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityQuantity")
    @RequestMapping(value = "/queries/GetBidActivityQuantity/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityQuantity(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityQuantity");

        return queryService.exportGetBidActivityQuantity(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelImp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelImpResponse> executeGetActivityHistorySteelImp(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelImp");
        Page<GetActivityHistorySteelImpResponse> _result = queryService.executeGetActivityHistorySteelImp(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelImp, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelImp")
    @RequestMapping(value = "/queries/GetActivityHistorySteelImp/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelImp(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelImp");

        return queryService.exportGetActivityHistorySteelImp(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantityMiscInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetQuantityMiscInstalledResponse> executeGetQuantityMiscInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityMiscInstalled");
        Page<GetQuantityMiscInstalledResponse> _result = queryService.executeGetQuantityMiscInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityMiscInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityMiscInstalled")
    @RequestMapping(value = "/queries/GetQuantityMiscInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityMiscInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityMiscInstalled");

        return queryService.exportGetQuantityMiscInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantityDemoRemoved", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "...")
    public Page<GetQuantityDemoRemovedResponse> executeGetQuantityDemoRemoved(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityDemoRemoved");
        Page<GetQuantityDemoRemovedResponse> _result = queryService.executeGetQuantityDemoRemoved(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityDemoRemoved, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityDemoRemoved")
    @RequestMapping(value = "/queries/GetQuantityDemoRemoved/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityDemoRemoved(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityDemoRemoved");

        return queryService.exportGetQuantityDemoRemoved(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetDrawingByTestPackageSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetDrawingByTestPackageSteelResponse> executeGetDrawingByTestPackageSteel(@RequestParam(value = "TestPackage", required = false) Integer testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetDrawingByTestPackageSteel");
        Page<GetDrawingByTestPackageSteelResponse> _result = queryService.executeGetDrawingByTestPackageSteel(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetDrawingByTestPackageSteel, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetDrawingByTestPackageSteel")
    @RequestMapping(value = "/queries/GetDrawingByTestPackageSteel/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetDrawingByTestPackageSteel(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) Integer testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetDrawingByTestPackageSteel");

        return queryService.exportGetDrawingByTestPackageSteel(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelDemo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelDemoResponse> executeGetActivityHistorySteelDemo(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelDemo");
        Page<GetActivityHistorySteelDemoResponse> _result = queryService.executeGetActivityHistorySteelDemo(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelDemo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelDemo")
    @RequestMapping(value = "/queries/GetActivityHistorySteelDemo/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelDemo(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelDemo");

        return queryService.exportGetActivityHistorySteelDemo(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelSellPackage", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelSellPackage(@Valid @RequestBody UpdateSteelSellPackageRequest updateSteelSellPackageRequest) {
        LOGGER.debug("Executing named query: UpdateSteelSellPackage");
        Integer _result = queryService.executeUpdateSteelSellPackage(updateSteelSellPackageRequest);
        LOGGER.debug("got the result for named query: UpdateSteelSellPackage, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateEquipFA", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public IntegerWrapper executeUpdateEquipFA(@Valid @RequestBody UpdateEquipFaRequest updateEquipFaRequest) {
        LOGGER.debug("Executing named query: UpdateEquipFA");
        Integer _result = queryService.executeUpdateEquipFA(updateEquipFaRequest);
        LOGGER.debug("got the result for named query: UpdateEquipFA, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/GetBidWorkHistorySteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all Field activities assigned to the given BidID, Grouped by Submission ID")
    public Page<GetBidWorkHistorySteelResponse> executeGetBidWorkHistorySteel(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidWorkHistorySteel");
        Page<GetBidWorkHistorySteelResponse> _result = queryService.executeGetBidWorkHistorySteel(bidId, pageable);
        LOGGER.debug("got the result for named query: GetBidWorkHistorySteel, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidWorkHistorySteel")
    @RequestMapping(value = "/queries/GetBidWorkHistorySteel/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidWorkHistorySteel(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidWorkHistorySteel");

        return queryService.exportGetBidWorkHistorySteel(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateEWO", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsEWO from input fields")
    public Integer executeUpdateEWO(@Valid @RequestBody UpdateEwoRequest updateEwoRequest) {
        LOGGER.debug("Executing named query: UpdateEWO");
        Integer _result = queryService.executeUpdateEWO(updateEwoRequest);
        LOGGER.debug("got the result for named query: UpdateEWO, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingProductivityIntervals", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingProductivityIntervalsResponse> executeGetSettingProductivityIntervals(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingProductivityIntervals");
        Page<GetSettingProductivityIntervalsResponse> _result = queryService.executeGetSettingProductivityIntervals(pageable);
        LOGGER.debug("got the result for named query: GetSettingProductivityIntervals, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingProductivityIntervals")
    @RequestMapping(value = "/queries/GetSettingProductivityIntervals/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingProductivityIntervals(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingProductivityIntervals");

        return queryService.exportGetSettingProductivityIntervals(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetPSRecentActivities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the recent activities modified by a given user in PS review")
    public Page<GetPsrecentActivitiesResponse> executeGetPSRecentActivities(@RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetPSRecentActivities");
        Page<GetPsrecentActivitiesResponse> _result = queryService.executeGetPSRecentActivities(userId, pageable);
        LOGGER.debug("got the result for named query: GetPSRecentActivities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetPSRecentActivities")
    @RequestMapping(value = "/queries/GetPSRecentActivities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetPSRecentActivities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetPSRecentActivities");

        return queryService.exportGetPSRecentActivities(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivitiesPendingApprovalCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the count of activities pending approval, since the _.size method on a dataGrid maxes out at request size.")
    public Page<GetActivitiesPendingApprovalCountResponse> executeGetActivitiesPendingApprovalCount(@RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivitiesPendingApprovalCount");
        Page<GetActivitiesPendingApprovalCountResponse> _result = queryService.executeGetActivitiesPendingApprovalCount(userId, pageable);
        LOGGER.debug("got the result for named query: GetActivitiesPendingApprovalCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivitiesPendingApprovalCount")
    @RequestMapping(value = "/queries/GetActivitiesPendingApprovalCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivitiesPendingApprovalCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivitiesPendingApprovalCount");

        return queryService.exportGetActivitiesPendingApprovalCount(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/GetReportDPREquip", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetReportDprequipResponse> executeGetReportDPREquip(@RequestParam(value = "ForemanID") String foremanId, @RequestParam(value = "SuperID") String superId, @RequestParam(value = "ManagerID") String managerId, @RequestParam(value = "StartDate") Date startDate, @RequestParam(value = "EndDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDPREquip");
        Page<GetReportDprequipResponse> _result = queryService.executeGetReportDPREquip(foremanId, superId, managerId, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDPREquip, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDPREquip")
    @RequestMapping(value = "/queries/GetReportDPREquip/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDPREquip(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ForemanID") String foremanId, @RequestParam(value = "SuperID") String superId, @RequestParam(value = "ManagerID") String managerId, @RequestParam(value = "StartDate") Date startDate, @RequestParam(value = "EndDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDPREquip");

        return queryService.exportGetReportDPREquip(exportType, foremanId, superId, managerId, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelBoltout", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelBoltoutResponse> executeGetActivityHistorySteelBoltout(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelBoltout");
        Page<GetActivityHistorySteelBoltoutResponse> _result = queryService.executeGetActivityHistorySteelBoltout(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelBoltout, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelBoltout")
    @RequestMapping(value = "/queries/GetActivityHistorySteelBoltout/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelBoltout(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelBoltout");

        return queryService.exportGetActivityHistorySteelBoltout(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetBidChangeLogByID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetBidChangeLogByIdResponse> executeGetBidChangeLogByID(@RequestParam(value = "ID", required = false) Integer id, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidChangeLogByID");
        Page<GetBidChangeLogByIdResponse> _result = queryService.executeGetBidChangeLogByID(id, pageable);
        LOGGER.debug("got the result for named query: GetBidChangeLogByID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidChangeLogByID")
    @RequestMapping(value = "/queries/GetBidChangeLogByID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidChangeLogByID(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ID", required = false) Integer id, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidChangeLogByID");

        return queryService.exportGetBidChangeLogByID(exportType, id, pageable);
    }

    @RequestMapping(value = "/queries/UpdateEquipFAQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Quantity only for Equip FA")
    public IntegerWrapper executeUpdateEquipFAQuantity(@Valid @RequestBody UpdateEquipFaquantityRequest updateEquipFaquantityRequest) {
        LOGGER.debug("Executing named query: UpdateEquipFAQuantity");
        Integer _result = queryService.executeUpdateEquipFAQuantity(updateEquipFaquantityRequest);
        LOGGER.debug("got the result for named query: UpdateEquipFAQuantity, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/GetSteelBidActivityQuantities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Steel Quantities for Activity Assign Dialog")
    public Page<GetSteelBidActivityQuantitiesResponse> executeGetSteelBidActivityQuantities(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetSteelBidActivityQuantities");
        Page<GetSteelBidActivityQuantitiesResponse> _result = queryService.executeGetSteelBidActivityQuantities(bidId, pageable);
        LOGGER.debug("got the result for named query: GetSteelBidActivityQuantities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSteelBidActivityQuantities")
    @RequestMapping(value = "/queries/GetSteelBidActivityQuantities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSteelBidActivityQuantities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSteelBidActivityQuantities");

        return queryService.exportGetSteelBidActivityQuantities(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistoryCivilMisc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Page<GetActivityHistoryCivilMiscResponse> executeGetActivityHistoryCivilMisc(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryCivilMisc");
        Page<GetActivityHistoryCivilMiscResponse> _result = queryService.executeGetActivityHistoryCivilMisc(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryCivilMisc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryCivilMisc")
    @RequestMapping(value = "/queries/GetActivityHistoryCivilMisc/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryCivilMisc(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryCivilMisc");

        return queryService.exportGetActivityHistoryCivilMisc(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantityBoltUpInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the Quantity of units installed BY BidID")
    public Page<GetQuantityBoltUpInstalledResponse> executeGetQuantityBoltUpInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityBoltUpInstalled");
        Page<GetQuantityBoltUpInstalledResponse> _result = queryService.executeGetQuantityBoltUpInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityBoltUpInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityBoltUpInstalled")
    @RequestMapping(value = "/queries/GetQuantityBoltUpInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityBoltUpInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityBoltUpInstalled");

        return queryService.exportGetQuantityBoltUpInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackageSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Page<GetBidActivityMatchesByTestPackageSteelResponse> executeGetBidActivityMatchesByTestPackageSteel(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesByTestPackageSteel");
        Page<GetBidActivityMatchesByTestPackageSteelResponse> _result = queryService.executeGetBidActivityMatchesByTestPackageSteel(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesByTestPackageSteel, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesByTestPackageSteel")
    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackageSteel/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesByTestPackageSteel(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesByTestPackageSteel");

        return queryService.exportGetBidActivityMatchesByTestPackageSteel(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotalsByP6ID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all takeoffs quantities, Installed quantities,takeoff Hours, Hours earned, Remaining Quantities, and remaining hours BY P6ID")
    public Page<GetAlltotalsByP6idResponse> executeGetALLTotalsByP6ID(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByP6ID");
        Page<GetAlltotalsByP6idResponse> _result = queryService.executeGetALLTotalsByP6ID(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByP6ID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByP6ID")
    @RequestMapping(value = "/queries/GetALLTotalsByP6ID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByP6ID(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByP6ID");

        return queryService.exportGetALLTotalsByP6ID(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetBidWorkHistoryEquip", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetBidWorkHistoryEquipResponse> executeGetBidWorkHistoryEquip(@RequestParam(value = "BidID") String bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidWorkHistoryEquip");
        Page<GetBidWorkHistoryEquipResponse> _result = queryService.executeGetBidWorkHistoryEquip(bidId, pageable);
        LOGGER.debug("got the result for named query: GetBidWorkHistoryEquip, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidWorkHistoryEquip")
    @RequestMapping(value = "/queries/GetBidWorkHistoryEquip/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidWorkHistoryEquip(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID") String bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidWorkHistoryEquip");

        return queryService.exportGetBidWorkHistoryEquip(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetEquipBidActivityQuantites", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetEquipBidActivityQuantitesResponse> executeGetEquipBidActivityQuantites(@RequestParam(value = "BidID") String bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetEquipBidActivityQuantites");
        Page<GetEquipBidActivityQuantitesResponse> _result = queryService.executeGetEquipBidActivityQuantites(bidId, pageable);
        LOGGER.debug("got the result for named query: GetEquipBidActivityQuantites, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetEquipBidActivityQuantites")
    @RequestMapping(value = "/queries/GetEquipBidActivityQuantites/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetEquipBidActivityQuantites(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID") String bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetEquipBidActivityQuantites");

        return queryService.exportGetEquipBidActivityQuantites(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelBoltoutQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Integer executeUpdateSteelBoltoutQuantity(@Valid @RequestBody UpdateSteelBoltoutQuantityRequest updateSteelBoltoutQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelBoltoutQuantity");
        Integer _result = queryService.executeUpdateSteelBoltoutQuantity(updateSteelBoltoutQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelBoltoutQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetReportDPRSteelDetailed", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetReportDprsteelDetailedResponse> executeGetReportDPRSteelDetailed(@RequestParam(value = "PM", required = false) String pm, @RequestParam(value = "ConstM", required = false) String constM, @RequestParam(value = "SiteM", required = false) String siteM, @RequestParam(value = "AreaM", required = false) String areaM, @RequestParam(value = "Super", required = false) String super_, @RequestParam(value = "GF", required = false) String gf, @RequestParam(value = "Foreman", required = false) String foreman, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDPRSteelDetailed");
        Page<GetReportDprsteelDetailedResponse> _result = queryService.executeGetReportDPRSteelDetailed(pm, constM, siteM, areaM, super_, gf, foreman, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDPRSteelDetailed, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDPRSteelDetailed")
    @RequestMapping(value = "/queries/GetReportDPRSteelDetailed/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDPRSteelDetailed(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "PM", required = false) String pm, @RequestParam(value = "ConstM", required = false) String constM, @RequestParam(value = "SiteM", required = false) String siteM, @RequestParam(value = "AreaM", required = false) String areaM, @RequestParam(value = "Super", required = false) String super_, @RequestParam(value = "GF", required = false) String gf, @RequestParam(value = "Foreman", required = false) String foreman, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDPRSteelDetailed");

        return queryService.exportGetReportDPRSteelDetailed(exportType, pm, constM, siteM, areaM, super_, gf, foreman, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingSteelBoltout", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingSteelBoltout(@Valid @RequestBody UpdateSettingSteelBoltoutRequest updateSettingSteelBoltoutRequest) {
        LOGGER.debug("Executing named query: UpdateSettingSteelBoltout");
        Integer _result = queryService.executeUpdateSettingSteelBoltout(updateSettingSteelBoltoutRequest);
        LOGGER.debug("got the result for named query: UpdateSettingSteelBoltout, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetNotesByPSAActivityID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets all notes tied to a specified ID")
    public Page<GetNotesByPsaactivityIdResponse> executeGetNotesByPSAActivityID(@RequestParam(value = "ActivityID", required = false) Integer activityId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetNotesByPSAActivityID");
        Page<GetNotesByPsaactivityIdResponse> _result = queryService.executeGetNotesByPSAActivityID(activityId, pageable);
        LOGGER.debug("got the result for named query: GetNotesByPSAActivityID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetNotesByPSAActivityID")
    @RequestMapping(value = "/queries/GetNotesByPSAActivityID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetNotesByPSAActivityID(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ActivityID", required = false) Integer activityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetNotesByPSAActivityID");

        return queryService.exportGetNotesByPSAActivityID(exportType, activityId, pageable);
    }

    @RequestMapping(value = "/queries/GetReportDPRCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Name")
    public Page<GetReportDprcivilResponse> executeGetReportDPRCivil(@RequestParam(value = "ForemanID") String foremanId, @RequestParam(value = "SuperID") String superId, @RequestParam(value = "ManagerID") String managerId, @RequestParam(value = "StartDate") Date startDate, @RequestParam(value = "EndDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDPRCivil");
        Page<GetReportDprcivilResponse> _result = queryService.executeGetReportDPRCivil(foremanId, superId, managerId, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDPRCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDPRCivil")
    @RequestMapping(value = "/queries/GetReportDPRCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDPRCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ForemanID") String foremanId, @RequestParam(value = "SuperID") String superId, @RequestParam(value = "ManagerID") String managerId, @RequestParam(value = "StartDate") Date startDate, @RequestParam(value = "EndDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDPRCivil");

        return queryService.exportGetReportDPRCivil(exportType, foremanId, superId, managerId, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesSteel", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "above")
    public Page<GetBidActivityMatchesSteelResponse> executeGetBidActivityMatchesSteel(@RequestParam(value = "Area", required = false) String area, @RequestParam(value = "PieceMark", required = false) String pieceMark, @RequestParam(value = "BidActivityType", required = false) String bidActivityType, @RequestParam(value = "SteelType", required = false) String steelType, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesSteel");
        Page<GetBidActivityMatchesSteelResponse> _result = queryService.executeGetBidActivityMatchesSteel(area, pieceMark, bidActivityType, steelType, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesSteel, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesSteel")
    @RequestMapping(value = "/queries/GetBidActivityMatchesSteel/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesSteel(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Area", required = false) String area, @RequestParam(value = "PieceMark", required = false) String pieceMark, @RequestParam(value = "BidActivityType", required = false) String bidActivityType, @RequestParam(value = "SteelType", required = false) String steelType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesSteel");

        return queryService.exportGetBidActivityMatchesSteel(exportType, area, pieceMark, bidActivityType, steelType, pageable);
    }

    @RequestMapping(value = "/queries/GetSettingSteelBoltoutPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingSteelBoltoutPercentResponse> executeGetSettingSteelBoltoutPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingSteelBoltoutPercent");
        Page<GetSettingSteelBoltoutPercentResponse> _result = queryService.executeGetSettingSteelBoltoutPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingSteelBoltoutPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingSteelBoltoutPercent")
    @RequestMapping(value = "/queries/GetSettingSteelBoltoutPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingSteelBoltoutPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingSteelBoltoutPercent");

        return queryService.exportGetSettingSteelBoltoutPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateCivilFAQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateCivilFAQuantity(@Valid @RequestBody UpdateCivilFaquantityRequest updateCivilFaquantityRequest) {
        LOGGER.debug("Executing named query: UpdateCivilFAQuantity");
        Integer _result = queryService.executeUpdateCivilFAQuantity(updateCivilFaquantityRequest);
        LOGGER.debug("got the result for named query: UpdateCivilFAQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetCivilBidActivityQuantities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetCivilBidActivityQuantitiesResponse> executeGetCivilBidActivityQuantities(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetCivilBidActivityQuantities");
        Page<GetCivilBidActivityQuantitiesResponse> _result = queryService.executeGetCivilBidActivityQuantities(bidId, pageable);
        LOGGER.debug("got the result for named query: GetCivilBidActivityQuantities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetCivilBidActivityQuantities")
    @RequestMapping(value = "/queries/GetCivilBidActivityQuantities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetCivilBidActivityQuantities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetCivilBidActivityQuantities");

        return queryService.exportGetCivilBidActivityQuantities(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingSteelErect", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingSteelErect(@Valid @RequestBody UpdateSettingSteelErectRequest updateSettingSteelErectRequest) {
        LOGGER.debug("Executing named query: UpdateSettingSteelErect");
        Integer _result = queryService.executeUpdateSettingSteelErect(updateSettingSteelErectRequest);
        LOGGER.debug("got the result for named query: UpdateSettingSteelErect, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryStatus", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistoryStatusResponse> executeGetActivityHistoryStatus(@RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryStatus");
        Page<GetActivityHistoryStatusResponse> _result = queryService.executeGetActivityHistoryStatus(psaactivityId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryStatus, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryStatus")
    @RequestMapping(value = "/queries/GetActivityHistoryStatus/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryStatus(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryStatus");

        return queryService.exportGetActivityHistoryStatus(exportType, psaactivityId, pageable);
    }

    @RequestMapping(value = "/queries/GetSettingSteelShakePercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SteelShakeHoursPercent")
    public Page<GetSettingSteelShakePercentResponse> executeGetSettingSteelShakePercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingSteelShakePercent");
        Page<GetSettingSteelShakePercentResponse> _result = queryService.executeGetSettingSteelShakePercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingSteelShakePercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingSteelShakePercent")
    @RequestMapping(value = "/queries/GetSettingSteelShakePercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingSteelShakePercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingSteelShakePercent");

        return queryService.exportGetSettingSteelShakePercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSettingPipeTestingPercent", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingPipeTestingPercent(@Valid @RequestBody UpdateSettingPipeTestingPercentRequest updateSettingPipeTestingPercentRequest) {
        LOGGER.debug("Executing named query: UpdateSettingPipeTestingPercent");
        Integer _result = queryService.executeUpdateSettingPipeTestingPercent(updateSettingPipeTestingPercentRequest);
        LOGGER.debug("got the result for named query: UpdateSettingPipeTestingPercent, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSettingSteelSell", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSettingSteelSell(@Valid @RequestBody UpdateSettingSteelSellRequest updateSettingSteelSellRequest) {
        LOGGER.debug("Executing named query: UpdateSettingSteelSell");
        Integer _result = queryService.executeUpdateSettingSteelSell(updateSettingSteelSellRequest);
        LOGGER.debug("got the result for named query: UpdateSettingSteelSell, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryMisc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryMiscResponse> executeGetActivityHistoryMisc(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryMisc");
        Page<GetActivityHistoryMiscResponse> _result = queryService.executeGetActivityHistoryMisc(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryMisc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryMisc")
    @RequestMapping(value = "/queries/GetActivityHistoryMisc/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryMisc(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryMisc");

        return queryService.exportGetActivityHistoryMisc(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateBoltUp", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Job####.SubsBoltUp table with data from inputs")
    public Integer executeUpdateBoltUp(@Valid @RequestBody UpdateBoltUpRequest updateBoltUpRequest) {
        LOGGER.debug("Executing named query: UpdateBoltUp");
        Integer _result = queryService.executeUpdateBoltUp(updateBoltUpRequest);
        LOGGER.debug("got the result for named query: UpdateBoltUp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetQuantitiesTestPackage", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get testing quantities")
    public Page<GetQuantitiesTestPackageResponse> executeGetQuantitiesTestPackage(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantitiesTestPackage");
        Page<GetQuantitiesTestPackageResponse> _result = queryService.executeGetQuantitiesTestPackage(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetQuantitiesTestPackage, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantitiesTestPackage")
    @RequestMapping(value = "/queries/GetQuantitiesTestPackage/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantitiesTestPackage(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantitiesTestPackage");

        return queryService.exportGetQuantitiesTestPackage(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotalsByBidID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets all Totals By td.ID")
    public Page<GetAlltotalsByBidIdResponse> executeGetALLTotalsByBidID(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByBidID");
        Page<GetAlltotalsByBidIdResponse> _result = queryService.executeGetALLTotalsByBidID(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByBidID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByBidID")
    @RequestMapping(value = "/queries/GetALLTotalsByBidID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByBidID(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByBidID");

        return queryService.exportGetALLTotalsByBidID(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateMiscQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateMiscQuantity(@Valid @RequestBody UpdateMiscQuantityRequest updateMiscQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateMiscQuantity");
        Integer _result = queryService.executeUpdateMiscQuantity(updateMiscQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateMiscQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesEquip", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all Equip Tracker Details that math the given FA")
    public Page<GetBidActivityMatchesEquipResponse> executeGetBidActivityMatchesEquip(@RequestParam(value = "BidID", required = false) String bidId, @RequestParam(value = "TagNumber", required = false) String tagNumber, @RequestParam(value = "Description", required = false) String description, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesEquip");
        Page<GetBidActivityMatchesEquipResponse> _result = queryService.executeGetBidActivityMatchesEquip(bidId, tagNumber, description, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesEquip, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesEquip")
    @RequestMapping(value = "/queries/GetBidActivityMatchesEquip/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesEquip(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) String bidId, @RequestParam(value = "TagNumber", required = false) String tagNumber, @RequestParam(value = "Description", required = false) String description, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesEquip");

        return queryService.exportGetBidActivityMatchesEquip(exportType, bidId, tagNumber, description, pageable);
    }

    @RequestMapping(value = "/queries/UpdateWeldQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateWeldQuantity(@Valid @RequestBody UpdateWeldQuantityRequest updateWeldQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateWeldQuantity");
        Integer _result = queryService.executeUpdateWeldQuantity(updateWeldQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateWeldQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetBidWorkHistoryCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetBidWorkHistoryCivilResponse> executeGetBidWorkHistoryCivil(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidWorkHistoryCivil");
        Page<GetBidWorkHistoryCivilResponse> _result = queryService.executeGetBidWorkHistoryCivil(bidId, pageable);
        LOGGER.debug("got the result for named query: GetBidWorkHistoryCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidWorkHistoryCivil")
    @RequestMapping(value = "/queries/GetBidWorkHistoryCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidWorkHistoryCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidWorkHistoryCivil");

        return queryService.exportGetBidWorkHistoryCivil(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivitiesPendingApproval", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all activities pending PS Approval")
    public Page<GetActivitiesPendingApprovalResponse> executeGetActivitiesPendingApproval(@RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivitiesPendingApproval");
        Page<GetActivitiesPendingApprovalResponse> _result = queryService.executeGetActivitiesPendingApproval(userId, pageable);
        LOGGER.debug("got the result for named query: GetActivitiesPendingApproval, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivitiesPendingApproval")
    @RequestMapping(value = "/queries/GetActivitiesPendingApproval/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivitiesPendingApproval(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "UserID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivitiesPendingApproval");

        return queryService.exportGetActivitiesPendingApproval(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/GetSettingCivilPuch", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingCivilPuchResponse> executeGetSettingCivilPuch(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingCivilPuch");
        Page<GetSettingCivilPuchResponse> _result = queryService.executeGetSettingCivilPuch(pageable);
        LOGGER.debug("got the result for named query: GetSettingCivilPuch, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingCivilPuch")
    @RequestMapping(value = "/queries/GetSettingCivilPuch/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingCivilPuch(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingCivilPuch");

        return queryService.exportGetSettingCivilPuch(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetSettingPipeHydroPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetSettingPipeHydroPercentResponse> executeGetSettingPipeHydroPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingPipeHydroPercent");
        Page<GetSettingPipeHydroPercentResponse> _result = queryService.executeGetSettingPipeHydroPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingPipeHydroPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingPipeHydroPercent")
    @RequestMapping(value = "/queries/GetSettingPipeHydroPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingPipeHydroPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingPipeHydroPercent");

        return queryService.exportGetSettingPipeHydroPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/GetDrawingByTestPackageCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetDrawingByTestPackageCivilResponse> executeGetDrawingByTestPackageCivil(@RequestParam(value = "TestPackage", required = false) Integer testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetDrawingByTestPackageCivil");
        Page<GetDrawingByTestPackageCivilResponse> _result = queryService.executeGetDrawingByTestPackageCivil(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetDrawingByTestPackageCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetDrawingByTestPackageCivil")
    @RequestMapping(value = "/queries/GetDrawingByTestPackageCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetDrawingByTestPackageCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) Integer testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetDrawingByTestPackageCivil");

        return queryService.exportGetDrawingByTestPackageCivil(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/UpdateCivilMiscQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateCivilMiscQuantity(@Valid @RequestBody UpdateCivilMiscQuantityRequest updateCivilMiscQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateCivilMiscQuantity");
        Integer _result = queryService.executeUpdateCivilMiscQuantity(updateCivilMiscQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateCivilMiscQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSS", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SumbissionStatus ModifiedBY, ReviewedBY, and ApprovedBY")
    public Integer executeUpdateSS(@Valid @RequestBody UpdateSsRequest updateSsRequest) {
        LOGGER.debug("Executing named query: UpdateSS");
        Integer _result = queryService.executeUpdateSS(updateSsRequest);
        LOGGER.debug("got the result for named query: UpdateSS, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateSupportsQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateSupportsQuantity(@Valid @RequestBody UpdateSupportsQuantityRequest updateSupportsQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSupportsQuantity");
        Integer _result = queryService.executeUpdateSupportsQuantity(updateSupportsQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSupportsQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryErection", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryErectionResponse> executeGetActivityHistoryErection(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryErection");
        Page<GetActivityHistoryErectionResponse> _result = queryService.executeGetActivityHistoryErection(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryErection, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryErection")
    @RequestMapping(value = "/queries/GetActivityHistoryErection/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryErection(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryErection");

        return queryService.exportGetActivityHistoryErection(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/CheckSSLock", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<CheckSslockResponse> executeCheckSSLock(@RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Executing named query: CheckSSLock");
        Page<CheckSslockResponse> _result = queryService.executeCheckSSLock(psaactivityId, pageable);
        LOGGER.debug("got the result for named query: CheckSSLock, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CheckSSLock")
    @RequestMapping(value = "/queries/CheckSSLock/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCheckSSLock(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CheckSSLock");

        return queryService.exportCheckSSLock(exportType, psaactivityId, pageable);
    }

    @RequestMapping(value = "/queries/GetALLTotalsByCostCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get all takeoffs quantities, Installed quantities,takoff Hours, Hours earned, Remaining Quantities, and remaining hours BY CU")
    public Page<GetAlltotalsByCostCodeResponse> executeGetALLTotalsByCostCode(Pageable pageable) {
        LOGGER.debug("Executing named query: GetALLTotalsByCostCode");
        Page<GetAlltotalsByCostCodeResponse> _result = queryService.executeGetALLTotalsByCostCode(pageable);
        LOGGER.debug("got the result for named query: GetALLTotalsByCostCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetALLTotalsByCostCode")
    @RequestMapping(value = "/queries/GetALLTotalsByCostCode/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetALLTotalsByCostCode(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetALLTotalsByCostCode");

        return queryService.exportGetALLTotalsByCostCode(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateOverrideActivityQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateOverrideActivityQuantity(@Valid @RequestBody UpdateOverrideActivityQuantityRequest updateOverrideActivityQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateOverrideActivityQuantity");
        Integer _result = queryService.executeUpdateOverrideActivityQuantity(updateOverrideActivityQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateOverrideActivityQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetSettingSteelSellPercent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetSettingSteelSellPercent")
    public Page<GetSettingSteelSellPercentResponse> executeGetSettingSteelSellPercent(Pageable pageable) {
        LOGGER.debug("Executing named query: GetSettingSteelSellPercent");
        Page<GetSettingSteelSellPercentResponse> _result = queryService.executeGetSettingSteelSellPercent(pageable);
        LOGGER.debug("got the result for named query: GetSettingSteelSellPercent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetSettingSteelSellPercent")
    @RequestMapping(value = "/queries/GetSettingSteelSellPercent/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetSettingSteelSellPercent(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetSettingSteelSellPercent");

        return queryService.exportGetSettingSteelSellPercent(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateDemo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Integer executeUpdateDemo(@Valid @RequestBody UpdateDemoRequest updateDemoRequest) {
        LOGGER.debug("Executing named query: UpdateDemo");
        Integer _result = queryService.executeUpdateDemo(updateDemoRequest);
        LOGGER.debug("got the result for named query: UpdateDemo, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateWeld", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Job####.SubsWeld with data inputs")
    public Integer executeUpdateWeld(@Valid @RequestBody UpdateWeldRequest updateWeldRequest) {
        LOGGER.debug("Executing named query: UpdateWeld");
        Integer _result = queryService.executeUpdateWeld(updateWeldRequest);
        LOGGER.debug("got the result for named query: UpdateWeld, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetQuantityCutPrepInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Cut/Prep installed Quantity BY BidId")
    public Page<GetQuantityCutPrepInstalledResponse> executeGetQuantityCutPrepInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityCutPrepInstalled");
        Page<GetQuantityCutPrepInstalledResponse> _result = queryService.executeGetQuantityCutPrepInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityCutPrepInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityCutPrepInstalled")
    @RequestMapping(value = "/queries/GetQuantityCutPrepInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityCutPrepInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityCutPrepInstalled");

        return queryService.exportGetQuantityCutPrepInstalled(exportType, bidId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateSteelSellQuantity", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Integer executeUpdateSteelSellQuantity(@Valid @RequestBody UpdateSteelSellQuantityRequest updateSteelSellQuantityRequest) {
        LOGGER.debug("Executing named query: UpdateSteelSellQuantity");
        Integer _result = queryService.executeUpdateSteelSellQuantity(updateSteelSellQuantityRequest);
        LOGGER.debug("got the result for named query: UpdateSteelSellQuantity, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetActivityHistoryTrim", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetActivityHistoryTrimResponse> executeGetActivityHistoryTrim(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryTrim");
        Page<GetActivityHistoryTrimResponse> _result = queryService.executeGetActivityHistoryTrim(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryTrim, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryTrim")
    @RequestMapping(value = "/queries/GetActivityHistoryTrim/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryTrim(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryTrim");

        return queryService.exportGetActivityHistoryTrim(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetQuantitiesTestPackageCivil", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetQuantitiesTestPackageCivilResponse> executeGetQuantitiesTestPackageCivil(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantitiesTestPackageCivil");
        Page<GetQuantitiesTestPackageCivilResponse> _result = queryService.executeGetQuantitiesTestPackageCivil(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetQuantitiesTestPackageCivil, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantitiesTestPackageCivil")
    @RequestMapping(value = "/queries/GetQuantitiesTestPackageCivil/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantitiesTestPackageCivil(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantitiesTestPackageCivil");

        return queryService.exportGetQuantitiesTestPackageCivil(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetReportDWRByDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Daily Weld Report BY Date Range")
    public Page<GetReportDwrbyDateResponse> executeGetReportDWRByDate(@RequestParam(value = "BeginDate", required = false) Date beginDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDWRByDate");
        Page<GetReportDwrbyDateResponse> _result = queryService.executeGetReportDWRByDate(beginDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDWRByDate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDWRByDate")
    @RequestMapping(value = "/queries/GetReportDWRByDate/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDWRByDate(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BeginDate", required = false) Date beginDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDWRByDate");

        return queryService.exportGetReportDWRByDate(exportType, beginDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistoryTesting", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the field activity history for testing activities BY RowID")
    public Page<GetActivityHistoryTestingResponse> executeGetActivityHistoryTesting(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryTesting");
        Page<GetActivityHistoryTestingResponse> _result = queryService.executeGetActivityHistoryTesting(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryTesting, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryTesting")
    @RequestMapping(value = "/queries/GetActivityHistoryTesting/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryTesting(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryTesting");

        return queryService.exportGetActivityHistoryTesting(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetNoteCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Gets the number of notes BY PSAActivityID")
    public Page<GetNoteCountResponse> executeGetNoteCount(@RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetNoteCount");
        Page<GetNoteCountResponse> _result = queryService.executeGetNoteCount(psaactivityId, pageable);
        LOGGER.debug("got the result for named query: GetNoteCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetNoteCount")
    @RequestMapping(value = "/queries/GetNoteCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetNoteCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "PSAActivityID", required = false) Integer psaactivityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetNoteCount");

        return queryService.exportGetNoteCount(exportType, psaactivityId, pageable);
    }

    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackage", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GetBidActivityMatchesByTestPackageResponse> executeGetBidActivityMatchesByTestPackage(@RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Executing named query: GetBidActivityMatchesByTestPackage");
        Page<GetBidActivityMatchesByTestPackageResponse> _result = queryService.executeGetBidActivityMatchesByTestPackage(testPackage, pageable);
        LOGGER.debug("got the result for named query: GetBidActivityMatchesByTestPackage, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetBidActivityMatchesByTestPackage")
    @RequestMapping(value = "/queries/GetBidActivityMatchesByTestPackage/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetBidActivityMatchesByTestPackage(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "TestPackage", required = false) String testPackage, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetBidActivityMatchesByTestPackage");

        return queryService.exportGetBidActivityMatchesByTestPackage(exportType, testPackage, pageable);
    }

    @RequestMapping(value = "/queries/GetReportDPRByDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the Daily Progress Report of given date range By Foreman")
    public Page<GetReportDprbyDateResponse> executeGetReportDPRByDate(@RequestParam(value = "ForemanID", required = false) String foremanId, @RequestParam(value = "SuperID", required = false) String superId, @RequestParam(value = "ManagerID", required = false) String managerId, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: GetReportDPRByDate");
        Page<GetReportDprbyDateResponse> _result = queryService.executeGetReportDPRByDate(foremanId, superId, managerId, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: GetReportDPRByDate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetReportDPRByDate")
    @RequestMapping(value = "/queries/GetReportDPRByDate/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetReportDPRByDate(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ForemanID", required = false) String foremanId, @RequestParam(value = "SuperID", required = false) String superId, @RequestParam(value = "ManagerID", required = false) String managerId, @RequestParam(value = "StartDate", required = false) Date startDate, @RequestParam(value = "EndDate", required = false) Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetReportDPRByDate");

        return queryService.exportGetReportDPRByDate(exportType, foremanId, superId, managerId, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistorySteelMisc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistorySteelMiscResponse> executeGetActivityHistorySteelMisc(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistorySteelMisc");
        Page<GetActivityHistorySteelMiscResponse> _result = queryService.executeGetActivityHistorySteelMisc(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistorySteelMisc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistorySteelMisc")
    @RequestMapping(value = "/queries/GetActivityHistorySteelMisc/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistorySteelMisc(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistorySteelMisc");

        return queryService.exportGetActivityHistorySteelMisc(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/GetActivityHistoryCivilFA", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "name")
    public Page<GetActivityHistoryCivilFaResponse> executeGetActivityHistoryCivilFA(@RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetActivityHistoryCivilFA");
        Page<GetActivityHistoryCivilFaResponse> _result = queryService.executeGetActivityHistoryCivilFA(rowId, pageable);
        LOGGER.debug("got the result for named query: GetActivityHistoryCivilFA, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetActivityHistoryCivilFA")
    @RequestMapping(value = "/queries/GetActivityHistoryCivilFA/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetActivityHistoryCivilFA(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RowID", required = false) Integer rowId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetActivityHistoryCivilFA");

        return queryService.exportGetActivityHistoryCivilFA(exportType, rowId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateErection", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates Job####.SubsErection table with data inputs")
    public Integer executeUpdateErection(@Valid @RequestBody UpdateErectionRequest updateErectionRequest) {
        LOGGER.debug("Executing named query: UpdateErection");
        Integer _result = queryService.executeUpdateErection(updateErectionRequest);
        LOGGER.debug("got the result for named query: UpdateErection, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetQuantityTrimInstalled", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the sum of all Trim activities installed BY Bid ID")
    public Page<GetQuantityTrimInstalledResponse> executeGetQuantityTrimInstalled(@RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetQuantityTrimInstalled");
        Page<GetQuantityTrimInstalledResponse> _result = queryService.executeGetQuantityTrimInstalled(bidId, pageable);
        LOGGER.debug("got the result for named query: GetQuantityTrimInstalled, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetQuantityTrimInstalled")
    @RequestMapping(value = "/queries/GetQuantityTrimInstalled/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetQuantityTrimInstalled(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "BidID", required = false) Integer bidId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetQuantityTrimInstalled");

        return queryService.exportGetQuantityTrimInstalled(exportType, bidId, pageable);
    }

}


