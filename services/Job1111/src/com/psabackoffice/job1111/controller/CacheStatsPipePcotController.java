/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheStatsPipePcot;
import com.psabackoffice.job1111.service.CacheStatsPipePcotService;


/**
 * Controller object for domain model class CacheStatsPipePcot.
 * @see CacheStatsPipePcot
 */
@RestController("Job1111.CacheStatsPipePcotController")
@Api(value = "CacheStatsPipePcotController", description = "Exposes APIs to work with CacheStatsPipePcot resource.")
@RequestMapping("/Job1111/CacheStatsPipePcot")
public class CacheStatsPipePcotController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheStatsPipePcotController.class);

    @Autowired
	@Qualifier("Job1111.CacheStatsPipePcotService")
	private CacheStatsPipePcotService cacheStatsPipePcotService;

	@ApiOperation(value = "Creates a new CacheStatsPipePcot instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipePcot createCacheStatsPipePcot(@RequestBody CacheStatsPipePcot cacheStatsPipePcot) {
		LOGGER.debug("Create CacheStatsPipePcot with information: {}" , cacheStatsPipePcot);

		cacheStatsPipePcot = cacheStatsPipePcotService.create(cacheStatsPipePcot);
		LOGGER.debug("Created CacheStatsPipePcot with information: {}" , cacheStatsPipePcot);

	    return cacheStatsPipePcot;
	}

    @ApiOperation(value = "Returns the CacheStatsPipePcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipePcot getCacheStatsPipePcot(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheStatsPipePcot with id: {}" , id);

        CacheStatsPipePcot foundCacheStatsPipePcot = cacheStatsPipePcotService.getById(id);
        LOGGER.debug("CacheStatsPipePcot details with id: {}" , foundCacheStatsPipePcot);

        return foundCacheStatsPipePcot;
    }

    @ApiOperation(value = "Updates the CacheStatsPipePcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheStatsPipePcot editCacheStatsPipePcot(@PathVariable("id") Integer id, @RequestBody CacheStatsPipePcot cacheStatsPipePcot) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheStatsPipePcot with id: {}" , cacheStatsPipePcot.getId());

        cacheStatsPipePcot.setId(id);
        cacheStatsPipePcot = cacheStatsPipePcotService.update(cacheStatsPipePcot);
        LOGGER.debug("CacheStatsPipePcot details with id: {}" , cacheStatsPipePcot);

        return cacheStatsPipePcot;
    }

    @ApiOperation(value = "Deletes the CacheStatsPipePcot instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheStatsPipePcot(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheStatsPipePcot with id: {}" , id);

        CacheStatsPipePcot deletedCacheStatsPipePcot = cacheStatsPipePcotService.delete(id);

        return deletedCacheStatsPipePcot != null;
    }

    /**
     * @deprecated Use {@link #findCacheStatsPipePcots(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheStatsPipePcot instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipePcot> searchCacheStatsPipePcotsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheStatsPipePcots list");
        return cacheStatsPipePcotService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsPipePcot instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipePcot> findCacheStatsPipePcots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsPipePcots list");
        return cacheStatsPipePcotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheStatsPipePcot instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheStatsPipePcot> filterCacheStatsPipePcots(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheStatsPipePcots list");
        return cacheStatsPipePcotService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheStatsPipePcots(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheStatsPipePcotService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheStatsPipePcot instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheStatsPipePcots( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheStatsPipePcots");
		return cacheStatsPipePcotService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheStatsPipePcotAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheStatsPipePcotService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheStatsPipePcotService instance
	 */
	protected void setCacheStatsPipePcotService(CacheStatsPipePcotService service) {
		this.cacheStatsPipePcotService = service;
	}

}

