/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilTrackerClassic;
import com.psabackoffice.job1111.service.CivilTrackerClassicService;


/**
 * Controller object for domain model class CivilTrackerClassic.
 * @see CivilTrackerClassic
 */
@RestController("Job1111.CivilTrackerClassicController")
@Api(value = "CivilTrackerClassicController", description = "Exposes APIs to work with CivilTrackerClassic resource.")
@RequestMapping("/Job1111/CivilTrackerClassic")
public class CivilTrackerClassicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilTrackerClassicController.class);

    @Autowired
	@Qualifier("Job1111.CivilTrackerClassicService")
	private CivilTrackerClassicService civilTrackerClassicService;

	@ApiOperation(value = "Creates a new CivilTrackerClassic instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilTrackerClassic createCivilTrackerClassic(@RequestBody CivilTrackerClassic civilTrackerClassic) {
		LOGGER.debug("Create CivilTrackerClassic with information: {}" , civilTrackerClassic);

		civilTrackerClassic = civilTrackerClassicService.create(civilTrackerClassic);
		LOGGER.debug("Created CivilTrackerClassic with information: {}" , civilTrackerClassic);

	    return civilTrackerClassic;
	}

    @ApiOperation(value = "Returns the CivilTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public CivilTrackerClassic getCivilTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CivilTrackerClassic with id: {}" , id);

        CivilTrackerClassic foundCivilTrackerClassic = civilTrackerClassicService.getById(id);
        LOGGER.debug("CivilTrackerClassic details with id: {}" , foundCivilTrackerClassic);

        return foundCivilTrackerClassic;
    }

    @ApiOperation(value = "Updates the CivilTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilTrackerClassic editCivilTrackerClassic(@PathVariable("id") Integer id, @RequestBody CivilTrackerClassic civilTrackerClassic) {
        LOGGER.debug("Editing CivilTrackerClassic with id: {}" , civilTrackerClassic.getUid());

        civilTrackerClassic.setUid(id);
        civilTrackerClassic = civilTrackerClassicService.update(civilTrackerClassic);
        LOGGER.debug("CivilTrackerClassic details with id: {}" , civilTrackerClassic);

        return civilTrackerClassic;
    }

    @ApiOperation(value = "Deletes the CivilTrackerClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteCivilTrackerClassic(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CivilTrackerClassic with id: {}" , id);

        CivilTrackerClassic deletedCivilTrackerClassic = civilTrackerClassicService.delete(id);

        return deletedCivilTrackerClassic != null;
    }

    /**
     * @deprecated Use {@link #findCivilTrackerClassics(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CivilTrackerClassic instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerClassic> searchCivilTrackerClassicsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CivilTrackerClassics list by query filter:{}", (Object) queryFilters);
        return civilTrackerClassicService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilTrackerClassic instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerClassic> findCivilTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilTrackerClassics list by filter:", query);
        return civilTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilTrackerClassic instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilTrackerClassic> filterCivilTrackerClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilTrackerClassics list by filter", query);
        return civilTrackerClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCivilTrackerClassics(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return civilTrackerClassicService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CivilTrackerClassic instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCivilTrackerClassics( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CivilTrackerClassics");
		return civilTrackerClassicService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCivilTrackerClassicAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return civilTrackerClassicService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilTrackerClassicService instance
	 */
	protected void setCivilTrackerClassicService(CivilTrackerClassicService service) {
		this.civilTrackerClassicService = service;
	}

}

