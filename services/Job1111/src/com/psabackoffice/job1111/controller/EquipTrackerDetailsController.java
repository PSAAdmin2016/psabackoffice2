/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.EquipTrackerDetails;
import com.psabackoffice.job1111.service.EquipTrackerDetailsService;


/**
 * Controller object for domain model class EquipTrackerDetails.
 * @see EquipTrackerDetails
 */
@RestController("Job1111.EquipTrackerDetailsController")
@Api(value = "EquipTrackerDetailsController", description = "Exposes APIs to work with EquipTrackerDetails resource.")
@RequestMapping("/Job1111/EquipTrackerDetails")
public class EquipTrackerDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EquipTrackerDetailsController.class);

    @Autowired
	@Qualifier("Job1111.EquipTrackerDetailsService")
	private EquipTrackerDetailsService equipTrackerDetailsService;

	@ApiOperation(value = "Creates a new EquipTrackerDetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EquipTrackerDetails createEquipTrackerDetails(@RequestBody EquipTrackerDetails equipTrackerDetails) {
		LOGGER.debug("Create EquipTrackerDetails with information: {}" , equipTrackerDetails);

		equipTrackerDetails = equipTrackerDetailsService.create(equipTrackerDetails);
		LOGGER.debug("Created EquipTrackerDetails with information: {}" , equipTrackerDetails);

	    return equipTrackerDetails;
	}


    @ApiOperation(value = "Returns the EquipTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipTrackerDetails getEquipTrackerDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EquipTrackerDetails with id: {}" , id);

        EquipTrackerDetails foundEquipTrackerDetails = equipTrackerDetailsService.getById(id);
        LOGGER.debug("EquipTrackerDetails details with id: {}" , foundEquipTrackerDetails);

        return foundEquipTrackerDetails;
    }

    @ApiOperation(value = "Updates the EquipTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipTrackerDetails editEquipTrackerDetails(@PathVariable("id") Integer id, @RequestBody EquipTrackerDetails equipTrackerDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing EquipTrackerDetails with id: {}" , equipTrackerDetails.getUid());

        equipTrackerDetails.setUid(id);
        equipTrackerDetails = equipTrackerDetailsService.update(equipTrackerDetails);
        LOGGER.debug("EquipTrackerDetails details with id: {}" , equipTrackerDetails);

        return equipTrackerDetails;
    }

    @ApiOperation(value = "Deletes the EquipTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEquipTrackerDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EquipTrackerDetails with id: {}" , id);

        EquipTrackerDetails deletedEquipTrackerDetails = equipTrackerDetailsService.delete(id);

        return deletedEquipTrackerDetails != null;
    }

    /**
     * @deprecated Use {@link #findEquipTrackerDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EquipTrackerDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerDetails> searchEquipTrackerDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EquipTrackerDetails list");
        return equipTrackerDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipTrackerDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerDetails> findEquipTrackerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipTrackerDetails list");
        return equipTrackerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipTrackerDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipTrackerDetails> filterEquipTrackerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipTrackerDetails list");
        return equipTrackerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEquipTrackerDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return equipTrackerDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EquipTrackerDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEquipTrackerDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EquipTrackerDetails");
		return equipTrackerDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEquipTrackerDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return equipTrackerDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipTrackerDetailsService instance
	 */
	protected void setEquipTrackerDetailsService(EquipTrackerDetailsService service) {
		this.equipTrackerDetailsService = service;
	}

}

