/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.PipeConnection;
import com.psabackoffice.job1111.service.PipeConnectionService;


/**
 * Controller object for domain model class PipeConnection.
 * @see PipeConnection
 */
@RestController("Job1111.PipeConnectionController")
@Api(value = "PipeConnectionController", description = "Exposes APIs to work with PipeConnection resource.")
@RequestMapping("/Job1111/PipeConnection")
public class PipeConnectionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipeConnectionController.class);

    @Autowired
	@Qualifier("Job1111.PipeConnectionService")
	private PipeConnectionService pipeConnectionService;

	@ApiOperation(value = "Creates a new PipeConnection instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeConnection createPipeConnection(@RequestBody PipeConnection pipeConnection) {
		LOGGER.debug("Create PipeConnection with information: {}" , pipeConnection);

		pipeConnection = pipeConnectionService.create(pipeConnection);
		LOGGER.debug("Created PipeConnection with information: {}" , pipeConnection);

	    return pipeConnection;
	}

    @ApiOperation(value = "Returns the PipeConnection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PipeConnection getPipeConnection(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting PipeConnection with id: {}" , id);

        PipeConnection foundPipeConnection = pipeConnectionService.getById(id);
        LOGGER.debug("PipeConnection details with id: {}" , foundPipeConnection);

        return foundPipeConnection;
    }

    @ApiOperation(value = "Updates the PipeConnection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeConnection editPipeConnection(@PathVariable("id") Integer id, @RequestBody PipeConnection pipeConnection) {
        LOGGER.debug("Editing PipeConnection with id: {}" , pipeConnection.getActivityId());

        pipeConnection.setActivityId(id);
        pipeConnection = pipeConnectionService.update(pipeConnection);
        LOGGER.debug("PipeConnection details with id: {}" , pipeConnection);

        return pipeConnection;
    }

    @ApiOperation(value = "Deletes the PipeConnection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deletePipeConnection(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting PipeConnection with id: {}" , id);

        PipeConnection deletedPipeConnection = pipeConnectionService.delete(id);

        return deletedPipeConnection != null;
    }

    /**
     * @deprecated Use {@link #findPipeConnections(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PipeConnection instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeConnection> searchPipeConnectionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PipeConnections list by query filter:{}", (Object) queryFilters);
        return pipeConnectionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeConnection instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeConnection> findPipeConnections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeConnections list by filter:", query);
        return pipeConnectionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeConnection instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeConnection> filterPipeConnections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeConnections list by filter", query);
        return pipeConnectionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipeConnections(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipeConnectionService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PipeConnection instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipeConnections( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PipeConnections");
		return pipeConnectionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipeConnectionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipeConnectionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeConnectionService instance
	 */
	protected void setPipeConnectionService(PipeConnectionService service) {
		this.pipeConnectionService = service;
	}

}

