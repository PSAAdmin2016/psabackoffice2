/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CivilSellPackageRev;
import com.psabackoffice.job1111.service.CivilSellPackageRevService;


/**
 * Controller object for domain model class CivilSellPackageRev.
 * @see CivilSellPackageRev
 */
@RestController("Job1111.CivilSellPackageRevController")
@Api(value = "CivilSellPackageRevController", description = "Exposes APIs to work with CivilSellPackageRev resource.")
@RequestMapping("/Job1111/CivilSellPackageRev")
public class CivilSellPackageRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilSellPackageRevController.class);

    @Autowired
	@Qualifier("Job1111.CivilSellPackageRevService")
	private CivilSellPackageRevService civilSellPackageRevService;

	@ApiOperation(value = "Creates a new CivilSellPackageRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CivilSellPackageRev createCivilSellPackageRev(@RequestBody CivilSellPackageRev civilSellPackageRev) {
		LOGGER.debug("Create CivilSellPackageRev with information: {}" , civilSellPackageRev);

		civilSellPackageRev = civilSellPackageRevService.create(civilSellPackageRev);
		LOGGER.debug("Created CivilSellPackageRev with information: {}" , civilSellPackageRev);

	    return civilSellPackageRev;
	}


    @ApiOperation(value = "Returns the CivilSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilSellPackageRev getCivilSellPackageRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CivilSellPackageRev with id: {}" , id);

        CivilSellPackageRev foundCivilSellPackageRev = civilSellPackageRevService.getById(id);
        LOGGER.debug("CivilSellPackageRev details with id: {}" , foundCivilSellPackageRev);

        return foundCivilSellPackageRev;
    }

    @ApiOperation(value = "Updates the CivilSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CivilSellPackageRev editCivilSellPackageRev(@PathVariable("id") Integer id, @RequestBody CivilSellPackageRev civilSellPackageRev) throws EntityNotFoundException {
        LOGGER.debug("Editing CivilSellPackageRev with id: {}" , civilSellPackageRev.getId());

        civilSellPackageRev.setId(id);
        civilSellPackageRev = civilSellPackageRevService.update(civilSellPackageRev);
        LOGGER.debug("CivilSellPackageRev details with id: {}" , civilSellPackageRev);

        return civilSellPackageRev;
    }

    @ApiOperation(value = "Deletes the CivilSellPackageRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCivilSellPackageRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CivilSellPackageRev with id: {}" , id);

        CivilSellPackageRev deletedCivilSellPackageRev = civilSellPackageRevService.delete(id);

        return deletedCivilSellPackageRev != null;
    }

    /**
     * @deprecated Use {@link #findCivilSellPackageRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CivilSellPackageRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilSellPackageRev> searchCivilSellPackageRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CivilSellPackageRevs list");
        return civilSellPackageRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilSellPackageRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilSellPackageRev> findCivilSellPackageRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilSellPackageRevs list");
        return civilSellPackageRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CivilSellPackageRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CivilSellPackageRev> filterCivilSellPackageRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CivilSellPackageRevs list");
        return civilSellPackageRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCivilSellPackageRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return civilSellPackageRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CivilSellPackageRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCivilSellPackageRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CivilSellPackageRevs");
		return civilSellPackageRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCivilSellPackageRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return civilSellPackageRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilSellPackageRevService instance
	 */
	protected void setCivilSellPackageRevService(CivilSellPackageRevService service) {
		this.civilSellPackageRevService = service;
	}

}

