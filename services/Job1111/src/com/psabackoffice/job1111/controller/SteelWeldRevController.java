/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelWeldRev;
import com.psabackoffice.job1111.service.SteelWeldRevService;


/**
 * Controller object for domain model class SteelWeldRev.
 * @see SteelWeldRev
 */
@RestController("Job1111.SteelWeldRevController")
@Api(value = "SteelWeldRevController", description = "Exposes APIs to work with SteelWeldRev resource.")
@RequestMapping("/Job1111/SteelWeldRev")
public class SteelWeldRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelWeldRevController.class);

    @Autowired
	@Qualifier("Job1111.SteelWeldRevService")
	private SteelWeldRevService steelWeldRevService;

	@ApiOperation(value = "Creates a new SteelWeldRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelWeldRev createSteelWeldRev(@RequestBody SteelWeldRev steelWeldRev) {
		LOGGER.debug("Create SteelWeldRev with information: {}" , steelWeldRev);

		steelWeldRev = steelWeldRevService.create(steelWeldRev);
		LOGGER.debug("Created SteelWeldRev with information: {}" , steelWeldRev);

	    return steelWeldRev;
	}


    @ApiOperation(value = "Returns the SteelWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelWeldRev getSteelWeldRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelWeldRev with id: {}" , id);

        SteelWeldRev foundSteelWeldRev = steelWeldRevService.getById(id);
        LOGGER.debug("SteelWeldRev details with id: {}" , foundSteelWeldRev);

        return foundSteelWeldRev;
    }

    @ApiOperation(value = "Updates the SteelWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelWeldRev editSteelWeldRev(@PathVariable("id") Integer id, @RequestBody SteelWeldRev steelWeldRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelWeldRev with id: {}" , steelWeldRev.getId());

        steelWeldRev.setId(id);
        steelWeldRev = steelWeldRevService.update(steelWeldRev);
        LOGGER.debug("SteelWeldRev details with id: {}" , steelWeldRev);

        return steelWeldRev;
    }

    @ApiOperation(value = "Deletes the SteelWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelWeldRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelWeldRev with id: {}" , id);

        SteelWeldRev deletedSteelWeldRev = steelWeldRevService.delete(id);

        return deletedSteelWeldRev != null;
    }

    /**
     * @deprecated Use {@link #findSteelWeldRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelWeldRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelWeldRev> searchSteelWeldRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelWeldRevs list");
        return steelWeldRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelWeldRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelWeldRev> findSteelWeldRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelWeldRevs list");
        return steelWeldRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelWeldRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelWeldRev> filterSteelWeldRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelWeldRevs list");
        return steelWeldRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelWeldRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelWeldRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelWeldRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelWeldRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelWeldRevs");
		return steelWeldRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelWeldRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelWeldRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelWeldRevService instance
	 */
	protected void setSteelWeldRevService(SteelWeldRevService service) {
		this.steelWeldRevService = service;
	}

}

