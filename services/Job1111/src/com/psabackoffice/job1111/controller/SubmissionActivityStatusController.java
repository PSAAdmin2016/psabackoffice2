/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.Sasnotes;
import com.psabackoffice.job1111.SubmissionActivityStatus;
import com.psabackoffice.job1111.SubsEwo;
import com.psabackoffice.job1111.service.SubmissionActivityStatusService;


/**
 * Controller object for domain model class SubmissionActivityStatus.
 * @see SubmissionActivityStatus
 */
@RestController("Job1111.SubmissionActivityStatusController")
@Api(value = "SubmissionActivityStatusController", description = "Exposes APIs to work with SubmissionActivityStatus resource.")
@RequestMapping("/Job1111/SubmissionActivityStatus")
public class SubmissionActivityStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubmissionActivityStatusController.class);

    @Autowired
	@Qualifier("Job1111.SubmissionActivityStatusService")
	private SubmissionActivityStatusService submissionActivityStatusService;

	@ApiOperation(value = "Creates a new SubmissionActivityStatus instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubmissionActivityStatus createSubmissionActivityStatus(@RequestBody SubmissionActivityStatus submissionActivityStatus) {
		LOGGER.debug("Create SubmissionActivityStatus with information: {}" , submissionActivityStatus);

		submissionActivityStatus = submissionActivityStatusService.create(submissionActivityStatus);
		LOGGER.debug("Created SubmissionActivityStatus with information: {}" , submissionActivityStatus);

	    return submissionActivityStatus;
	}

    @ApiOperation(value = "Returns the SubmissionActivityStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubmissionActivityStatus getSubmissionActivityStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubmissionActivityStatus with id: {}" , id);

        SubmissionActivityStatus foundSubmissionActivityStatus = submissionActivityStatusService.getById(id);
        LOGGER.debug("SubmissionActivityStatus details with id: {}" , foundSubmissionActivityStatus);

        return foundSubmissionActivityStatus;
    }

    @ApiOperation(value = "Updates the SubmissionActivityStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubmissionActivityStatus editSubmissionActivityStatus(@PathVariable("id") Integer id, @RequestBody SubmissionActivityStatus submissionActivityStatus) throws EntityNotFoundException {
        LOGGER.debug("Editing SubmissionActivityStatus with id: {}" , submissionActivityStatus.getActivityId());

        submissionActivityStatus.setActivityId(id);
        submissionActivityStatus = submissionActivityStatusService.update(submissionActivityStatus);
        LOGGER.debug("SubmissionActivityStatus details with id: {}" , submissionActivityStatus);

        return submissionActivityStatus;
    }

    @ApiOperation(value = "Deletes the SubmissionActivityStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubmissionActivityStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubmissionActivityStatus with id: {}" , id);

        SubmissionActivityStatus deletedSubmissionActivityStatus = submissionActivityStatusService.delete(id);

        return deletedSubmissionActivityStatus != null;
    }

    /**
     * @deprecated Use {@link #findSubmissionActivityStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubmissionActivityStatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionActivityStatus> searchSubmissionActivityStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubmissionActivityStatuses list");
        return submissionActivityStatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubmissionActivityStatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionActivityStatus> findSubmissionActivityStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubmissionActivityStatuses list");
        return submissionActivityStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubmissionActivityStatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionActivityStatus> filterSubmissionActivityStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubmissionActivityStatuses list");
        return submissionActivityStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubmissionActivityStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return submissionActivityStatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubmissionActivityStatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubmissionActivityStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubmissionActivityStatuses");
		return submissionActivityStatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubmissionActivityStatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return submissionActivityStatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/sasnoteses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the sasnoteses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sasnotes> findAssociatedSasnoteses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated sasnoteses");
        return submissionActivityStatusService.findAssociatedSasnoteses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsEwos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsEwos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsEwo> findAssociatedSubsEwos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsEwos");
        return submissionActivityStatusService.findAssociatedSubsEwos(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubmissionActivityStatusService instance
	 */
	protected void setSubmissionActivityStatusService(SubmissionActivityStatusService service) {
		this.submissionActivityStatusService = service;
	}

}

