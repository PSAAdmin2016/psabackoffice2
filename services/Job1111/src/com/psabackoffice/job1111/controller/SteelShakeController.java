/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.service.SteelShakeService;


/**
 * Controller object for domain model class SteelShake.
 * @see SteelShake
 */
@RestController("Job1111.SteelShakeController")
@Api(value = "SteelShakeController", description = "Exposes APIs to work with SteelShake resource.")
@RequestMapping("/Job1111/SteelShake")
public class SteelShakeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelShakeController.class);

    @Autowired
	@Qualifier("Job1111.SteelShakeService")
	private SteelShakeService steelShakeService;

	@ApiOperation(value = "Creates a new SteelShake instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelShake createSteelShake(@RequestBody SteelShake steelShake) {
		LOGGER.debug("Create SteelShake with information: {}" , steelShake);

		steelShake = steelShakeService.create(steelShake);
		LOGGER.debug("Created SteelShake with information: {}" , steelShake);

	    return steelShake;
	}


    @ApiOperation(value = "Returns the SteelShake instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelShake getSteelShake(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelShake with id: {}" , id);

        SteelShake foundSteelShake = steelShakeService.getById(id);
        LOGGER.debug("SteelShake details with id: {}" , foundSteelShake);

        return foundSteelShake;
    }

    @ApiOperation(value = "Updates the SteelShake instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelShake editSteelShake(@PathVariable("id") Integer id, @RequestBody SteelShake steelShake) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelShake with id: {}" , steelShake.getId());

        steelShake.setId(id);
        steelShake = steelShakeService.update(steelShake);
        LOGGER.debug("SteelShake details with id: {}" , steelShake);

        return steelShake;
    }

    @ApiOperation(value = "Deletes the SteelShake instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelShake(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelShake with id: {}" , id);

        SteelShake deletedSteelShake = steelShakeService.delete(id);

        return deletedSteelShake != null;
    }

    /**
     * @deprecated Use {@link #findSteelShakes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelShake instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShake> searchSteelShakesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelShakes list");
        return steelShakeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelShake instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShake> findSteelShakes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelShakes list");
        return steelShakeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelShake instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShake> filterSteelShakes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelShakes list");
        return steelShakeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelShakes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelShakeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelShake instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelShakes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelShakes");
		return steelShakeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelShakeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelShakeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelShakeService instance
	 */
	protected void setSteelShakeService(SteelShakeService service) {
		this.steelShakeService = service;
	}

}

