/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsWeldRev;
import com.psabackoffice.job1111.service.SubsWeldRevService;


/**
 * Controller object for domain model class SubsWeldRev.
 * @see SubsWeldRev
 */
@RestController("Job1111.SubsWeldRevController")
@Api(value = "SubsWeldRevController", description = "Exposes APIs to work with SubsWeldRev resource.")
@RequestMapping("/Job1111/SubsWeldRev")
public class SubsWeldRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsWeldRevController.class);

    @Autowired
	@Qualifier("Job1111.SubsWeldRevService")
	private SubsWeldRevService subsWeldRevService;

	@ApiOperation(value = "Creates a new SubsWeldRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsWeldRev createSubsWeldRev(@RequestBody SubsWeldRev subsWeldRev) {
		LOGGER.debug("Create SubsWeldRev with information: {}" , subsWeldRev);

		subsWeldRev = subsWeldRevService.create(subsWeldRev);
		LOGGER.debug("Created SubsWeldRev with information: {}" , subsWeldRev);

	    return subsWeldRev;
	}


    @ApiOperation(value = "Returns the SubsWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeldRev getSubsWeldRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsWeldRev with id: {}" , id);

        SubsWeldRev foundSubsWeldRev = subsWeldRevService.getById(id);
        LOGGER.debug("SubsWeldRev details with id: {}" , foundSubsWeldRev);

        return foundSubsWeldRev;
    }

    @ApiOperation(value = "Updates the SubsWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsWeldRev editSubsWeldRev(@PathVariable("id") Integer id, @RequestBody SubsWeldRev subsWeldRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsWeldRev with id: {}" , subsWeldRev.getId());

        subsWeldRev.setId(id);
        subsWeldRev = subsWeldRevService.update(subsWeldRev);
        LOGGER.debug("SubsWeldRev details with id: {}" , subsWeldRev);

        return subsWeldRev;
    }

    @ApiOperation(value = "Deletes the SubsWeldRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsWeldRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsWeldRev with id: {}" , id);

        SubsWeldRev deletedSubsWeldRev = subsWeldRevService.delete(id);

        return deletedSubsWeldRev != null;
    }

    /**
     * @deprecated Use {@link #findSubsWeldRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsWeldRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeldRev> searchSubsWeldRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsWeldRevs list");
        return subsWeldRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeldRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeldRev> findSubsWeldRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWeldRevs list");
        return subsWeldRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsWeldRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsWeldRev> filterSubsWeldRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsWeldRevs list");
        return subsWeldRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsWeldRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsWeldRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsWeldRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsWeldRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsWeldRevs");
		return subsWeldRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsWeldRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsWeldRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsWeldRevService instance
	 */
	protected void setSubsWeldRevService(SubsWeldRevService service) {
		this.subsWeldRevService = service;
	}

}

