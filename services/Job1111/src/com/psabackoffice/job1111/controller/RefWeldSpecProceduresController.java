/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.RefWeldSpecProcedures;
import com.psabackoffice.job1111.service.RefWeldSpecProceduresService;


/**
 * Controller object for domain model class RefWeldSpecProcedures.
 * @see RefWeldSpecProcedures
 */
@RestController("Job1111.RefWeldSpecProceduresController")
@Api(value = "RefWeldSpecProceduresController", description = "Exposes APIs to work with RefWeldSpecProcedures resource.")
@RequestMapping("/Job1111/RefWeldSpecProcedures")
public class RefWeldSpecProceduresController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RefWeldSpecProceduresController.class);

    @Autowired
	@Qualifier("Job1111.RefWeldSpecProceduresService")
	private RefWeldSpecProceduresService refWeldSpecProceduresService;

	@ApiOperation(value = "Creates a new RefWeldSpecProcedures instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public RefWeldSpecProcedures createRefWeldSpecProcedures(@RequestBody RefWeldSpecProcedures refWeldSpecProcedures) {
		LOGGER.debug("Create RefWeldSpecProcedures with information: {}" , refWeldSpecProcedures);

		refWeldSpecProcedures = refWeldSpecProceduresService.create(refWeldSpecProcedures);
		LOGGER.debug("Created RefWeldSpecProcedures with information: {}" , refWeldSpecProcedures);

	    return refWeldSpecProcedures;
	}


    @ApiOperation(value = "Returns the RefWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefWeldSpecProcedures getRefWeldSpecProcedures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RefWeldSpecProcedures with id: {}" , id);

        RefWeldSpecProcedures foundRefWeldSpecProcedures = refWeldSpecProceduresService.getById(id);
        LOGGER.debug("RefWeldSpecProcedures details with id: {}" , foundRefWeldSpecProcedures);

        return foundRefWeldSpecProcedures;
    }

    @ApiOperation(value = "Updates the RefWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RefWeldSpecProcedures editRefWeldSpecProcedures(@PathVariable("id") Integer id, @RequestBody RefWeldSpecProcedures refWeldSpecProcedures) throws EntityNotFoundException {
        LOGGER.debug("Editing RefWeldSpecProcedures with id: {}" , refWeldSpecProcedures.getId());

        refWeldSpecProcedures.setId(id);
        refWeldSpecProcedures = refWeldSpecProceduresService.update(refWeldSpecProcedures);
        LOGGER.debug("RefWeldSpecProcedures details with id: {}" , refWeldSpecProcedures);

        return refWeldSpecProcedures;
    }

    @ApiOperation(value = "Deletes the RefWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRefWeldSpecProcedures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RefWeldSpecProcedures with id: {}" , id);

        RefWeldSpecProcedures deletedRefWeldSpecProcedures = refWeldSpecProceduresService.delete(id);

        return deletedRefWeldSpecProcedures != null;
    }

    /**
     * @deprecated Use {@link #findRefWeldSpecProcedures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RefWeldSpecProcedures instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldSpecProcedures> searchRefWeldSpecProceduresByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RefWeldSpecProcedures list");
        return refWeldSpecProceduresService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefWeldSpecProcedures instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldSpecProcedures> findRefWeldSpecProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefWeldSpecProcedures list");
        return refWeldSpecProceduresService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RefWeldSpecProcedures instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RefWeldSpecProcedures> filterRefWeldSpecProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RefWeldSpecProcedures list");
        return refWeldSpecProceduresService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRefWeldSpecProcedures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return refWeldSpecProceduresService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RefWeldSpecProcedures instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRefWeldSpecProcedures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RefWeldSpecProcedures");
		return refWeldSpecProceduresService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRefWeldSpecProceduresAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return refWeldSpecProceduresService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RefWeldSpecProceduresService instance
	 */
	protected void setRefWeldSpecProceduresService(RefWeldSpecProceduresService service) {
		this.refWeldSpecProceduresService = service;
	}

}

