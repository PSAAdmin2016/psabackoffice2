/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.LandingWeldSpecProcedures;
import com.psabackoffice.job1111.service.LandingWeldSpecProceduresService;


/**
 * Controller object for domain model class LandingWeldSpecProcedures.
 * @see LandingWeldSpecProcedures
 */
@RestController("Job1111.LandingWeldSpecProceduresController")
@Api(value = "LandingWeldSpecProceduresController", description = "Exposes APIs to work with LandingWeldSpecProcedures resource.")
@RequestMapping("/Job1111/LandingWeldSpecProcedures")
public class LandingWeldSpecProceduresController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LandingWeldSpecProceduresController.class);

    @Autowired
	@Qualifier("Job1111.LandingWeldSpecProceduresService")
	private LandingWeldSpecProceduresService landingWeldSpecProceduresService;

	@ApiOperation(value = "Creates a new LandingWeldSpecProcedures instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LandingWeldSpecProcedures createLandingWeldSpecProcedures(@RequestBody LandingWeldSpecProcedures landingWeldSpecProcedures) {
		LOGGER.debug("Create LandingWeldSpecProcedures with information: {}" , landingWeldSpecProcedures);

		landingWeldSpecProcedures = landingWeldSpecProceduresService.create(landingWeldSpecProcedures);
		LOGGER.debug("Created LandingWeldSpecProcedures with information: {}" , landingWeldSpecProcedures);

	    return landingWeldSpecProcedures;
	}


    @ApiOperation(value = "Returns the LandingWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingWeldSpecProcedures getLandingWeldSpecProcedures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LandingWeldSpecProcedures with id: {}" , id);

        LandingWeldSpecProcedures foundLandingWeldSpecProcedures = landingWeldSpecProceduresService.getById(id);
        LOGGER.debug("LandingWeldSpecProcedures details with id: {}" , foundLandingWeldSpecProcedures);

        return foundLandingWeldSpecProcedures;
    }

    @ApiOperation(value = "Updates the LandingWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingWeldSpecProcedures editLandingWeldSpecProcedures(@PathVariable("id") Integer id, @RequestBody LandingWeldSpecProcedures landingWeldSpecProcedures) throws EntityNotFoundException {
        LOGGER.debug("Editing LandingWeldSpecProcedures with id: {}" , landingWeldSpecProcedures.getId());

        landingWeldSpecProcedures.setId(id);
        landingWeldSpecProcedures = landingWeldSpecProceduresService.update(landingWeldSpecProcedures);
        LOGGER.debug("LandingWeldSpecProcedures details with id: {}" , landingWeldSpecProcedures);

        return landingWeldSpecProcedures;
    }

    @ApiOperation(value = "Deletes the LandingWeldSpecProcedures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLandingWeldSpecProcedures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LandingWeldSpecProcedures with id: {}" , id);

        LandingWeldSpecProcedures deletedLandingWeldSpecProcedures = landingWeldSpecProceduresService.delete(id);

        return deletedLandingWeldSpecProcedures != null;
    }

    /**
     * @deprecated Use {@link #findLandingWeldSpecProcedures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LandingWeldSpecProcedures instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingWeldSpecProcedures> searchLandingWeldSpecProceduresByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LandingWeldSpecProcedures list");
        return landingWeldSpecProceduresService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingWeldSpecProcedures instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingWeldSpecProcedures> findLandingWeldSpecProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingWeldSpecProcedures list");
        return landingWeldSpecProceduresService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingWeldSpecProcedures instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingWeldSpecProcedures> filterLandingWeldSpecProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingWeldSpecProcedures list");
        return landingWeldSpecProceduresService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLandingWeldSpecProcedures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return landingWeldSpecProceduresService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LandingWeldSpecProcedures instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLandingWeldSpecProcedures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LandingWeldSpecProcedures");
		return landingWeldSpecProceduresService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLandingWeldSpecProceduresAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return landingWeldSpecProceduresService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LandingWeldSpecProceduresService instance
	 */
	protected void setLandingWeldSpecProceduresService(LandingWeldSpecProceduresService service) {
		this.landingWeldSpecProceduresService = service;
	}

}

