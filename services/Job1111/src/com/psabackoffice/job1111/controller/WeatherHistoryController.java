/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.WeatherHistory;
import com.psabackoffice.job1111.service.WeatherHistoryService;


/**
 * Controller object for domain model class WeatherHistory.
 * @see WeatherHistory
 */
@RestController("Job1111.WeatherHistoryController")
@Api(value = "WeatherHistoryController", description = "Exposes APIs to work with WeatherHistory resource.")
@RequestMapping("/Job1111/WeatherHistory")
public class WeatherHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WeatherHistoryController.class);

    @Autowired
	@Qualifier("Job1111.WeatherHistoryService")
	private WeatherHistoryService weatherHistoryService;

	@ApiOperation(value = "Creates a new WeatherHistory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherHistory createWeatherHistory(@RequestBody WeatherHistory weatherHistory) {
		LOGGER.debug("Create WeatherHistory with information: {}" , weatherHistory);

		weatherHistory = weatherHistoryService.create(weatherHistory);
		LOGGER.debug("Created WeatherHistory with information: {}" , weatherHistory);

	    return weatherHistory;
	}

    @ApiOperation(value = "Returns the WeatherHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherHistory getWeatherHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting WeatherHistory with id: {}" , id);

        WeatherHistory foundWeatherHistory = weatherHistoryService.getById(id);
        LOGGER.debug("WeatherHistory details with id: {}" , foundWeatherHistory);

        return foundWeatherHistory;
    }

    @ApiOperation(value = "Updates the WeatherHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherHistory editWeatherHistory(@PathVariable("id") Integer id, @RequestBody WeatherHistory weatherHistory) throws EntityNotFoundException {
        LOGGER.debug("Editing WeatherHistory with id: {}" , weatherHistory.getId());

        weatherHistory.setId(id);
        weatherHistory = weatherHistoryService.update(weatherHistory);
        LOGGER.debug("WeatherHistory details with id: {}" , weatherHistory);

        return weatherHistory;
    }

    @ApiOperation(value = "Deletes the WeatherHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWeatherHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting WeatherHistory with id: {}" , id);

        WeatherHistory deletedWeatherHistory = weatherHistoryService.delete(id);

        return deletedWeatherHistory != null;
    }

    /**
     * @deprecated Use {@link #findWeatherHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of WeatherHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherHistory> searchWeatherHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering WeatherHistories list");
        return weatherHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherHistory> findWeatherHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherHistories list");
        return weatherHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherHistory> filterWeatherHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherHistories list");
        return weatherHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWeatherHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return weatherHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of WeatherHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWeatherHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WeatherHistories");
		return weatherHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWeatherHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return weatherHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WeatherHistoryService instance
	 */
	protected void setWeatherHistoryService(WeatherHistoryService service) {
		this.weatherHistoryService = service;
	}

}

