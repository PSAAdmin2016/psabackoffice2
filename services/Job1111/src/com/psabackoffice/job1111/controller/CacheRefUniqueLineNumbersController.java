/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheRefUniqueLineNumbers;
import com.psabackoffice.job1111.service.CacheRefUniqueLineNumbersService;


/**
 * Controller object for domain model class CacheRefUniqueLineNumbers.
 * @see CacheRefUniqueLineNumbers
 */
@RestController("Job1111.CacheRefUniqueLineNumbersController")
@Api(value = "CacheRefUniqueLineNumbersController", description = "Exposes APIs to work with CacheRefUniqueLineNumbers resource.")
@RequestMapping("/Job1111/CacheRefUniqueLineNumbers")
public class CacheRefUniqueLineNumbersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheRefUniqueLineNumbersController.class);

    @Autowired
	@Qualifier("Job1111.CacheRefUniqueLineNumbersService")
	private CacheRefUniqueLineNumbersService cacheRefUniqueLineNumbersService;

	@ApiOperation(value = "Creates a new CacheRefUniqueLineNumbers instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CacheRefUniqueLineNumbers createCacheRefUniqueLineNumbers(@RequestBody CacheRefUniqueLineNumbers cacheRefUniqueLineNumbers) {
		LOGGER.debug("Create CacheRefUniqueLineNumbers with information: {}" , cacheRefUniqueLineNumbers);

		cacheRefUniqueLineNumbers = cacheRefUniqueLineNumbersService.create(cacheRefUniqueLineNumbers);
		LOGGER.debug("Created CacheRefUniqueLineNumbers with information: {}" , cacheRefUniqueLineNumbers);

	    return cacheRefUniqueLineNumbers;
	}


    @ApiOperation(value = "Returns the CacheRefUniqueLineNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefUniqueLineNumbers getCacheRefUniqueLineNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheRefUniqueLineNumbers with id: {}" , id);

        CacheRefUniqueLineNumbers foundCacheRefUniqueLineNumbers = cacheRefUniqueLineNumbersService.getById(id);
        LOGGER.debug("CacheRefUniqueLineNumbers details with id: {}" , foundCacheRefUniqueLineNumbers);

        return foundCacheRefUniqueLineNumbers;
    }

    @ApiOperation(value = "Updates the CacheRefUniqueLineNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefUniqueLineNumbers editCacheRefUniqueLineNumbers(@PathVariable("id") Integer id, @RequestBody CacheRefUniqueLineNumbers cacheRefUniqueLineNumbers) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheRefUniqueLineNumbers with id: {}" , cacheRefUniqueLineNumbers.getId());

        cacheRefUniqueLineNumbers.setId(id);
        cacheRefUniqueLineNumbers = cacheRefUniqueLineNumbersService.update(cacheRefUniqueLineNumbers);
        LOGGER.debug("CacheRefUniqueLineNumbers details with id: {}" , cacheRefUniqueLineNumbers);

        return cacheRefUniqueLineNumbers;
    }

    @ApiOperation(value = "Deletes the CacheRefUniqueLineNumbers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheRefUniqueLineNumbers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheRefUniqueLineNumbers with id: {}" , id);

        CacheRefUniqueLineNumbers deletedCacheRefUniqueLineNumbers = cacheRefUniqueLineNumbersService.delete(id);

        return deletedCacheRefUniqueLineNumbers != null;
    }

    /**
     * @deprecated Use {@link #findCacheRefUniqueLineNumbers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheRefUniqueLineNumbers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueLineNumbers> searchCacheRefUniqueLineNumbersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheRefUniqueLineNumbers list");
        return cacheRefUniqueLineNumbersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefUniqueLineNumbers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueLineNumbers> findCacheRefUniqueLineNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefUniqueLineNumbers list");
        return cacheRefUniqueLineNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefUniqueLineNumbers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefUniqueLineNumbers> filterCacheRefUniqueLineNumbers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefUniqueLineNumbers list");
        return cacheRefUniqueLineNumbersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheRefUniqueLineNumbers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheRefUniqueLineNumbersService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheRefUniqueLineNumbers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheRefUniqueLineNumbers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheRefUniqueLineNumbers");
		return cacheRefUniqueLineNumbersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheRefUniqueLineNumbersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheRefUniqueLineNumbersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheRefUniqueLineNumbersService instance
	 */
	protected void setCacheRefUniqueLineNumbersService(CacheRefUniqueLineNumbersService service) {
		this.cacheRefUniqueLineNumbersService = service;
	}

}

