/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsDetails;
import com.psabackoffice.job1111.SubsSignatures;
import com.psabackoffice.job1111.service.SubsSignaturesService;


/**
 * Controller object for domain model class SubsSignatures.
 * @see SubsSignatures
 */
@RestController("Job1111.SubsSignaturesController")
@Api(value = "SubsSignaturesController", description = "Exposes APIs to work with SubsSignatures resource.")
@RequestMapping("/Job1111/SubsSignatures")
public class SubsSignaturesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsSignaturesController.class);

    @Autowired
	@Qualifier("Job1111.SubsSignaturesService")
	private SubsSignaturesService subsSignaturesService;

	@ApiOperation(value = "Creates a new SubsSignatures instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsSignatures createSubsSignatures(@RequestBody SubsSignatures subsSignatures) {
		LOGGER.debug("Create SubsSignatures with information: {}" , subsSignatures);

		subsSignatures = subsSignaturesService.create(subsSignatures);
		LOGGER.debug("Created SubsSignatures with information: {}" , subsSignatures);

	    return subsSignatures;
	}


    @ApiOperation(value = "Returns the SubsSignatures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsSignatures getSubsSignatures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsSignatures with id: {}" , id);

        SubsSignatures foundSubsSignatures = subsSignaturesService.getById(id);
        LOGGER.debug("SubsSignatures details with id: {}" , foundSubsSignatures);

        return foundSubsSignatures;
    }

    @ApiOperation(value = "Updates the SubsSignatures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsSignatures editSubsSignatures(@PathVariable("id") Integer id, @RequestBody SubsSignatures subsSignatures) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsSignatures with id: {}" , subsSignatures.getId());

        subsSignatures.setId(id);
        subsSignatures = subsSignaturesService.update(subsSignatures);
        LOGGER.debug("SubsSignatures details with id: {}" , subsSignatures);

        return subsSignatures;
    }

    @ApiOperation(value = "Deletes the SubsSignatures instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsSignatures(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsSignatures with id: {}" , id);

        SubsSignatures deletedSubsSignatures = subsSignaturesService.delete(id);

        return deletedSubsSignatures != null;
    }

    /**
     * @deprecated Use {@link #findSubsSignatures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsSignatures instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSignatures> searchSubsSignaturesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsSignatures list");
        return subsSignaturesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsSignatures instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSignatures> findSubsSignatures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsSignatures list");
        return subsSignaturesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsSignatures instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsSignatures> filterSubsSignatures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsSignatures list");
        return subsSignaturesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsSignatures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsSignaturesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsSignatures instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsSignatures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsSignatures");
		return subsSignaturesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsSignaturesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsSignaturesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/subsDetailses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the subsDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsDetails> findAssociatedSubsDetailses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated subsDetailses");
        return subsSignaturesService.findAssociatedSubsDetailses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsSignaturesService instance
	 */
	protected void setSubsSignaturesService(SubsSignaturesService service) {
		this.subsSignaturesService = service;
	}

}

