/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.service.SteelMiscService;


/**
 * Controller object for domain model class SteelMisc.
 * @see SteelMisc
 */
@RestController("Job1111.SteelMiscController")
@Api(value = "SteelMiscController", description = "Exposes APIs to work with SteelMisc resource.")
@RequestMapping("/Job1111/SteelMisc")
public class SteelMiscController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelMiscController.class);

    @Autowired
	@Qualifier("Job1111.SteelMiscService")
	private SteelMiscService steelMiscService;

	@ApiOperation(value = "Creates a new SteelMisc instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelMisc createSteelMisc(@RequestBody SteelMisc steelMisc) {
		LOGGER.debug("Create SteelMisc with information: {}" , steelMisc);

		steelMisc = steelMiscService.create(steelMisc);
		LOGGER.debug("Created SteelMisc with information: {}" , steelMisc);

	    return steelMisc;
	}

    @ApiOperation(value = "Returns the SteelMisc instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public SteelMisc getSteelMisc(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SteelMisc with id: {}" , id);

        SteelMisc foundSteelMisc = steelMiscService.getById(id);
        LOGGER.debug("SteelMisc details with id: {}" , foundSteelMisc);

        return foundSteelMisc;
    }

    @ApiOperation(value = "Updates the SteelMisc instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelMisc editSteelMisc(@PathVariable("id") Integer id, @RequestBody SteelMisc steelMisc) {
        LOGGER.debug("Editing SteelMisc with id: {}" , steelMisc.getActivityId());

        steelMisc.setActivityId(id);
        steelMisc = steelMiscService.update(steelMisc);
        LOGGER.debug("SteelMisc details with id: {}" , steelMisc);

        return steelMisc;
    }

    @ApiOperation(value = "Deletes the SteelMisc instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteSteelMisc(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SteelMisc with id: {}" , id);

        SteelMisc deletedSteelMisc = steelMiscService.delete(id);

        return deletedSteelMisc != null;
    }

    /**
     * @deprecated Use {@link #findSteelMiscs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelMisc instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMisc> searchSteelMiscsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelMiscs list by query filter:{}", (Object) queryFilters);
        return steelMiscService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelMisc instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMisc> findSteelMiscs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelMiscs list by filter:", query);
        return steelMiscService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelMisc instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMisc> filterSteelMiscs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelMiscs list by filter", query);
        return steelMiscService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelMiscs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelMiscService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelMisc instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelMiscs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelMiscs");
		return steelMiscService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelMiscAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelMiscService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelMiscService instance
	 */
	protected void setSteelMiscService(SteelMiscService service) {
		this.steelMiscService = service;
	}

}

