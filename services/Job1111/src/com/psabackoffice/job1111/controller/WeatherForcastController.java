/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.WeatherForcast;
import com.psabackoffice.job1111.service.WeatherForcastService;


/**
 * Controller object for domain model class WeatherForcast.
 * @see WeatherForcast
 */
@RestController("Job1111.WeatherForcastController")
@Api(value = "WeatherForcastController", description = "Exposes APIs to work with WeatherForcast resource.")
@RequestMapping("/Job1111/WeatherForcast")
public class WeatherForcastController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WeatherForcastController.class);

    @Autowired
	@Qualifier("Job1111.WeatherForcastService")
	private WeatherForcastService weatherForcastService;

	@ApiOperation(value = "Creates a new WeatherForcast instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherForcast createWeatherForcast(@RequestBody WeatherForcast weatherForcast) {
		LOGGER.debug("Create WeatherForcast with information: {}" , weatherForcast);

		weatherForcast = weatherForcastService.create(weatherForcast);
		LOGGER.debug("Created WeatherForcast with information: {}" , weatherForcast);

	    return weatherForcast;
	}

    @ApiOperation(value = "Returns the WeatherForcast instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public WeatherForcast getWeatherForcast(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting WeatherForcast with id: {}" , id);

        WeatherForcast foundWeatherForcast = weatherForcastService.getById(id);
        LOGGER.debug("WeatherForcast details with id: {}" , foundWeatherForcast);

        return foundWeatherForcast;
    }

    @ApiOperation(value = "Updates the WeatherForcast instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherForcast editWeatherForcast(@PathVariable("id") Integer id, @RequestBody WeatherForcast weatherForcast) {
        LOGGER.debug("Editing WeatherForcast with id: {}" , weatherForcast.getId());

        weatherForcast.setId(id);
        weatherForcast = weatherForcastService.update(weatherForcast);
        LOGGER.debug("WeatherForcast details with id: {}" , weatherForcast);

        return weatherForcast;
    }

    @ApiOperation(value = "Deletes the WeatherForcast instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteWeatherForcast(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting WeatherForcast with id: {}" , id);

        WeatherForcast deletedWeatherForcast = weatherForcastService.delete(id);

        return deletedWeatherForcast != null;
    }

    /**
     * @deprecated Use {@link #findWeatherForcasts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of WeatherForcast instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherForcast> searchWeatherForcastsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering WeatherForcasts list by query filter:{}", (Object) queryFilters);
        return weatherForcastService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherForcast instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherForcast> findWeatherForcasts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherForcasts list by filter:", query);
        return weatherForcastService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherForcast instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherForcast> filterWeatherForcasts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherForcasts list by filter", query);
        return weatherForcastService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWeatherForcasts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return weatherForcastService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of WeatherForcast instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWeatherForcasts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WeatherForcasts");
		return weatherForcastService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWeatherForcastAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return weatherForcastService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WeatherForcastService instance
	 */
	protected void setWeatherForcastService(WeatherForcastService service) {
		this.weatherForcastService = service;
	}

}

