/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelShakeRev;
import com.psabackoffice.job1111.service.SteelShakeRevService;


/**
 * Controller object for domain model class SteelShakeRev.
 * @see SteelShakeRev
 */
@RestController("Job1111.SteelShakeRevController")
@Api(value = "SteelShakeRevController", description = "Exposes APIs to work with SteelShakeRev resource.")
@RequestMapping("/Job1111/SteelShakeRev")
public class SteelShakeRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelShakeRevController.class);

    @Autowired
	@Qualifier("Job1111.SteelShakeRevService")
	private SteelShakeRevService steelShakeRevService;

	@ApiOperation(value = "Creates a new SteelShakeRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SteelShakeRev createSteelShakeRev(@RequestBody SteelShakeRev steelShakeRev) {
		LOGGER.debug("Create SteelShakeRev with information: {}" , steelShakeRev);

		steelShakeRev = steelShakeRevService.create(steelShakeRev);
		LOGGER.debug("Created SteelShakeRev with information: {}" , steelShakeRev);

	    return steelShakeRev;
	}


    @ApiOperation(value = "Returns the SteelShakeRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelShakeRev getSteelShakeRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SteelShakeRev with id: {}" , id);

        SteelShakeRev foundSteelShakeRev = steelShakeRevService.getById(id);
        LOGGER.debug("SteelShakeRev details with id: {}" , foundSteelShakeRev);

        return foundSteelShakeRev;
    }

    @ApiOperation(value = "Updates the SteelShakeRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelShakeRev editSteelShakeRev(@PathVariable("id") Integer id, @RequestBody SteelShakeRev steelShakeRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SteelShakeRev with id: {}" , steelShakeRev.getId());

        steelShakeRev.setId(id);
        steelShakeRev = steelShakeRevService.update(steelShakeRev);
        LOGGER.debug("SteelShakeRev details with id: {}" , steelShakeRev);

        return steelShakeRev;
    }

    @ApiOperation(value = "Deletes the SteelShakeRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSteelShakeRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelShakeRev with id: {}" , id);

        SteelShakeRev deletedSteelShakeRev = steelShakeRevService.delete(id);

        return deletedSteelShakeRev != null;
    }

    /**
     * @deprecated Use {@link #findSteelShakeRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelShakeRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShakeRev> searchSteelShakeRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelShakeRevs list");
        return steelShakeRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelShakeRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShakeRev> findSteelShakeRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelShakeRevs list");
        return steelShakeRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelShakeRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelShakeRev> filterSteelShakeRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelShakeRevs list");
        return steelShakeRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelShakeRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelShakeRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelShakeRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelShakeRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelShakeRevs");
		return steelShakeRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelShakeRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelShakeRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelShakeRevService instance
	 */
	protected void setSteelShakeRevService(SteelShakeRevService service) {
		this.steelShakeRevService = service;
	}

}

