/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.LandingTrackerCivil;
import com.psabackoffice.job1111.service.LandingTrackerCivilService;


/**
 * Controller object for domain model class LandingTrackerCivil.
 * @see LandingTrackerCivil
 */
@RestController("Job1111.LandingTrackerCivilController")
@Api(value = "LandingTrackerCivilController", description = "Exposes APIs to work with LandingTrackerCivil resource.")
@RequestMapping("/Job1111/LandingTrackerCivil")
public class LandingTrackerCivilController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LandingTrackerCivilController.class);

    @Autowired
	@Qualifier("Job1111.LandingTrackerCivilService")
	private LandingTrackerCivilService landingTrackerCivilService;

	@ApiOperation(value = "Creates a new LandingTrackerCivil instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LandingTrackerCivil createLandingTrackerCivil(@RequestBody LandingTrackerCivil landingTrackerCivil) {
		LOGGER.debug("Create LandingTrackerCivil with information: {}" , landingTrackerCivil);

		landingTrackerCivil = landingTrackerCivilService.create(landingTrackerCivil);
		LOGGER.debug("Created LandingTrackerCivil with information: {}" , landingTrackerCivil);

	    return landingTrackerCivil;
	}


    @ApiOperation(value = "Returns the LandingTrackerCivil instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingTrackerCivil getLandingTrackerCivil(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LandingTrackerCivil with id: {}" , id);

        LandingTrackerCivil foundLandingTrackerCivil = landingTrackerCivilService.getById(id);
        LOGGER.debug("LandingTrackerCivil details with id: {}" , foundLandingTrackerCivil);

        return foundLandingTrackerCivil;
    }

    @ApiOperation(value = "Updates the LandingTrackerCivil instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingTrackerCivil editLandingTrackerCivil(@PathVariable("id") Integer id, @RequestBody LandingTrackerCivil landingTrackerCivil) throws EntityNotFoundException {
        LOGGER.debug("Editing LandingTrackerCivil with id: {}" , landingTrackerCivil.getUid());

        landingTrackerCivil.setUid(id);
        landingTrackerCivil = landingTrackerCivilService.update(landingTrackerCivil);
        LOGGER.debug("LandingTrackerCivil details with id: {}" , landingTrackerCivil);

        return landingTrackerCivil;
    }

    @ApiOperation(value = "Deletes the LandingTrackerCivil instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLandingTrackerCivil(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LandingTrackerCivil with id: {}" , id);

        LandingTrackerCivil deletedLandingTrackerCivil = landingTrackerCivilService.delete(id);

        return deletedLandingTrackerCivil != null;
    }

    /**
     * @deprecated Use {@link #findLandingTrackerCivils(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LandingTrackerCivil instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerCivil> searchLandingTrackerCivilsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LandingTrackerCivils list");
        return landingTrackerCivilService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingTrackerCivil instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerCivil> findLandingTrackerCivils(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingTrackerCivils list");
        return landingTrackerCivilService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingTrackerCivil instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerCivil> filterLandingTrackerCivils(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingTrackerCivils list");
        return landingTrackerCivilService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLandingTrackerCivils(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return landingTrackerCivilService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LandingTrackerCivil instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLandingTrackerCivils( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LandingTrackerCivils");
		return landingTrackerCivilService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLandingTrackerCivilAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return landingTrackerCivilService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LandingTrackerCivilService instance
	 */
	protected void setLandingTrackerCivilService(LandingTrackerCivilService service) {
		this.landingTrackerCivilService = service;
	}

}

