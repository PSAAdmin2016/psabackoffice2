/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.LandingTrackerEquip;
import com.psabackoffice.job1111.service.LandingTrackerEquipService;


/**
 * Controller object for domain model class LandingTrackerEquip.
 * @see LandingTrackerEquip
 */
@RestController("Job1111.LandingTrackerEquipController")
@Api(value = "LandingTrackerEquipController", description = "Exposes APIs to work with LandingTrackerEquip resource.")
@RequestMapping("/Job1111/LandingTrackerEquip")
public class LandingTrackerEquipController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LandingTrackerEquipController.class);

    @Autowired
	@Qualifier("Job1111.LandingTrackerEquipService")
	private LandingTrackerEquipService landingTrackerEquipService;

	@ApiOperation(value = "Creates a new LandingTrackerEquip instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LandingTrackerEquip createLandingTrackerEquip(@RequestBody LandingTrackerEquip landingTrackerEquip) {
		LOGGER.debug("Create LandingTrackerEquip with information: {}" , landingTrackerEquip);

		landingTrackerEquip = landingTrackerEquipService.create(landingTrackerEquip);
		LOGGER.debug("Created LandingTrackerEquip with information: {}" , landingTrackerEquip);

	    return landingTrackerEquip;
	}


    @ApiOperation(value = "Returns the LandingTrackerEquip instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingTrackerEquip getLandingTrackerEquip(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LandingTrackerEquip with id: {}" , id);

        LandingTrackerEquip foundLandingTrackerEquip = landingTrackerEquipService.getById(id);
        LOGGER.debug("LandingTrackerEquip details with id: {}" , foundLandingTrackerEquip);

        return foundLandingTrackerEquip;
    }

    @ApiOperation(value = "Updates the LandingTrackerEquip instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LandingTrackerEquip editLandingTrackerEquip(@PathVariable("id") Integer id, @RequestBody LandingTrackerEquip landingTrackerEquip) throws EntityNotFoundException {
        LOGGER.debug("Editing LandingTrackerEquip with id: {}" , landingTrackerEquip.getUid());

        landingTrackerEquip.setUid(id);
        landingTrackerEquip = landingTrackerEquipService.update(landingTrackerEquip);
        LOGGER.debug("LandingTrackerEquip details with id: {}" , landingTrackerEquip);

        return landingTrackerEquip;
    }

    @ApiOperation(value = "Deletes the LandingTrackerEquip instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLandingTrackerEquip(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LandingTrackerEquip with id: {}" , id);

        LandingTrackerEquip deletedLandingTrackerEquip = landingTrackerEquipService.delete(id);

        return deletedLandingTrackerEquip != null;
    }

    /**
     * @deprecated Use {@link #findLandingTrackerEquips(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LandingTrackerEquip instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerEquip> searchLandingTrackerEquipsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LandingTrackerEquips list");
        return landingTrackerEquipService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingTrackerEquip instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerEquip> findLandingTrackerEquips(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingTrackerEquips list");
        return landingTrackerEquipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LandingTrackerEquip instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LandingTrackerEquip> filterLandingTrackerEquips(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LandingTrackerEquips list");
        return landingTrackerEquipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLandingTrackerEquips(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return landingTrackerEquipService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LandingTrackerEquip instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLandingTrackerEquips( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LandingTrackerEquips");
		return landingTrackerEquipService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLandingTrackerEquipAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return landingTrackerEquipService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LandingTrackerEquipService instance
	 */
	protected void setLandingTrackerEquipService(LandingTrackerEquipService service) {
		this.landingTrackerEquipService = service;
	}

}

