/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.TrackerPipeClassic;
import com.psabackoffice.job1111.service.TrackerPipeClassicService;


/**
 * Controller object for domain model class TrackerPipeClassic.
 * @see TrackerPipeClassic
 */
@RestController("Job1111.TrackerPipeClassicController")
@Api(value = "TrackerPipeClassicController", description = "Exposes APIs to work with TrackerPipeClassic resource.")
@RequestMapping("/Job1111/TrackerPipeClassic")
public class TrackerPipeClassicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TrackerPipeClassicController.class);

    @Autowired
	@Qualifier("Job1111.TrackerPipeClassicService")
	private TrackerPipeClassicService trackerPipeClassicService;

	@ApiOperation(value = "Creates a new TrackerPipeClassic instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TrackerPipeClassic createTrackerPipeClassic(@RequestBody TrackerPipeClassic trackerPipeClassic) {
		LOGGER.debug("Create TrackerPipeClassic with information: {}" , trackerPipeClassic);

		trackerPipeClassic = trackerPipeClassicService.create(trackerPipeClassic);
		LOGGER.debug("Created TrackerPipeClassic with information: {}" , trackerPipeClassic);

	    return trackerPipeClassic;
	}


    @ApiOperation(value = "Returns the TrackerPipeClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TrackerPipeClassic getTrackerPipeClassic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TrackerPipeClassic with id: {}" , id);

        TrackerPipeClassic foundTrackerPipeClassic = trackerPipeClassicService.getById(id);
        LOGGER.debug("TrackerPipeClassic details with id: {}" , foundTrackerPipeClassic);

        return foundTrackerPipeClassic;
    }

    @ApiOperation(value = "Updates the TrackerPipeClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TrackerPipeClassic editTrackerPipeClassic(@PathVariable("id") Integer id, @RequestBody TrackerPipeClassic trackerPipeClassic) throws EntityNotFoundException {
        LOGGER.debug("Editing TrackerPipeClassic with id: {}" , trackerPipeClassic.getId());

        trackerPipeClassic.setId(id);
        trackerPipeClassic = trackerPipeClassicService.update(trackerPipeClassic);
        LOGGER.debug("TrackerPipeClassic details with id: {}" , trackerPipeClassic);

        return trackerPipeClassic;
    }

    @ApiOperation(value = "Deletes the TrackerPipeClassic instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTrackerPipeClassic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TrackerPipeClassic with id: {}" , id);

        TrackerPipeClassic deletedTrackerPipeClassic = trackerPipeClassicService.delete(id);

        return deletedTrackerPipeClassic != null;
    }

    /**
     * @deprecated Use {@link #findTrackerPipeClassics(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TrackerPipeClassic instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TrackerPipeClassic> searchTrackerPipeClassicsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TrackerPipeClassics list");
        return trackerPipeClassicService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TrackerPipeClassic instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TrackerPipeClassic> findTrackerPipeClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TrackerPipeClassics list");
        return trackerPipeClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TrackerPipeClassic instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TrackerPipeClassic> filterTrackerPipeClassics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TrackerPipeClassics list");
        return trackerPipeClassicService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTrackerPipeClassics(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return trackerPipeClassicService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TrackerPipeClassic instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTrackerPipeClassics( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TrackerPipeClassics");
		return trackerPipeClassicService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTrackerPipeClassicAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return trackerPipeClassicService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TrackerPipeClassicService instance
	 */
	protected void setTrackerPipeClassicService(TrackerPipeClassicService service) {
		this.trackerPipeClassicService = service;
	}

}

