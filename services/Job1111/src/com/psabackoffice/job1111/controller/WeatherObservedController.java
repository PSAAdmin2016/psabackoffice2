/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.WeatherObserved;
import com.psabackoffice.job1111.service.WeatherObservedService;


/**
 * Controller object for domain model class WeatherObserved.
 * @see WeatherObserved
 */
@RestController("Job1111.WeatherObservedController")
@Api(value = "WeatherObservedController", description = "Exposes APIs to work with WeatherObserved resource.")
@RequestMapping("/Job1111/WeatherObserved")
public class WeatherObservedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WeatherObservedController.class);

    @Autowired
	@Qualifier("Job1111.WeatherObservedService")
	private WeatherObservedService weatherObservedService;

	@ApiOperation(value = "Creates a new WeatherObserved instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherObserved createWeatherObserved(@RequestBody WeatherObserved weatherObserved) {
		LOGGER.debug("Create WeatherObserved with information: {}" , weatherObserved);

		weatherObserved = weatherObservedService.create(weatherObserved);
		LOGGER.debug("Created WeatherObserved with information: {}" , weatherObserved);

	    return weatherObserved;
	}

    @ApiOperation(value = "Returns the WeatherObserved instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public WeatherObserved getWeatherObserved(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting WeatherObserved with id: {}" , id);

        WeatherObserved foundWeatherObserved = weatherObservedService.getById(id);
        LOGGER.debug("WeatherObserved details with id: {}" , foundWeatherObserved);

        return foundWeatherObserved;
    }

    @ApiOperation(value = "Updates the WeatherObserved instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public WeatherObserved editWeatherObserved(@PathVariable("id") Integer id, @RequestBody WeatherObserved weatherObserved) {
        LOGGER.debug("Editing WeatherObserved with id: {}" , weatherObserved.getId());

        weatherObserved.setId(id);
        weatherObserved = weatherObservedService.update(weatherObserved);
        LOGGER.debug("WeatherObserved details with id: {}" , weatherObserved);

        return weatherObserved;
    }

    @ApiOperation(value = "Deletes the WeatherObserved instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteWeatherObserved(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting WeatherObserved with id: {}" , id);

        WeatherObserved deletedWeatherObserved = weatherObservedService.delete(id);

        return deletedWeatherObserved != null;
    }

    /**
     * @deprecated Use {@link #findWeatherObserveds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of WeatherObserved instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherObserved> searchWeatherObservedsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering WeatherObserveds list by query filter:{}", (Object) queryFilters);
        return weatherObservedService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherObserved instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherObserved> findWeatherObserveds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherObserveds list by filter:", query);
        return weatherObservedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of WeatherObserved instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<WeatherObserved> filterWeatherObserveds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WeatherObserveds list by filter", query);
        return weatherObservedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWeatherObserveds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return weatherObservedService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of WeatherObserved instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWeatherObserveds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WeatherObserveds");
		return weatherObservedService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWeatherObservedAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return weatherObservedService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WeatherObservedService instance
	 */
	protected void setWeatherObservedService(WeatherObservedService service) {
		this.weatherObservedService = service;
	}

}

