/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubsErection;
import com.psabackoffice.job1111.service.SubsErectionService;


/**
 * Controller object for domain model class SubsErection.
 * @see SubsErection
 */
@RestController("Job1111.SubsErectionController")
@Api(value = "SubsErectionController", description = "Exposes APIs to work with SubsErection resource.")
@RequestMapping("/Job1111/SubsErection")
public class SubsErectionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsErectionController.class);

    @Autowired
	@Qualifier("Job1111.SubsErectionService")
	private SubsErectionService subsErectionService;

	@ApiOperation(value = "Creates a new SubsErection instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubsErection createSubsErection(@RequestBody SubsErection subsErection) {
		LOGGER.debug("Create SubsErection with information: {}" , subsErection);

		subsErection = subsErectionService.create(subsErection);
		LOGGER.debug("Created SubsErection with information: {}" , subsErection);

	    return subsErection;
	}


    @ApiOperation(value = "Returns the SubsErection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsErection getSubsErection(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubsErection with id: {}" , id);

        SubsErection foundSubsErection = subsErectionService.getById(id);
        LOGGER.debug("SubsErection details with id: {}" , foundSubsErection);

        return foundSubsErection;
    }

    @ApiOperation(value = "Updates the SubsErection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubsErection editSubsErection(@PathVariable("id") Integer id, @RequestBody SubsErection subsErection) throws EntityNotFoundException {
        LOGGER.debug("Editing SubsErection with id: {}" , subsErection.getId());

        subsErection.setId(id);
        subsErection = subsErectionService.update(subsErection);
        LOGGER.debug("SubsErection details with id: {}" , subsErection);

        return subsErection;
    }

    @ApiOperation(value = "Deletes the SubsErection instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubsErection(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsErection with id: {}" , id);

        SubsErection deletedSubsErection = subsErectionService.delete(id);

        return deletedSubsErection != null;
    }

    /**
     * @deprecated Use {@link #findSubsErections(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubsErection instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsErection> searchSubsErectionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubsErections list");
        return subsErectionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsErection instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsErection> findSubsErections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsErections list");
        return subsErectionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubsErection instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubsErection> filterSubsErections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubsErections list");
        return subsErectionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubsErections(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subsErectionService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubsErection instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubsErections( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubsErections");
		return subsErectionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubsErectionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subsErectionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsErectionService instance
	 */
	protected void setSubsErectionService(SubsErectionService service) {
		this.subsErectionService = service;
	}

}

