/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.CacheRefEquipBidActivities;
import com.psabackoffice.job1111.service.CacheRefEquipBidActivitiesService;


/**
 * Controller object for domain model class CacheRefEquipBidActivities.
 * @see CacheRefEquipBidActivities
 */
@RestController("Job1111.CacheRefEquipBidActivitiesController")
@Api(value = "CacheRefEquipBidActivitiesController", description = "Exposes APIs to work with CacheRefEquipBidActivities resource.")
@RequestMapping("/Job1111/CacheRefEquipBidActivities")
public class CacheRefEquipBidActivitiesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CacheRefEquipBidActivitiesController.class);

    @Autowired
	@Qualifier("Job1111.CacheRefEquipBidActivitiesService")
	private CacheRefEquipBidActivitiesService cacheRefEquipBidActivitiesService;

	@ApiOperation(value = "Creates a new CacheRefEquipBidActivities instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CacheRefEquipBidActivities createCacheRefEquipBidActivities(@RequestBody CacheRefEquipBidActivities cacheRefEquipBidActivities) {
		LOGGER.debug("Create CacheRefEquipBidActivities with information: {}" , cacheRefEquipBidActivities);

		cacheRefEquipBidActivities = cacheRefEquipBidActivitiesService.create(cacheRefEquipBidActivities);
		LOGGER.debug("Created CacheRefEquipBidActivities with information: {}" , cacheRefEquipBidActivities);

	    return cacheRefEquipBidActivities;
	}


    @ApiOperation(value = "Returns the CacheRefEquipBidActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefEquipBidActivities getCacheRefEquipBidActivities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CacheRefEquipBidActivities with id: {}" , id);

        CacheRefEquipBidActivities foundCacheRefEquipBidActivities = cacheRefEquipBidActivitiesService.getById(id);
        LOGGER.debug("CacheRefEquipBidActivities details with id: {}" , foundCacheRefEquipBidActivities);

        return foundCacheRefEquipBidActivities;
    }

    @ApiOperation(value = "Updates the CacheRefEquipBidActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CacheRefEquipBidActivities editCacheRefEquipBidActivities(@PathVariable("id") Integer id, @RequestBody CacheRefEquipBidActivities cacheRefEquipBidActivities) throws EntityNotFoundException {
        LOGGER.debug("Editing CacheRefEquipBidActivities with id: {}" , cacheRefEquipBidActivities.getId());

        cacheRefEquipBidActivities.setId(id);
        cacheRefEquipBidActivities = cacheRefEquipBidActivitiesService.update(cacheRefEquipBidActivities);
        LOGGER.debug("CacheRefEquipBidActivities details with id: {}" , cacheRefEquipBidActivities);

        return cacheRefEquipBidActivities;
    }

    @ApiOperation(value = "Deletes the CacheRefEquipBidActivities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCacheRefEquipBidActivities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CacheRefEquipBidActivities with id: {}" , id);

        CacheRefEquipBidActivities deletedCacheRefEquipBidActivities = cacheRefEquipBidActivitiesService.delete(id);

        return deletedCacheRefEquipBidActivities != null;
    }

    /**
     * @deprecated Use {@link #findCacheRefEquipBidActivities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CacheRefEquipBidActivities instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefEquipBidActivities> searchCacheRefEquipBidActivitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CacheRefEquipBidActivities list");
        return cacheRefEquipBidActivitiesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefEquipBidActivities instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefEquipBidActivities> findCacheRefEquipBidActivities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefEquipBidActivities list");
        return cacheRefEquipBidActivitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CacheRefEquipBidActivities instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CacheRefEquipBidActivities> filterCacheRefEquipBidActivities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CacheRefEquipBidActivities list");
        return cacheRefEquipBidActivitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCacheRefEquipBidActivities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cacheRefEquipBidActivitiesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CacheRefEquipBidActivities instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCacheRefEquipBidActivities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CacheRefEquipBidActivities");
		return cacheRefEquipBidActivitiesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCacheRefEquipBidActivitiesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cacheRefEquipBidActivitiesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CacheRefEquipBidActivitiesService instance
	 */
	protected void setCacheRefEquipBidActivitiesService(CacheRefEquipBidActivitiesService service) {
		this.cacheRefEquipBidActivitiesService = service;
	}

}

