/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelFa;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelTrackerDetails;
import com.psabackoffice.job1111.service.SteelTrackerDetailsService;


/**
 * Controller object for domain model class SteelTrackerDetails.
 * @see SteelTrackerDetails
 */
@RestController("Job1111.SteelTrackerDetailsController")
@Api(value = "SteelTrackerDetailsController", description = "Exposes APIs to work with SteelTrackerDetails resource.")
@RequestMapping("/Job1111/SteelTrackerDetails")
public class SteelTrackerDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelTrackerDetailsController.class);

    @Autowired
	@Qualifier("Job1111.SteelTrackerDetailsService")
	private SteelTrackerDetailsService steelTrackerDetailsService;

	@ApiOperation(value = "Creates a new SteelTrackerDetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelTrackerDetails createSteelTrackerDetails(@RequestBody SteelTrackerDetails steelTrackerDetails) {
		LOGGER.debug("Create SteelTrackerDetails with information: {}" , steelTrackerDetails);

		steelTrackerDetails = steelTrackerDetailsService.create(steelTrackerDetails);
		LOGGER.debug("Created SteelTrackerDetails with information: {}" , steelTrackerDetails);

	    return steelTrackerDetails;
	}

    @ApiOperation(value = "Returns the SteelTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public SteelTrackerDetails getSteelTrackerDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SteelTrackerDetails with id: {}" , id);

        SteelTrackerDetails foundSteelTrackerDetails = steelTrackerDetailsService.getById(id);
        LOGGER.debug("SteelTrackerDetails details with id: {}" , foundSteelTrackerDetails);

        return foundSteelTrackerDetails;
    }

    @ApiOperation(value = "Updates the SteelTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelTrackerDetails editSteelTrackerDetails(@PathVariable("id") Integer id, @RequestBody SteelTrackerDetails steelTrackerDetails) {
        LOGGER.debug("Editing SteelTrackerDetails with id: {}" , steelTrackerDetails.getUid());

        steelTrackerDetails.setUid(id);
        steelTrackerDetails = steelTrackerDetailsService.update(steelTrackerDetails);
        LOGGER.debug("SteelTrackerDetails details with id: {}" , steelTrackerDetails);

        return steelTrackerDetails;
    }

    @ApiOperation(value = "Deletes the SteelTrackerDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteSteelTrackerDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SteelTrackerDetails with id: {}" , id);

        SteelTrackerDetails deletedSteelTrackerDetails = steelTrackerDetailsService.delete(id);

        return deletedSteelTrackerDetails != null;
    }

    /**
     * @deprecated Use {@link #findSteelTrackerDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelTrackerDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelTrackerDetails> searchSteelTrackerDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelTrackerDetails list by query filter:{}", (Object) queryFilters);
        return steelTrackerDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelTrackerDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelTrackerDetails> findSteelTrackerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelTrackerDetails list by filter:", query);
        return steelTrackerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelTrackerDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelTrackerDetails> filterSteelTrackerDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelTrackerDetails list by filter", query);
        return steelTrackerDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelTrackerDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelTrackerDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelTrackerDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelTrackerDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelTrackerDetails");
		return steelTrackerDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelTrackerDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelTrackerDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelDemos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelDemos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelDemo> findAssociatedSteelDemos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelDemos");
        return steelTrackerDetailsService.findAssociatedSteelDemos(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelFas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelFas instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelFa> findAssociatedSteelFas(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelFas");
        return steelTrackerDetailsService.findAssociatedSteelFas(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/steelMiscs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the steelMiscs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelMisc> findAssociatedSteelMiscs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated steelMiscs");
        return steelTrackerDetailsService.findAssociatedSteelMiscs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelTrackerDetailsService instance
	 */
	protected void setSteelTrackerDetailsService(SteelTrackerDetailsService service) {
		this.steelTrackerDetailsService = service;
	}

}

