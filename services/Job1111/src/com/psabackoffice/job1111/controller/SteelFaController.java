/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SteelFa;
import com.psabackoffice.job1111.service.SteelFaService;


/**
 * Controller object for domain model class SteelFa.
 * @see SteelFa
 */
@RestController("Job1111.SteelFaController")
@Api(value = "SteelFaController", description = "Exposes APIs to work with SteelFa resource.")
@RequestMapping("/Job1111/SteelFa")
public class SteelFaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelFaController.class);

    @Autowired
	@Qualifier("Job1111.SteelFaService")
	private SteelFaService steelFaService;

	@ApiOperation(value = "Creates a new SteelFa instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelFa createSteelFa(@RequestBody SteelFa steelFa) {
		LOGGER.debug("Create SteelFa with information: {}" , steelFa);

		steelFa = steelFaService.create(steelFa);
		LOGGER.debug("Created SteelFa with information: {}" , steelFa);

	    return steelFa;
	}

    @ApiOperation(value = "Returns the SteelFa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public SteelFa getSteelFa(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SteelFa with id: {}" , id);

        SteelFa foundSteelFa = steelFaService.getById(id);
        LOGGER.debug("SteelFa details with id: {}" , foundSteelFa);

        return foundSteelFa;
    }

    @ApiOperation(value = "Updates the SteelFa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SteelFa editSteelFa(@PathVariable("id") Integer id, @RequestBody SteelFa steelFa) {
        LOGGER.debug("Editing SteelFa with id: {}" , steelFa.getActivityId());

        steelFa.setActivityId(id);
        steelFa = steelFaService.update(steelFa);
        LOGGER.debug("SteelFa details with id: {}" , steelFa);

        return steelFa;
    }

    @ApiOperation(value = "Deletes the SteelFa instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteSteelFa(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SteelFa with id: {}" , id);

        SteelFa deletedSteelFa = steelFaService.delete(id);

        return deletedSteelFa != null;
    }

    /**
     * @deprecated Use {@link #findSteelFas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SteelFa instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelFa> searchSteelFasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SteelFas list by query filter:{}", (Object) queryFilters);
        return steelFaService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelFa instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelFa> findSteelFas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelFas list by filter:", query);
        return steelFaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SteelFa instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SteelFa> filterSteelFas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SteelFas list by filter", query);
        return steelFaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSteelFas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return steelFaService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SteelFa instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSteelFas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SteelFas");
		return steelFaService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSteelFaAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return steelFaService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelFaService instance
	 */
	protected void setSteelFaService(SteelFaService service) {
		this.steelFaService = service;
	}

}

