/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.PipeTesting;
import com.psabackoffice.job1111.service.PipeTestingService;


/**
 * Controller object for domain model class PipeTesting.
 * @see PipeTesting
 */
@RestController("Job1111.PipeTestingController")
@Api(value = "PipeTestingController", description = "Exposes APIs to work with PipeTesting resource.")
@RequestMapping("/Job1111/PipeTesting")
public class PipeTestingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipeTestingController.class);

    @Autowired
	@Qualifier("Job1111.PipeTestingService")
	private PipeTestingService pipeTestingService;

	@ApiOperation(value = "Creates a new PipeTesting instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeTesting createPipeTesting(@RequestBody PipeTesting pipeTesting) {
		LOGGER.debug("Create PipeTesting with information: {}" , pipeTesting);

		pipeTesting = pipeTestingService.create(pipeTesting);
		LOGGER.debug("Created PipeTesting with information: {}" , pipeTesting);

	    return pipeTesting;
	}

    @ApiOperation(value = "Returns the PipeTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeTesting getPipeTesting(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PipeTesting with id: {}" , id);

        PipeTesting foundPipeTesting = pipeTestingService.getById(id);
        LOGGER.debug("PipeTesting details with id: {}" , foundPipeTesting);

        return foundPipeTesting;
    }

    @ApiOperation(value = "Updates the PipeTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PipeTesting editPipeTesting(@PathVariable("id") Integer id, @RequestBody PipeTesting pipeTesting) throws EntityNotFoundException {
        LOGGER.debug("Editing PipeTesting with id: {}" , pipeTesting.getId());

        pipeTesting.setId(id);
        pipeTesting = pipeTestingService.update(pipeTesting);
        LOGGER.debug("PipeTesting details with id: {}" , pipeTesting);

        return pipeTesting;
    }

    @ApiOperation(value = "Deletes the PipeTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePipeTesting(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PipeTesting with id: {}" , id);

        PipeTesting deletedPipeTesting = pipeTestingService.delete(id);

        return deletedPipeTesting != null;
    }

    /**
     * @deprecated Use {@link #findPipeTestings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PipeTesting instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTesting> searchPipeTestingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PipeTestings list");
        return pipeTestingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeTesting instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTesting> findPipeTestings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeTestings list");
        return pipeTestingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PipeTesting instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PipeTesting> filterPipeTestings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PipeTestings list");
        return pipeTestingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipeTestings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipeTestingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PipeTesting instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipeTestings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PipeTestings");
		return pipeTestingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipeTestingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipeTestingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeTestingService instance
	 */
	protected void setPipeTestingService(PipeTestingService service) {
		this.pipeTestingService = service;
	}

}

