/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.EquipFarev;
import com.psabackoffice.job1111.service.EquipFarevService;


/**
 * Controller object for domain model class EquipFarev.
 * @see EquipFarev
 */
@RestController("Job1111.EquipFarevController")
@Api(value = "EquipFarevController", description = "Exposes APIs to work with EquipFarev resource.")
@RequestMapping("/Job1111/EquipFarev")
public class EquipFarevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EquipFarevController.class);

    @Autowired
	@Qualifier("Job1111.EquipFarevService")
	private EquipFarevService equipFarevService;

	@ApiOperation(value = "Creates a new EquipFarev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EquipFarev createEquipFarev(@RequestBody EquipFarev equipFarev) {
		LOGGER.debug("Create EquipFarev with information: {}" , equipFarev);

		equipFarev = equipFarevService.create(equipFarev);
		LOGGER.debug("Created EquipFarev with information: {}" , equipFarev);

	    return equipFarev;
	}


    @ApiOperation(value = "Returns the EquipFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipFarev getEquipFarev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EquipFarev with id: {}" , id);

        EquipFarev foundEquipFarev = equipFarevService.getById(id);
        LOGGER.debug("EquipFarev details with id: {}" , foundEquipFarev);

        return foundEquipFarev;
    }

    @ApiOperation(value = "Updates the EquipFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EquipFarev editEquipFarev(@PathVariable("id") Integer id, @RequestBody EquipFarev equipFarev) throws EntityNotFoundException {
        LOGGER.debug("Editing EquipFarev with id: {}" , equipFarev.getId());

        equipFarev.setId(id);
        equipFarev = equipFarevService.update(equipFarev);
        LOGGER.debug("EquipFarev details with id: {}" , equipFarev);

        return equipFarev;
    }

    @ApiOperation(value = "Deletes the EquipFarev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEquipFarev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EquipFarev with id: {}" , id);

        EquipFarev deletedEquipFarev = equipFarevService.delete(id);

        return deletedEquipFarev != null;
    }

    /**
     * @deprecated Use {@link #findEquipFarevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EquipFarev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipFarev> searchEquipFarevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EquipFarevs list");
        return equipFarevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipFarev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipFarev> findEquipFarevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipFarevs list");
        return equipFarevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EquipFarev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EquipFarev> filterEquipFarevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EquipFarevs list");
        return equipFarevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEquipFarevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return equipFarevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EquipFarev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEquipFarevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EquipFarevs");
		return equipFarevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEquipFarevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return equipFarevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipFarevService instance
	 */
	protected void setEquipFarevService(EquipFarevService service) {
		this.equipFarevService = service;
	}

}

