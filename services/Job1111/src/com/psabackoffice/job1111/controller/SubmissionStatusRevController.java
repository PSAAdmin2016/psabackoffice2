/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.psabackoffice.job1111.SubmissionStatusRev;
import com.psabackoffice.job1111.service.SubmissionStatusRevService;


/**
 * Controller object for domain model class SubmissionStatusRev.
 * @see SubmissionStatusRev
 */
@RestController("Job1111.SubmissionStatusRevController")
@Api(value = "SubmissionStatusRevController", description = "Exposes APIs to work with SubmissionStatusRev resource.")
@RequestMapping("/Job1111/SubmissionStatusRev")
public class SubmissionStatusRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubmissionStatusRevController.class);

    @Autowired
	@Qualifier("Job1111.SubmissionStatusRevService")
	private SubmissionStatusRevService submissionStatusRevService;

	@ApiOperation(value = "Creates a new SubmissionStatusRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SubmissionStatusRev createSubmissionStatusRev(@RequestBody SubmissionStatusRev submissionStatusRev) {
		LOGGER.debug("Create SubmissionStatusRev with information: {}" , submissionStatusRev);

		submissionStatusRev = submissionStatusRevService.create(submissionStatusRev);
		LOGGER.debug("Created SubmissionStatusRev with information: {}" , submissionStatusRev);

	    return submissionStatusRev;
	}


    @ApiOperation(value = "Returns the SubmissionStatusRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubmissionStatusRev getSubmissionStatusRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubmissionStatusRev with id: {}" , id);

        SubmissionStatusRev foundSubmissionStatusRev = submissionStatusRevService.getById(id);
        LOGGER.debug("SubmissionStatusRev details with id: {}" , foundSubmissionStatusRev);

        return foundSubmissionStatusRev;
    }

    @ApiOperation(value = "Updates the SubmissionStatusRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubmissionStatusRev editSubmissionStatusRev(@PathVariable("id") Integer id, @RequestBody SubmissionStatusRev submissionStatusRev) throws EntityNotFoundException {
        LOGGER.debug("Editing SubmissionStatusRev with id: {}" , submissionStatusRev.getId());

        submissionStatusRev.setId(id);
        submissionStatusRev = submissionStatusRevService.update(submissionStatusRev);
        LOGGER.debug("SubmissionStatusRev details with id: {}" , submissionStatusRev);

        return submissionStatusRev;
    }

    @ApiOperation(value = "Deletes the SubmissionStatusRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubmissionStatusRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubmissionStatusRev with id: {}" , id);

        SubmissionStatusRev deletedSubmissionStatusRev = submissionStatusRevService.delete(id);

        return deletedSubmissionStatusRev != null;
    }

    /**
     * @deprecated Use {@link #findSubmissionStatusRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubmissionStatusRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionStatusRev> searchSubmissionStatusRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubmissionStatusRevs list");
        return submissionStatusRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubmissionStatusRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionStatusRev> findSubmissionStatusRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubmissionStatusRevs list");
        return submissionStatusRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubmissionStatusRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubmissionStatusRev> filterSubmissionStatusRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubmissionStatusRevs list");
        return submissionStatusRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubmissionStatusRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return submissionStatusRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SubmissionStatusRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubmissionStatusRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubmissionStatusRevs");
		return submissionStatusRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubmissionStatusRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return submissionStatusRevService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubmissionStatusRevService instance
	 */
	protected void setSubmissionStatusRevService(SubmissionStatusRevService service) {
		this.submissionStatusRevService = service;
	}

}

