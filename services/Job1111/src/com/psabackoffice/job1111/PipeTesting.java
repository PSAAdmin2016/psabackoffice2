/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * PipeTesting generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`PipeTesting`")
public class PipeTesting implements Serializable {

    private Integer activityId;
    private String testingTestPackageNumber;
    private Short testingRework;
    private String testingNotes;
    private Short testingTimeInForm;
    private Short activityType;
    private short rev;
    private Timestamp timeStamp;
    private SubmissionActivityStatus submissionActivityStatus;

    @Id
    @Column(name = "`ActivityID`", nullable = false, scale = 0, precision = 10)
    public Integer getActivityId() {
        return this.activityId;
    }

    public void setActivityId(Integer activityId) {
        this.activityId = activityId;
    }

    @Column(name = "`TestingTestPackageNumber`", nullable = true, length = 45)
    public String getTestingTestPackageNumber() {
        return this.testingTestPackageNumber;
    }

    public void setTestingTestPackageNumber(String testingTestPackageNumber) {
        this.testingTestPackageNumber = testingTestPackageNumber;
    }

    @Column(name = "`TestingRework`", nullable = true, scale = 0, precision = 3)
    public Short getTestingRework() {
        return this.testingRework;
    }

    public void setTestingRework(Short testingRework) {
        this.testingRework = testingRework;
    }

    @Column(name = "`TestingNotes`", nullable = true, length = 255)
    public String getTestingNotes() {
        return this.testingNotes;
    }

    public void setTestingNotes(String testingNotes) {
        this.testingNotes = testingNotes;
    }

    @Column(name = "`TestingTimeInForm`", nullable = true, scale = 0, precision = 5)
    public Short getTestingTimeInForm() {
        return this.testingTimeInForm;
    }

    public void setTestingTimeInForm(Short testingTimeInForm) {
        this.testingTimeInForm = testingTimeInForm;
    }

    @Column(name = "`ActivityType`", nullable = true, scale = 0, precision = 3)
    public Short getActivityType() {
        return this.activityType;
    }

    public void setActivityType(Short activityType) {
        this.activityType = activityType;
    }

    @Column(name = "`Rev`", nullable = false, scale = 0, precision = 3)
    public short getRev() {
        return this.rev;
    }

    public void setRev(short rev) {
        this.rev = rev;
    }

    @Column(name = "`TimeStamp`", nullable = false)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ActivityID`", referencedColumnName = "`ActivityID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`PipeTesting_ActivityID_to_SASActivityID`"))
    @Fetch(FetchMode.JOIN)
    public SubmissionActivityStatus getSubmissionActivityStatus() {
        return this.submissionActivityStatus;
    }

    public void setSubmissionActivityStatus(SubmissionActivityStatus submissionActivityStatus) {
        if(submissionActivityStatus != null) {
            this.activityId = submissionActivityStatus.getActivityId();
        }

        this.submissionActivityStatus = submissionActivityStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PipeTesting)) return false;
        final PipeTesting pipeTesting = (PipeTesting) o;
        return Objects.equals(getActivityId(), pipeTesting.getActivityId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActivityId());
    }
}

