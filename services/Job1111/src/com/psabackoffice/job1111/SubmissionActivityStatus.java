/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * SubmissionActivityStatus generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`SubmissionActivityStatus`")
public class SubmissionActivityStatus implements Serializable {

    private Integer activityId;
    private Integer submissionId;
    private Short activityType;
    private Integer fkBidIdassigned;
    private Integer fkActivityStatus;
    private Integer fkLastModifiedBy;
    private Integer lockField;
    private short rev;
    private Timestamp timeStamp;
    private SubsDetails subsDetails;
    private CivilFa civilFa;
    private CivilMisc civilMisc;
    private CivilSellPackage civilSellPackage;
    private EquipFa equipFa;
    private PipeBoltUp pipeBoltUp;
    private PipeDelay pipeDelay;
    private PipeDemo pipeDemo;
    private PipeEwo pipeEwo;
    private PipeErection pipeErection;
    private PipeMisc pipeMisc;
    private PipeSupports pipeSupports;
    private PipeTesting pipeTesting;
    private PipeTrim pipeTrim;
    private PipeWeld pipeWeld;
    private List<Sasnotes> sasnoteses;
    private SteelBoltOut steelBoltOut;
    private SteelDemo steelDemo;
    private SteelErect steelErect;
    private SteelImp steelImp;
    private SteelMisc steelMisc;
    private SteelSell steelSell;
    private SteelSellPackage steelSellPackage;
    private SteelShake steelShake;
    private SteelWeld steelWeld;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ActivityID`", nullable = false, scale = 0, precision = 10)
    public Integer getActivityId() {
        return this.activityId;
    }

    public void setActivityId(Integer activityId) {
        this.activityId = activityId;
    }

    @Column(name = "`SubmissionID`", nullable = true, scale = 0, precision = 10)
    public Integer getSubmissionId() {
        return this.submissionId;
    }

    public void setSubmissionId(Integer submissionId) {
        this.submissionId = submissionId;
    }

    @Column(name = "`ActivityType`", nullable = true, scale = 0, precision = 3)
    public Short getActivityType() {
        return this.activityType;
    }

    public void setActivityType(Short activityType) {
        this.activityType = activityType;
    }

    @Column(name = "`fk_BidIDAssigned`", nullable = true, scale = 0, precision = 10)
    public Integer getFkBidIdassigned() {
        return this.fkBidIdassigned;
    }

    public void setFkBidIdassigned(Integer fkBidIdassigned) {
        this.fkBidIdassigned = fkBidIdassigned;
    }

    @Column(name = "`fk_ActivityStatus`", nullable = true, scale = 0, precision = 10)
    public Integer getFkActivityStatus() {
        return this.fkActivityStatus;
    }

    public void setFkActivityStatus(Integer fkActivityStatus) {
        this.fkActivityStatus = fkActivityStatus;
    }

    @Column(name = "`fk_LastModifiedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getFkLastModifiedBy() {
        return this.fkLastModifiedBy;
    }

    public void setFkLastModifiedBy(Integer fkLastModifiedBy) {
        this.fkLastModifiedBy = fkLastModifiedBy;
    }

    @Column(name = "`LockField`", nullable = true, scale = 0, precision = 10)
    public Integer getLockField() {
        return this.lockField;
    }

    public void setLockField(Integer lockField) {
        this.lockField = lockField;
    }

    @Column(name = "`Rev`", nullable = false, scale = 0, precision = 3)
    public short getRev() {
        return this.rev;
    }

    public void setRev(short rev) {
        this.rev = rev;
    }

    @Column(name = "`TimeStamp`", nullable = true)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SubmissionID`", referencedColumnName = "`SubmissionID`", insertable = false, updatable = false)
    public SubsDetails getSubsDetails() {
        return this.subsDetails;
    }

    public void setSubsDetails(SubsDetails subsDetails) {
        if(subsDetails != null) {
            this.submissionId = subsDetails.getSubmissionId();
        }

        this.subsDetails = subsDetails;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public CivilFa getCivilFa() {
        return this.civilFa;
    }

    public void setCivilFa(CivilFa civilFa) {
        this.civilFa = civilFa;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public CivilMisc getCivilMisc() {
        return this.civilMisc;
    }

    public void setCivilMisc(CivilMisc civilMisc) {
        this.civilMisc = civilMisc;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public CivilSellPackage getCivilSellPackage() {
        return this.civilSellPackage;
    }

    public void setCivilSellPackage(CivilSellPackage civilSellPackage) {
        this.civilSellPackage = civilSellPackage;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public EquipFa getEquipFa() {
        return this.equipFa;
    }

    public void setEquipFa(EquipFa equipFa) {
        this.equipFa = equipFa;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeBoltUp getPipeBoltUp() {
        return this.pipeBoltUp;
    }

    public void setPipeBoltUp(PipeBoltUp pipeBoltUp) {
        this.pipeBoltUp = pipeBoltUp;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeDelay getPipeDelay() {
        return this.pipeDelay;
    }

    public void setPipeDelay(PipeDelay pipeDelay) {
        this.pipeDelay = pipeDelay;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeDemo getPipeDemo() {
        return this.pipeDemo;
    }

    public void setPipeDemo(PipeDemo pipeDemo) {
        this.pipeDemo = pipeDemo;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeEwo getPipeEwo() {
        return this.pipeEwo;
    }

    public void setPipeEwo(PipeEwo pipeEwo) {
        this.pipeEwo = pipeEwo;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeErection getPipeErection() {
        return this.pipeErection;
    }

    public void setPipeErection(PipeErection pipeErection) {
        this.pipeErection = pipeErection;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeMisc getPipeMisc() {
        return this.pipeMisc;
    }

    public void setPipeMisc(PipeMisc pipeMisc) {
        this.pipeMisc = pipeMisc;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeSupports getPipeSupports() {
        return this.pipeSupports;
    }

    public void setPipeSupports(PipeSupports pipeSupports) {
        this.pipeSupports = pipeSupports;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeTesting getPipeTesting() {
        return this.pipeTesting;
    }

    public void setPipeTesting(PipeTesting pipeTesting) {
        this.pipeTesting = pipeTesting;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeTrim getPipeTrim() {
        return this.pipeTrim;
    }

    public void setPipeTrim(PipeTrim pipeTrim) {
        this.pipeTrim = pipeTrim;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public PipeWeld getPipeWeld() {
        return this.pipeWeld;
    }

    public void setPipeWeld(PipeWeld pipeWeld) {
        this.pipeWeld = pipeWeld;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<Sasnotes> getSasnoteses() {
        return this.sasnoteses;
    }

    public void setSasnoteses(List<Sasnotes> sasnoteses) {
        this.sasnoteses = sasnoteses;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelBoltOut getSteelBoltOut() {
        return this.steelBoltOut;
    }

    public void setSteelBoltOut(SteelBoltOut steelBoltOut) {
        this.steelBoltOut = steelBoltOut;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelDemo getSteelDemo() {
        return this.steelDemo;
    }

    public void setSteelDemo(SteelDemo steelDemo) {
        this.steelDemo = steelDemo;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelErect getSteelErect() {
        return this.steelErect;
    }

    public void setSteelErect(SteelErect steelErect) {
        this.steelErect = steelErect;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelImp getSteelImp() {
        return this.steelImp;
    }

    public void setSteelImp(SteelImp steelImp) {
        this.steelImp = steelImp;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelMisc getSteelMisc() {
        return this.steelMisc;
    }

    public void setSteelMisc(SteelMisc steelMisc) {
        this.steelMisc = steelMisc;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelSell getSteelSell() {
        return this.steelSell;
    }

    public void setSteelSell(SteelSell steelSell) {
        this.steelSell = steelSell;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelSellPackage getSteelSellPackage() {
        return this.steelSellPackage;
    }

    public void setSteelSellPackage(SteelSellPackage steelSellPackage) {
        this.steelSellPackage = steelSellPackage;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelShake getSteelShake() {
        return this.steelShake;
    }

    public void setSteelShake(SteelShake steelShake) {
        this.steelShake = steelShake;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "submissionActivityStatus")
    public SteelWeld getSteelWeld() {
        return this.steelWeld;
    }

    public void setSteelWeld(SteelWeld steelWeld) {
        this.steelWeld = steelWeld;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SubmissionActivityStatus)) return false;
        final SubmissionActivityStatus submissionActivityStatus = (SubmissionActivityStatus) o;
        return Objects.equals(getActivityId(), submissionActivityStatus.getActivityId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActivityId());
    }
}

