/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * SubmissionActivityStatus generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`SubmissionActivityStatus`")
public class SubmissionActivityStatus implements Serializable {

    private Integer activityId;
    private Integer submissionId;
    private Short activityType;
    private Integer fkBidIdassigned;
    private Integer fkActivityStatus;
    private Integer fkLastModifiedBy;
    private Integer lockField;
    private short rev;
    private Timestamp timeStamp;
    private SubsDetails subsDetails;
    private List<CivilFa> civilFas;
    private List<CivilMisc> civilMiscs;
    private List<CivilSellPackage> civilSellPackages;
    private List<EquipFa> equipFas;
    private List<PipeBoltUp> pipeBoltUps;
    private List<PipeWeld> pipeWelds;
    private List<SteelBoltOut> steelBoltOuts;
    private List<SteelDemo> steelDemos;
    private List<SteelErect> steelErects;
    private List<SteelImp> steelImps;
    private List<SteelMisc> steelMiscs;
    private List<SteelSell> steelSells;
    private List<SteelSellPackage> steelSellPackages;
    private List<SteelShake> steelShakes;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ActivityID`", nullable = false, scale = 0, precision = 10)
    public Integer getActivityId() {
        return this.activityId;
    }

    public void setActivityId(Integer activityId) {
        this.activityId = activityId;
    }

    @Column(name = "`SubmissionID`", nullable = true, scale = 0, precision = 10)
    public Integer getSubmissionId() {
        return this.submissionId;
    }

    public void setSubmissionId(Integer submissionId) {
        this.submissionId = submissionId;
    }

    @Column(name = "`ActivityType`", nullable = true, scale = 0, precision = 3)
    public Short getActivityType() {
        return this.activityType;
    }

    public void setActivityType(Short activityType) {
        this.activityType = activityType;
    }

    @Column(name = "`fk_BidIDAssigned`", nullable = true, scale = 0, precision = 10)
    public Integer getFkBidIdassigned() {
        return this.fkBidIdassigned;
    }

    public void setFkBidIdassigned(Integer fkBidIdassigned) {
        this.fkBidIdassigned = fkBidIdassigned;
    }

    @Column(name = "`fk_ActivityStatus`", nullable = true, scale = 0, precision = 10)
    public Integer getFkActivityStatus() {
        return this.fkActivityStatus;
    }

    public void setFkActivityStatus(Integer fkActivityStatus) {
        this.fkActivityStatus = fkActivityStatus;
    }

    @Column(name = "`fk_LastModifiedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getFkLastModifiedBy() {
        return this.fkLastModifiedBy;
    }

    public void setFkLastModifiedBy(Integer fkLastModifiedBy) {
        this.fkLastModifiedBy = fkLastModifiedBy;
    }

    @Column(name = "`LockField`", nullable = true, scale = 0, precision = 10)
    public Integer getLockField() {
        return this.lockField;
    }

    public void setLockField(Integer lockField) {
        this.lockField = lockField;
    }

    @Column(name = "`Rev`", nullable = false, scale = 0, precision = 3)
    public short getRev() {
        return this.rev;
    }

    public void setRev(short rev) {
        this.rev = rev;
    }

    @Column(name = "`TimeStamp`", nullable = true)
    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SubmissionID`", referencedColumnName = "`SubmissionID`", insertable = false, updatable = false)
    public SubsDetails getSubsDetails() {
        return this.subsDetails;
    }

    public void setSubsDetails(SubsDetails subsDetails) {
        if(subsDetails != null) {
            this.submissionId = subsDetails.getSubmissionId();
        }

        this.subsDetails = subsDetails;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<CivilFa> getCivilFas() {
        return this.civilFas;
    }

    public void setCivilFas(List<CivilFa> civilFas) {
        this.civilFas = civilFas;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<CivilMisc> getCivilMiscs() {
        return this.civilMiscs;
    }

    public void setCivilMiscs(List<CivilMisc> civilMiscs) {
        this.civilMiscs = civilMiscs;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<CivilSellPackage> getCivilSellPackages() {
        return this.civilSellPackages;
    }

    public void setCivilSellPackages(List<CivilSellPackage> civilSellPackages) {
        this.civilSellPackages = civilSellPackages;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<EquipFa> getEquipFas() {
        return this.equipFas;
    }

    public void setEquipFas(List<EquipFa> equipFas) {
        this.equipFas = equipFas;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<PipeBoltUp> getPipeBoltUps() {
        return this.pipeBoltUps;
    }

    public void setPipeBoltUps(List<PipeBoltUp> pipeBoltUps) {
        this.pipeBoltUps = pipeBoltUps;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<PipeWeld> getPipeWelds() {
        return this.pipeWelds;
    }

    public void setPipeWelds(List<PipeWeld> pipeWelds) {
        this.pipeWelds = pipeWelds;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelBoltOut> getSteelBoltOuts() {
        return this.steelBoltOuts;
    }

    public void setSteelBoltOuts(List<SteelBoltOut> steelBoltOuts) {
        this.steelBoltOuts = steelBoltOuts;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelDemo> getSteelDemos() {
        return this.steelDemos;
    }

    public void setSteelDemos(List<SteelDemo> steelDemos) {
        this.steelDemos = steelDemos;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelErect> getSteelErects() {
        return this.steelErects;
    }

    public void setSteelErects(List<SteelErect> steelErects) {
        this.steelErects = steelErects;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelImp> getSteelImps() {
        return this.steelImps;
    }

    public void setSteelImps(List<SteelImp> steelImps) {
        this.steelImps = steelImps;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelMisc> getSteelMiscs() {
        return this.steelMiscs;
    }

    public void setSteelMiscs(List<SteelMisc> steelMiscs) {
        this.steelMiscs = steelMiscs;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelSell> getSteelSells() {
        return this.steelSells;
    }

    public void setSteelSells(List<SteelSell> steelSells) {
        this.steelSells = steelSells;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelSellPackage> getSteelSellPackages() {
        return this.steelSellPackages;
    }

    public void setSteelSellPackages(List<SteelSellPackage> steelSellPackages) {
        this.steelSellPackages = steelSellPackages;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "submissionActivityStatus")
    public List<SteelShake> getSteelShakes() {
        return this.steelShakes;
    }

    public void setSteelShakes(List<SteelShake> steelShakes) {
        this.steelShakes = steelShakes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SubmissionActivityStatus)) return false;
        final SubmissionActivityStatus submissionActivityStatus = (SubmissionActivityStatus) o;
        return Objects.equals(getActivityId(), submissionActivityStatus.getActivityId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActivityId());
    }
}

