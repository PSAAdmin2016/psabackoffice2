/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.models.query;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Objects;

import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.wavemaker.runtime.data.annotations.ColumnAlias;

public class GetActivityHistoryTrimResponse implements Serializable {

    @JsonProperty("TrimActivitySelect")
    @ColumnAlias("TrimActivitySelect")
    private String trimActivitySelect;
    @JsonProperty("TrimNotes")
    @ColumnAlias("TrimNotes")
    private String trimNotes;
    @JsonProperty("ActivityType")
    @ColumnAlias("ActivityType")
    private Byte activityType;
    @JsonProperty("fk_SubmissionId")
    @ColumnAlias("fk_SubmissionId")
    private Integer fkSubmissionId;
    @JsonProperty("TrimTimeInForm")
    @ColumnAlias("TrimTimeInForm")
    private Short trimTimeInForm;
    @JsonProperty("TrimHandleType")
    @ColumnAlias("TrimHandleType")
    private String trimHandleType;
    @JsonProperty("TrimSheetNumber")
    @ColumnAlias("TrimSheetNumber")
    private String trimSheetNumber;
    @JsonProperty("TimeStamp")
    @ColumnAlias("TimeStamp")
    private Timestamp timeStamp;
    @JsonProperty("TrimSize")
    @ColumnAlias("TrimSize")
    private BigDecimal trimSize;
    @JsonProperty("TrimRework")
    @ColumnAlias("TrimRework")
    private Byte trimRework;
    @JsonProperty("TrimQuantity")
    @ColumnAlias("TrimQuantity")
    private Byte trimQuantity;
    @JsonProperty("TrimDrawingNumber")
    @ColumnAlias("TrimDrawingNumber")
    private String trimDrawingNumber;
    @JsonProperty("TrimInstrumentType")
    @ColumnAlias("TrimInstrumentType")
    private String trimInstrumentType;
    @JsonProperty("ID")
    @ColumnAlias("ID")
    private Integer id;
    @JsonProperty("TrimLineNumber")
    @ColumnAlias("TrimLineNumber")
    private String trimLineNumber;
    @JsonProperty("Rev")
    @ColumnAlias("Rev")
    private Byte rev;

    public String getTrimActivitySelect() {
        return this.trimActivitySelect;
    }

    public void setTrimActivitySelect(String trimActivitySelect) {
        this.trimActivitySelect = trimActivitySelect;
    }

    public String getTrimNotes() {
        return this.trimNotes;
    }

    public void setTrimNotes(String trimNotes) {
        this.trimNotes = trimNotes;
    }

    public Byte getActivityType() {
        return this.activityType;
    }

    public void setActivityType(Byte activityType) {
        this.activityType = activityType;
    }

    public Integer getFkSubmissionId() {
        return this.fkSubmissionId;
    }

    public void setFkSubmissionId(Integer fkSubmissionId) {
        this.fkSubmissionId = fkSubmissionId;
    }

    public Short getTrimTimeInForm() {
        return this.trimTimeInForm;
    }

    public void setTrimTimeInForm(Short trimTimeInForm) {
        this.trimTimeInForm = trimTimeInForm;
    }

    public String getTrimHandleType() {
        return this.trimHandleType;
    }

    public void setTrimHandleType(String trimHandleType) {
        this.trimHandleType = trimHandleType;
    }

    public String getTrimSheetNumber() {
        return this.trimSheetNumber;
    }

    public void setTrimSheetNumber(String trimSheetNumber) {
        this.trimSheetNumber = trimSheetNumber;
    }

    public Timestamp getTimeStamp() {
        return this.timeStamp;
    }

    public void setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
    }

    public BigDecimal getTrimSize() {
        return this.trimSize;
    }

    public void setTrimSize(BigDecimal trimSize) {
        this.trimSize = trimSize;
    }

    public Byte getTrimRework() {
        return this.trimRework;
    }

    public void setTrimRework(Byte trimRework) {
        this.trimRework = trimRework;
    }

    public Byte getTrimQuantity() {
        return this.trimQuantity;
    }

    public void setTrimQuantity(Byte trimQuantity) {
        this.trimQuantity = trimQuantity;
    }

    public String getTrimDrawingNumber() {
        return this.trimDrawingNumber;
    }

    public void setTrimDrawingNumber(String trimDrawingNumber) {
        this.trimDrawingNumber = trimDrawingNumber;
    }

    public String getTrimInstrumentType() {
        return this.trimInstrumentType;
    }

    public void setTrimInstrumentType(String trimInstrumentType) {
        this.trimInstrumentType = trimInstrumentType;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTrimLineNumber() {
        return this.trimLineNumber;
    }

    public void setTrimLineNumber(String trimLineNumber) {
        this.trimLineNumber = trimLineNumber;
    }

    public Byte getRev() {
        return this.rev;
    }

    public void setRev(Byte rev) {
        this.rev = rev;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof GetActivityHistoryTrimResponse)) return false;
        final GetActivityHistoryTrimResponse getActivityHistoryTrimResponse = (GetActivityHistoryTrimResponse) o;
        return Objects.equals(getTrimActivitySelect(), getActivityHistoryTrimResponse.getTrimActivitySelect()) &&
                Objects.equals(getTrimNotes(), getActivityHistoryTrimResponse.getTrimNotes()) &&
                Objects.equals(getActivityType(), getActivityHistoryTrimResponse.getActivityType()) &&
                Objects.equals(getFkSubmissionId(), getActivityHistoryTrimResponse.getFkSubmissionId()) &&
                Objects.equals(getTrimTimeInForm(), getActivityHistoryTrimResponse.getTrimTimeInForm()) &&
                Objects.equals(getTrimHandleType(), getActivityHistoryTrimResponse.getTrimHandleType()) &&
                Objects.equals(getTrimSheetNumber(), getActivityHistoryTrimResponse.getTrimSheetNumber()) &&
                Objects.equals(getTimeStamp(), getActivityHistoryTrimResponse.getTimeStamp()) &&
                Objects.equals(getTrimSize(), getActivityHistoryTrimResponse.getTrimSize()) &&
                Objects.equals(getTrimRework(), getActivityHistoryTrimResponse.getTrimRework()) &&
                Objects.equals(getTrimQuantity(), getActivityHistoryTrimResponse.getTrimQuantity()) &&
                Objects.equals(getTrimDrawingNumber(), getActivityHistoryTrimResponse.getTrimDrawingNumber()) &&
                Objects.equals(getTrimInstrumentType(), getActivityHistoryTrimResponse.getTrimInstrumentType()) &&
                Objects.equals(getId(), getActivityHistoryTrimResponse.getId()) &&
                Objects.equals(getTrimLineNumber(), getActivityHistoryTrimResponse.getTrimLineNumber()) &&
                Objects.equals(getRev(), getActivityHistoryTrimResponse.getRev());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getTrimActivitySelect(),
                getTrimNotes(),
                getActivityType(),
                getFkSubmissionId(),
                getTrimTimeInForm(),
                getTrimHandleType(),
                getTrimSheetNumber(),
                getTimeStamp(),
                getTrimSize(),
                getTrimRework(),
                getTrimQuantity(),
                getTrimDrawingNumber(),
                getTrimInstrumentType(),
                getId(),
                getTrimLineNumber(),
                getRev());
    }
}
