/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.SubsSupports;
import com.psabackoffice.job1111.SubsSupportsRev;


/**
 * ServiceImpl object for domain model class SubsSupports.
 *
 * @see SubsSupports
 */
@Service("Job1111.SubsSupportsService")
public class SubsSupportsServiceImpl implements SubsSupportsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsSupportsServiceImpl.class);

    @Autowired
	@Qualifier("Job1111.SubsSupportsRevService")
	private SubsSupportsRevService subsSupportsRevService;

    @Autowired
    @Qualifier("Job1111.SubsSupportsDao")
    private WMGenericDao<SubsSupports, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubsSupports, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubsSupports create(SubsSupports subsSupports) {
        LOGGER.debug("Creating a new SubsSupports with information: {}", subsSupports);
        SubsSupports subsSupportsCreated = this.wmGenericDao.create(subsSupports);
        if(subsSupportsCreated.getSubsSupportsRevs() != null) {
            for(SubsSupportsRev subsSupportsRev : subsSupportsCreated.getSubsSupportsRevs()) {
                subsSupportsRev.setSubsSupports(subsSupportsCreated);
                LOGGER.debug("Creating a new child SubsSupportsRev with information: {}", subsSupportsRev);
                subsSupportsRevService.create(subsSupportsRev);
            }
        }
        return subsSupportsCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsSupports getById(Integer subssupportsId) throws EntityNotFoundException {
        LOGGER.debug("Finding SubsSupports by id: {}", subssupportsId);
        SubsSupports subsSupports = this.wmGenericDao.findById(subssupportsId);
        if (subsSupports == null){
            LOGGER.debug("No SubsSupports found with id: {}", subssupportsId);
            throw new EntityNotFoundException(String.valueOf(subssupportsId));
        }
        return subsSupports;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsSupports findById(Integer subssupportsId) {
        LOGGER.debug("Finding SubsSupports by id: {}", subssupportsId);
        return this.wmGenericDao.findById(subssupportsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubsSupports update(SubsSupports subsSupports) throws EntityNotFoundException {
        LOGGER.debug("Updating SubsSupports with information: {}", subsSupports);
        this.wmGenericDao.update(subsSupports);

        Integer subssupportsId = subsSupports.getId();

        return this.wmGenericDao.findById(subssupportsId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubsSupports delete(Integer subssupportsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsSupports with id: {}", subssupportsId);
        SubsSupports deleted = this.wmGenericDao.findById(subssupportsId);
        if (deleted == null) {
            LOGGER.debug("No SubsSupports found with id: {}", subssupportsId);
            throw new EntityNotFoundException(String.valueOf(subssupportsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubsSupports> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubsSupports");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsSupports> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubsSupports");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubsSupports to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsSupportsRev> findAssociatedSubsSupportsRevs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsSupportsRevs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsSupports.id = '" + id + "'");

        return subsSupportsRevService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsSupportsRevService instance
	 */
	protected void setSubsSupportsRevService(SubsSupportsRevService service) {
        this.subsSupportsRevService = service;
    }

}

