/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.models.query.*;

@Service
public class Job1111QueryExecutorServiceImpl implements Job1111QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Job1111QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("Job1111WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilSellPackage(UpdateCivilSellPackageRequest updateCivilSellPackageRequest) {
        Map params = new HashMap(3);

        params.put("TestPackageNumber", updateCivilSellPackageRequest.getTestPackageNumber());
        params.put("Notes", updateCivilSellPackageRequest.getNotes());
        params.put("RowID", updateCivilSellPackageRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilSellPackage", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSuperRecentActivitesResponse> executeGetSuperRecentActivites(Integer userId, Integer selectedSuper, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("SelectedSuper", selectedSuper);

        return queryExecutor.executeNamedQuery("GetSuperRecentActivites", params, GetSuperRecentActivitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSuperRecentActivites(ExportType exportType, Integer userId, Integer selectedSuper, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("SelectedSuper", selectedSuper);

        return queryExecutor.exportNamedQueryData("GetSuperRecentActivites", params, exportType, GetSuperRecentActivitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetErectionTotalResponse> executeGetErectionTotal(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityId", activityId);

        return queryExecutor.executeNamedQuery("GetErectionTotal", params, GetErectionTotalResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetErectionTotal(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityId", activityId);

        return queryExecutor.exportNamedQueryData("GetErectionTotal", params, exportType, GetErectionTotalResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelShake(UpdateSettingSteelShakeRequest updateSettingSteelShakeRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelShakeRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelShake", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelErectResponse> executeGetActivityHistorySteelErect(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelErect", params, GetActivityHistorySteelErectResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelErect(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelErect", params, exportType, GetActivityHistorySteelErectResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityWeldInstalledResponse> executeGetQuantityWeldInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityWeldInstalled", params, GetQuantityWeldInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityWeldInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityWeldInstalled", params, exportType, GetQuantityWeldInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistorySteelExpandedResponse> executeGetBidWorkHistorySteelExpanded(Integer bidId, Integer subId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BidID", bidId);
        params.put("SubID", subId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteelExpanded", params, GetBidWorkHistorySteelExpandedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistorySteelExpanded(ExportType exportType, Integer bidId, Integer subId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BidID", bidId);
        params.put("SubID", subId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistorySteelExpanded", params, exportType, GetBidWorkHistorySteelExpandedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeRftpercentResponse> executeGetSettingPipeRFTPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeRFTPercent", params, GetSettingPipeRftpercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeRFTPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeRFTPercent", params, exportType, GetSettingPipeRftpercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelImpQuantity(UpdateSteelImpQuantityRequest updateSteelImpQuantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateSteelImpQuantityRequest.getQuantity());
        params.put("Percent", updateSteelImpQuantityRequest.getPercent());
        params.put("RowID", updateSteelImpQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelImpQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateTrim(UpdateTrimRequest updateTrimRequest) {
        Map params = new HashMap(10);

        params.put("Size", updateTrimRequest.getSize());
        params.put("PlugQuantity", updateTrimRequest.getPlugQuantity());
        params.put("HandleType", updateTrimRequest.getHandleType());
        params.put("InstType", updateTrimRequest.getInstType());
        params.put("DrawingNumber", updateTrimRequest.getDrawingNumber());
        params.put("LineNumber", updateTrimRequest.getLineNumber());
        params.put("SheetNumber", updateTrimRequest.getSheetNumber());
        params.put("Rework", updateTrimRequest.getRework());
        params.put("Notes", updateTrimRequest.getNotes());
        params.put("RowId", updateTrimRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateTrim", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeBoltupResponse> executeGetActivityHistoryPipeBoltup(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeBoltup", params, GetActivityHistoryPipeBoltupResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeBoltup(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeBoltup", params, exportType, GetActivityHistoryPipeBoltupResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackagePipeResponse> executeGetBidActivityMatchesByTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackagePipe", params, GetBidActivityMatchesByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackagePipe", params, exportType, GetBidActivityMatchesByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelShakeResponse> executeGetActivityHistorySteelShake(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelShake", params, GetActivityHistorySteelShakeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelShake(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelShake", params, exportType, GetActivityHistorySteelShakeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelWeld(UpdateSteelWeldRequest updateSteelWeldRequest) {
        Map params = new HashMap(7);

        params.put("Area", updateSteelWeldRequest.getArea());
        params.put("Piece", updateSteelWeldRequest.getPiece());
        params.put("Quantity", updateSteelWeldRequest.getQuantity());
        params.put("Percent", updateSteelWeldRequest.getPercent());
        params.put("Rework", updateSteelWeldRequest.getRework());
        params.put("Notes", updateSteelWeldRequest.getNotes());
        params.put("RowID", updateSteelWeldRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelWeld", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingCivilPunch(UpdateSettingCivilPunchRequest updateSettingCivilPunchRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingCivilPunchRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilPunch", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryEquipFaResponse> executeGetActivityHistoryEquipFA(String rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryEquipFA", params, GetActivityHistoryEquipFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryEquipFA(ExportType exportType, String rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryEquipFA", params, exportType, GetActivityHistoryEquipFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitesEquipResponse> executeGetBidActivityQuantitesEquip(String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitesEquip", params, GetBidActivityQuantitesEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitesEquip(ExportType exportType, String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitesEquip", params, exportType, GetBidActivityQuantitesEquipResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelMiscQuantity(UpdateSteelMiscQuantityRequest updateSteelMiscQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateSteelMiscQuantityRequest.getQuantity());
        params.put("RowID", updateSteelMiscQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateMisc(UpdateMiscRequest updateMiscRequest) {
        Map params = new HashMap(7);

        params.put("DrawingNumber", updateMiscRequest.getDrawingNumber());
        params.put("LineNumber", updateMiscRequest.getLineNumber());
        params.put("SheetNumber", updateMiscRequest.getSheetNumber());
        params.put("Quantity", updateMiscRequest.getQuantity());
        params.put("Rework", updateMiscRequest.getRework());
        params.put("Notes", updateMiscRequest.getNotes());
        params.put("RowID", updateMiscRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelMisc(UpdateSteelMiscRequest updateSteelMiscRequest) {
        Map params = new HashMap(6);

        params.put("Area", updateSteelMiscRequest.getArea());
        params.put("Piece", updateSteelMiscRequest.getPiece());
        params.put("Quantity", updateSteelMiscRequest.getQuantity());
        params.put("Rework", updateSteelMiscRequest.getRework());
        params.put("Notes", updateSteelMiscRequest.getNotes());
        params.put("RowID", updateSteelMiscRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelDemoQuantity(UpdateSteelDemoQuantityRequest updateSteelDemoQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateSteelDemoQuantityRequest.getQuantity());
        params.put("RowID", updateSteelDemoQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemoQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelDemo(UpdateSteelDemoRequest updateSteelDemoRequest) {
        Map params = new HashMap(6);

        params.put("Area", updateSteelDemoRequest.getArea());
        params.put("SteelType", updateSteelDemoRequest.getSteelType());
        params.put("Size", updateSteelDemoRequest.getSize());
        params.put("Quantity", updateSteelDemoRequest.getQuantity());
        params.put("Notes", updateSteelDemoRequest.getNotes());
        params.put("RowID", updateSteelDemoRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemo", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateBoltupQuantity(UpdateBoltupQuantityRequest updateBoltupQuantityRequest) {
        Map params = new HashMap(2);

        params.put("BoltUpQuantity", updateBoltupQuantityRequest.getBoltUpQuantity());
        params.put("RowID", updateBoltupQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateBoltupQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryPipeResponse> executeGetBidWorkHistoryPipe(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryPipe", params, GetBidWorkHistoryPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryPipe(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryPipe", params, exportType, GetBidWorkHistoryPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeWeldResponse> executeGetActivityHistoryPipeWeld(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeWeld", params, GetActivityHistoryPipeWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeWeld(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeWeld", params, exportType, GetActivityHistoryPipeWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprsteelCondensedResponse> executeGetReportDPRSteelCondensed(String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelCondensed", params, GetReportDprsteelCondensedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRSteelCondensed(ExportType exportType, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRSteelCondensed", params, exportType, GetReportDprsteelCondensedResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelBoltout(UpdateSteelBoltoutRequest updateSteelBoltoutRequest) {
        Map params = new HashMap(7);

        params.put("Area", updateSteelBoltoutRequest.getArea());
        params.put("Piece", updateSteelBoltoutRequest.getPiece());
        params.put("Quantity", updateSteelBoltoutRequest.getQuantity());
        params.put("Percent", updateSteelBoltoutRequest.getPercent());
        params.put("Rework", updateSteelBoltoutRequest.getRework());
        params.put("Notes", updateSteelBoltoutRequest.getNotes());
        params.put("RowID", updateSteelBoltoutRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelBoltout", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetUniqueDrawingNumberResponse> executeGetUniqueDrawingNumber(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetUniqueDrawingNumber", params, GetUniqueDrawingNumberResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetUniqueDrawingNumber(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetUniqueDrawingNumber", params, exportType, GetUniqueDrawingNumberResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSubDetails(UpdateSubDetailsRequest updateSubDetailsRequest) {
        Map params = new HashMap(4);

        params.put("Temp", updateSubDetailsRequest.getTemp());
        params.put("Precipitation", updateSubDetailsRequest.getPrecipitation());
        params.put("Wind", updateSubDetailsRequest.getWind());
        params.put("SubmissionID", updateSubDetailsRequest.getSubmissionId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSubDetails", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUnLockSSActivity(UnLockSsactivityRequest unLockSsactivityRequest) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", unLockSsactivityRequest.getPsaactivityId());

        return queryExecutor.executeNamedQueryForUpdate("UnLockSSActivity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelImpPercentResponse> executeGetSettingSteelImpPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelImpPercent", params, GetSettingSteelImpPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelImpPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelImpPercent", params, exportType, GetSettingSteelImpPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackageCivilResponse> executeGetBidActivityMatchesByTestPackageCivil(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageCivil", params, GetBidActivityMatchesByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackageCivil(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackageCivil", params, exportType, GetBidActivityMatchesByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingCivilWork(UpdateSettingCivilWorkRequest updateSettingCivilWorkRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingCivilWorkRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilWork", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetPsaactivityByUidResponse> executeGetPSAActivityByUid(Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetPSAActivityByUid", params, GetPsaactivityByUidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetPSAActivityByUid(ExportType exportType, Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.exportNamedQueryData("GetPSAActivityByUid", params, exportType, GetPsaactivityByUidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesPipeResponse> executeGetBidActivityQuantitiesPipe(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesPipe", params, GetBidActivityQuantitiesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesPipe(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesPipe", params, exportType, GetBidActivityQuantitiesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetUniqueLineNumbersResponse> executeGetUniqueLineNumbers(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetUniqueLineNumbers", params, GetUniqueLineNumbersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetUniqueLineNumbers(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetUniqueLineNumbers", params, exportType, GetUniqueLineNumbersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackageSteelResponse> executeGetQuantitiesTestPackageSteel(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageSteel", params, GetQuantitiesTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackageSteel(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackageSteel", params, exportType, GetQuantitiesTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeSupportResponse> executeGetActivityHistoryPipeSupport(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeSupport", params, GetActivityHistoryPipeSupportResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeSupport(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeSupport", params, exportType, GetActivityHistoryPipeSupportResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelErectQuantity(UpdateSteelErectQuantityRequest updateSteelErectQuantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateSteelErectQuantityRequest.getQuantity());
        params.put("Percent", updateSteelErectQuantityRequest.getPercent());
        params.put("RowID", updateSteelErectQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelErectQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelShake(UpdateSteelShakeRequest updateSteelShakeRequest) {
        Map params = new HashMap(6);

        params.put("Area", updateSteelShakeRequest.getArea());
        params.put("Piece", updateSteelShakeRequest.getPiece());
        params.put("Quantity", updateSteelShakeRequest.getQuantity());
        params.put("Rework", updateSteelShakeRequest.getRework());
        params.put("Notes", updateSteelShakeRequest.getNotes());
        params.put("RowID", updateSteelShakeRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelShake", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeCTOPercent(UpdateSettingPipeCtopercentRequest updateSettingPipeCtopercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeCtopercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeCTOPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelErectPercentResponse> executeGetSettingSteelErectPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelErectPercent", params, GetSettingSteelErectPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelErectPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelErectPercent", params, exportType, GetSettingSteelErectPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetPsaactivityByUidCountResponse> executeGetPSAActivityByUidCount(Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetPSAActivityByUidCount", params, GetPsaactivityByUidCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetPSAActivityByUidCount(ExportType exportType, Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.exportNamedQueryData("GetPSAActivityByUidCount", params, exportType, GetPsaactivityByUidCountResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateTrimQuantity(UpdateTrimQuantityRequest updateTrimQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateTrimQuantityRequest.getQuantity());
        params.put("RowId", updateTrimQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateTrimQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingCivilWorkResponse> executeGetSettingCivilWork(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilWork", params, GetSettingCivilWorkResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingCivilWork(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingCivilWork", params, exportType, GetSettingCivilWorkResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelShakeQuantity(UpdateSteelShakeQuantityRequest updateSteelShakeQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateSteelShakeQuantityRequest.getQuantity());
        params.put("RowID", updateSteelShakeQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelShakeQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelImp(UpdateSettingSteelImpRequest updateSettingSteelImpRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelImpRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelImp", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeMechPercentResponse> executeGetSettingPipeMechPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeMechPercent", params, GetSettingPipeMechPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeMechPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeMechPercent", params, exportType, GetSettingPipeMechPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesPipeResponse> executeGetBidActivityMatchesPipe(String lineNumber, String drawingNumber, String sheetNumber, String ect, String ecttype, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("LineNumber", lineNumber);
        params.put("DrawingNumber", drawingNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("ECT", ect);
        params.put("ECTType", ecttype);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesPipe", params, GetBidActivityMatchesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesPipe(ExportType exportType, String lineNumber, String drawingNumber, String sheetNumber, String ect, String ecttype, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("LineNumber", lineNumber);
        params.put("DrawingNumber", drawingNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("ECT", ect);
        params.put("ECTType", ecttype);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesPipe", params, exportType, GetBidActivityMatchesPipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelWeldQuantity(UpdateSteelWeldQuantityRequest updateSteelWeldQuantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateSteelWeldQuantityRequest.getQuantity());
        params.put("Percent", updateSteelWeldQuantityRequest.getPercent());
        params.put("RowID", updateSteelWeldQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelWeldQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelImp(UpdateSteelImpRequest updateSteelImpRequest) {
        Map params = new HashMap(7);

        params.put("Area", updateSteelImpRequest.getArea());
        params.put("Piece", updateSteelImpRequest.getPiece());
        params.put("Quantity", updateSteelImpRequest.getQuantity());
        params.put("Percent", updateSteelImpRequest.getPercent());
        params.put("Rework", updateSteelImpRequest.getRework());
        params.put("Notes", updateSteelImpRequest.getNotes());
        params.put("RowID", updateSteelImpRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelImp", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelSell(UpdateSteelSellRequest updateSteelSellRequest) {
        Map params = new HashMap(6);

        params.put("Area", updateSteelSellRequest.getArea());
        params.put("Piece", updateSteelSellRequest.getPiece());
        params.put("Quantity", updateSteelSellRequest.getQuantity());
        params.put("Rework", updateSteelSellRequest.getRework());
        params.put("Notes", updateSteelSellRequest.getNotes());
        params.put("RowID", updateSteelSellRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSell", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeTestingPercentResponse> executeGetSettingPipeTestingPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeTestingPercent", params, GetSettingPipeTestingPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeTestingPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeTestingPercent", params, exportType, GetSettingPipeTestingPercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateErectionQuantity(UpdateErectionQuantityRequest updateErectionQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Spool1Length", updateErectionQuantityRequest.getSpool1length());
        params.put("RowID", updateErectionQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateErectionQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesCivilResponse> executeGetBidActivityMatchesCivil(Integer bidId, String foundation, String drawingNumber, String detailDrawingNumber, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("BidID", bidId);
        params.put("Foundation", foundation);
        params.put("DrawingNumber", drawingNumber);
        params.put("DetailDrawingNumber", detailDrawingNumber);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesCivil", params, GetBidActivityMatchesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesCivil(ExportType exportType, Integer bidId, String foundation, String drawingNumber, String detailDrawingNumber, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("BidID", bidId);
        params.put("Foundation", foundation);
        params.put("DrawingNumber", drawingNumber);
        params.put("DetailDrawingNumber", detailDrawingNumber);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesCivil", params, exportType, GetBidActivityMatchesCivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelErect(UpdateSteelErectRequest updateSteelErectRequest) {
        Map params = new HashMap(7);

        params.put("Area", updateSteelErectRequest.getArea());
        params.put("Piece", updateSteelErectRequest.getPiece());
        params.put("Quantity", updateSteelErectRequest.getQuantity());
        params.put("Percent", updateSteelErectRequest.getPercent());
        params.put("Rework", updateSteelErectRequest.getRework());
        params.put("Notes", updateSteelErectRequest.getNotes());
        params.put("RowID", updateSteelErectRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelErect", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSupports(UpdateSupportsRequest updateSupportsRequest) {
        Map params = new HashMap(11);

        params.put("PartNumber", updateSupportsRequest.getPartNumber());
        params.put("Quantity", updateSupportsRequest.getQuantity());
        params.put("DrawingNumber", updateSupportsRequest.getDrawingNumber());
        params.put("LineNumber", updateSupportsRequest.getLineNumber());
        params.put("Sheet", updateSupportsRequest.getSheet());
        params.put("Complete", updateSupportsRequest.getComplete());
        params.put("Shared", updateSupportsRequest.getShared());
        params.put("PercentComplete", updateSupportsRequest.getPercentComplete());
        params.put("Rework", updateSupportsRequest.getRework());
        params.put("Notes", updateSupportsRequest.getNotes());
        params.put("RowID", updateSupportsRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSupports", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityLfinstalledResponse> executeGetQuantityLFInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityLFInstalled", params, GetQuantityLfinstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityLFInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityLFInstalled", params, exportType, GetQuantityLfinstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateDemoQuantity(UpdateDemoQuantityRequest updateDemoQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateDemoQuantityRequest.getQuantity());
        params.put("RowID", updateDemoQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateDemoQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelSellResponse> executeGetActivityHistorySteelSell(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelSell", params, GetActivityHistorySteelSellResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelSell(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelSell", params, exportType, GetActivityHistorySteelSellResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeRFTPercent(UpdateSettingPipeRftpercentRequest updateSettingPipeRftpercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeRftpercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeRFTPercent", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCutPrep(UpdateCutPrepRequest updateCutPrepRequest) {
        Map params = new HashMap(8);

        params.put("DrawingNumber", updateCutPrepRequest.getDrawingNumber());
        params.put("LineNumber", updateCutPrepRequest.getLineNumber());
        params.put("SheetNumber", updateCutPrepRequest.getSheetNumber());
        params.put("Size", updateCutPrepRequest.getSize());
        params.put("Thickness", updateCutPrepRequest.getThickness());
        params.put("Rework", updateCutPrepRequest.getRework());
        params.put("Notes", updateCutPrepRequest.getNotes());
        params.put("RowID", updateCutPrepRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCutPrep", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilMisc(UpdateCivilMiscRequest updateCivilMiscRequest) {
        Map params = new HashMap(7);

        params.put("Foundation", updateCivilMiscRequest.getFoundation());
        params.put("Drawing", updateCivilMiscRequest.getDrawing());
        params.put("DetailDrawing", updateCivilMiscRequest.getDetailDrawing());
        params.put("Percent", updateCivilMiscRequest.getPercent());
        params.put("Rework", updateCivilMiscRequest.getRework());
        params.put("Notes", updateCivilMiscRequest.getNotes());
        params.put("RowID", updateCivilMiscRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilMisc", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitySupportsInstalledResponse> executeGetQuantitySupportsInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantitySupportsInstalled", params, GetQuantitySupportsInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitySupportsInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantitySupportsInstalled", params, exportType, GetQuantitySupportsInstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeCreateSSNote(CreateSsnoteRequest createSsnoteRequest) {
        Map params = new HashMap(3);

        params.put("ActivityID", createSsnoteRequest.getActivityId());
        params.put("CreatedBy", createSsnoteRequest.getCreatedBy());
        params.put("Note", createSsnoteRequest.getNote());

        return queryExecutor.executeNamedQueryForUpdate("CreateSSNote", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeMechPercent(UpdateSettingPipeMechPercentRequest updateSettingPipeMechPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeMechPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeMechPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeCtopercentResponse> executeGetSettingPipeCTOPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeCTOPercent", params, GetSettingPipeCtopercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeCTOPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeCTOPercent", params, exportType, GetSettingPipeCtopercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeHydroPercent(UpdateSettingPipeHydroPercentRequest updateSettingPipeHydroPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeHydroPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeHydroPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeMiscResponse> executeGetActivityHistoryPipeMisc(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeMisc", params, GetActivityHistoryPipeMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeMisc(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeMisc", params, exportType, GetActivityHistoryPipeMiscResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateTesting(UpdateTestingRequest updateTestingRequest) {
        Map params = new HashMap(4);

        params.put("TestPackageNumber", updateTestingRequest.getTestPackageNumber());
        params.put("Rework", updateTestingRequest.getRework());
        params.put("Notes", updateTestingRequest.getNotes());
        params.put("RowID", updateTestingRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateTesting", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilFA(UpdateCivilFaRequest updateCivilFaRequest) {
        Map params = new HashMap(9);

        params.put("Description", updateCivilFaRequest.getDescription());
        params.put("Foundation", updateCivilFaRequest.getFoundation());
        params.put("Drawing", updateCivilFaRequest.getDrawing());
        params.put("DetailDrawing", updateCivilFaRequest.getDetailDrawing());
        params.put("Percent", updateCivilFaRequest.getPercent());
        params.put("Quantity", updateCivilFaRequest.getQuantity());
        params.put("Rework", updateCivilFaRequest.getRework());
        params.put("Notes", updateCivilFaRequest.getNotes());
        params.put("RowID", updateCivilFaRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelWeldResponse> executeGetActivityHistorySteelWeld(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelWeld", params, GetActivityHistorySteelWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelWeld(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelWeld", params, exportType, GetActivityHistorySteelWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelImpResponse> executeGetActivityHistorySteelImp(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelImp", params, GetActivityHistorySteelImpResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelImp(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelImp", params, exportType, GetActivityHistorySteelImpResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityMiscInstalledResponse> executeGetQuantityMiscInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityMiscInstalled", params, GetQuantityMiscInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityMiscInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityMiscInstalled", params, exportType, GetQuantityMiscInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityDemoRemovedResponse> executeGetQuantityDemoRemoved(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityDemoRemoved", params, GetQuantityDemoRemovedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityDemoRemoved(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityDemoRemoved", params, exportType, GetQuantityDemoRemovedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingByTestPackageSteelResponse> executeGetDrawingByTestPackageSteel(Integer testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageSteel", params, GetDrawingByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingByTestPackageSteel(ExportType exportType, Integer testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingByTestPackageSteel", params, exportType, GetDrawingByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelDemoResponse> executeGetActivityHistorySteelDemo(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelDemo", params, GetActivityHistorySteelDemoResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelDemo(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelDemo", params, exportType, GetActivityHistorySteelDemoResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelSellPackage(UpdateSteelSellPackageRequest updateSteelSellPackageRequest) {
        Map params = new HashMap(3);

        params.put("TestPackage", updateSteelSellPackageRequest.getTestPackage());
        params.put("Notes", updateSteelSellPackageRequest.getNotes());
        params.put("RowID", updateSteelSellPackageRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSellPackage", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateEquipFA(UpdateEquipFaRequest updateEquipFaRequest) {
        Map params = new HashMap(7);

        params.put("TagNumber", updateEquipFaRequest.getTagNumber());
        params.put("Activity", updateEquipFaRequest.getActivity());
        params.put("Quantity", updateEquipFaRequest.getQuantity());
        params.put("Percent", updateEquipFaRequest.getPercent());
        params.put("Rework", updateEquipFaRequest.getRework());
        params.put("Notes", updateEquipFaRequest.getNotes());
        params.put("RowID", updateEquipFaRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateEquipFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistorySteelResponse> executeGetBidWorkHistorySteel(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteel", params, GetBidWorkHistorySteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistorySteel(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistorySteel", params, exportType, GetBidWorkHistorySteelResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateEWO(UpdateEwoRequest updateEwoRequest) {
        Map params = new HashMap(8);

        params.put("EWONumber", updateEwoRequest.getEwonumber());
        params.put("EWOHours", updateEwoRequest.getEwohours());
        params.put("DrawingNumber", updateEwoRequest.getDrawingNumber());
        params.put("LineNumber", updateEwoRequest.getLineNumber());
        params.put("SheetNumber", updateEwoRequest.getSheetNumber());
        params.put("Rework", updateEwoRequest.getRework());
        params.put("Notes", updateEwoRequest.getNotes());
        params.put("RowID", updateEwoRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateEWO", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingProductivityIntervalsResponse> executeGetSettingProductivityIntervals(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingProductivityIntervals", params, GetSettingProductivityIntervalsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingProductivityIntervals(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingProductivityIntervals", params, exportType, GetSettingProductivityIntervalsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetPsrecentActivitiesResponse> executeGetPSRecentActivities(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetPSRecentActivities", params, GetPsrecentActivitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetPSRecentActivities(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetPSRecentActivities", params, exportType, GetPsrecentActivitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesCivilResponse> executeGetBidActivityQuantitiesCivil(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesCivil", params, GetBidActivityQuantitiesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesCivil(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesCivil", params, exportType, GetBidActivityQuantitiesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingApprovalCountResponse> executeGetActivitiesPendingApprovalCount(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingApprovalCount", params, GetActivitiesPendingApprovalCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingApprovalCount(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingApprovalCount", params, exportType, GetActivitiesPendingApprovalCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprequipResponse> executeGetReportDPREquip(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPREquip", params, GetReportDprequipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPREquip(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPREquip", params, exportType, GetReportDprequipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelBoltoutResponse> executeGetActivityHistorySteelBoltout(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelBoltout", params, GetActivityHistorySteelBoltoutResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelBoltout(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelBoltout", params, exportType, GetActivityHistorySteelBoltoutResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidChangeLogByIdResponse> executeGetBidChangeLogByID(Integer id, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ID", id);

        return queryExecutor.executeNamedQuery("GetBidChangeLogByID", params, GetBidChangeLogByIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidChangeLogByID(ExportType exportType, Integer id, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ID", id);

        return queryExecutor.exportNamedQueryData("GetBidChangeLogByID", params, exportType, GetBidChangeLogByIdResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateEquipFAQuantity(UpdateEquipFaquantityRequest updateEquipFaquantityRequest) {
        Map params = new HashMap(2);

        params.put("Percent", updateEquipFaquantityRequest.getPercent());
        params.put("RowID", updateEquipFaquantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateEquipFAQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryCivilMiscResponse> executeGetActivityHistoryCivilMisc(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryCivilMisc", params, GetActivityHistoryCivilMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryCivilMisc(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryCivilMisc", params, exportType, GetActivityHistoryCivilMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityBoltUpInstalledResponse> executeGetQuantityBoltUpInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityBoltUpInstalled", params, GetQuantityBoltUpInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityBoltUpInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityBoltUpInstalled", params, exportType, GetQuantityBoltUpInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackageSteelResponse> executeGetBidActivityMatchesByTestPackageSteel(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageSteel", params, GetBidActivityMatchesByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackageSteel(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackageSteel", params, exportType, GetBidActivityMatchesByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeErectionResponse> executeGetActivityHistoryPipeErection(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeErection", params, GetActivityHistoryPipeErectionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeErection(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeErection", params, exportType, GetActivityHistoryPipeErectionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryEquipResponse> executeGetBidWorkHistoryEquip(String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryEquip", params, GetBidWorkHistoryEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryEquip(ExportType exportType, String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryEquip", params, exportType, GetBidWorkHistoryEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CheckSaslockResponse> executeCheckSASLock(String activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("CheckSASLock", params, CheckSaslockResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportCheckSASLock(ExportType exportType, String activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("CheckSASLock", params, exportType, CheckSaslockResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelBoltoutQuantity(UpdateSteelBoltoutQuantityRequest updateSteelBoltoutQuantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateSteelBoltoutQuantityRequest.getQuantity());
        params.put("Percent", updateSteelBoltoutQuantityRequest.getPercent());
        params.put("RowID", updateSteelBoltoutQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelBoltoutQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprsteelDetailedResponse> executeGetReportDPRSteelDetailed(String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelDetailed", params, GetReportDprsteelDetailedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRSteelDetailed(ExportType exportType, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRSteelDetailed", params, exportType, GetReportDprsteelDetailedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingsByTestPackagePipeResponse> executeGetDrawingsByTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingsByTestPackagePipe", params, GetDrawingsByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingsByTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingsByTestPackagePipe", params, exportType, GetDrawingsByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelBoltout(UpdateSettingSteelBoltoutRequest updateSettingSteelBoltoutRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelBoltoutRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelBoltout", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetNotesByPsaactivityIdResponse> executeGetNotesByPSAActivityID(String psaactivityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.executeNamedQuery("GetNotesByPSAActivityID", params, GetNotesByPsaactivityIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetNotesByPSAActivityID(ExportType exportType, String psaactivityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.exportNamedQueryData("GetNotesByPSAActivityID", params, exportType, GetNotesByPsaactivityIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprcivilResponse> executeGetReportDPRCivil(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRCivil", params, GetReportDprcivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRCivil(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRCivil", params, exportType, GetReportDprcivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesSteelResponse> executeGetBidActivityMatchesSteel(String area, String pieceMark, String bidActivityType, String steelType, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("Area", area);
        params.put("PieceMark", pieceMark);
        params.put("BidActivityType", bidActivityType);
        params.put("SteelType", steelType);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesSteel", params, GetBidActivityMatchesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesSteel(ExportType exportType, String area, String pieceMark, String bidActivityType, String steelType, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("Area", area);
        params.put("PieceMark", pieceMark);
        params.put("BidActivityType", bidActivityType);
        params.put("SteelType", steelType);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesSteel", params, exportType, GetBidActivityMatchesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelBoltoutPercentResponse> executeGetSettingSteelBoltoutPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelBoltoutPercent", params, GetSettingSteelBoltoutPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelBoltoutPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelBoltoutPercent", params, exportType, GetSettingSteelBoltoutPercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilFAQuantity(UpdateCivilFaquantityRequest updateCivilFaquantityRequest) {
        Map params = new HashMap(3);

        params.put("Percent", updateCivilFaquantityRequest.getPercent());
        params.put("Quantity", updateCivilFaquantityRequest.getQuantity());
        params.put("RowID", updateCivilFaquantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFAQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelErect(UpdateSettingSteelErectRequest updateSettingSteelErectRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelErectRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelErect", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryStatusResponse> executeGetActivityHistoryStatus(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryStatus", params, GetActivityHistoryStatusResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryStatus(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryStatus", params, exportType, GetActivityHistoryStatusResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelShakePercentResponse> executeGetSettingSteelShakePercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelShakePercent", params, GetSettingSteelShakePercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelShakePercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelShakePercent", params, exportType, GetSettingSteelShakePercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeTestingPercent(UpdateSettingPipeTestingPercentRequest updateSettingPipeTestingPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeTestingPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeTestingPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesSteelResponse> executeGetBidActivityQuantitiesSteel(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesSteel", params, GetBidActivityQuantitiesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesSteel(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesSteel", params, exportType, GetBidActivityQuantitiesSteelResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelSell(UpdateSettingSteelSellRequest updateSettingSteelSellRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelSellRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelSell", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateBoltUp(UpdateBoltUpRequest updateBoltUpRequest) {
        Map params = new HashMap(10);

        params.put("Spool1", updateBoltUpRequest.getSpool1());
        params.put("Spool2", updateBoltUpRequest.getSpool2());
        params.put("DrawingNumber", updateBoltUpRequest.getDrawingNumber());
        params.put("LineNumber", updateBoltUpRequest.getLineNumber());
        params.put("SheetNumber", updateBoltUpRequest.getSheetNumber());
        params.put("Size", updateBoltUpRequest.getSize());
        params.put("Quantity", updateBoltUpRequest.getQuantity());
        params.put("Rework", updateBoltUpRequest.getRework());
        params.put("Notes", updateBoltUpRequest.getNotes());
        params.put("RowID", updateBoltUpRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateBoltUp", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeTestingResponse> executeGetActivityHistoryPipeTesting(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeTesting", params, GetActivityHistoryPipeTestingResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeTesting(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeTesting", params, exportType, GetActivityHistoryPipeTestingResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateMiscQuantity(UpdateMiscQuantityRequest updateMiscQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateMiscQuantityRequest.getQuantity());
        params.put("RowID", updateMiscQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateMiscQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesEquipResponse> executeGetBidActivityMatchesEquip(String bidId, String tagNumber, String description, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("BidID", bidId);
        params.put("TagNumber", tagNumber);
        params.put("Description", description);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesEquip", params, GetBidActivityMatchesEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesEquip(ExportType exportType, String bidId, String tagNumber, String description, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("BidID", bidId);
        params.put("TagNumber", tagNumber);
        params.put("Description", description);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesEquip", params, exportType, GetBidActivityMatchesEquipResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateWeldQuantity(UpdateWeldQuantityRequest updateWeldQuantityRequest) {
        Map params = new HashMap(2);

        params.put("PercentComplete", updateWeldQuantityRequest.getPercentComplete());
        params.put("RowID", updateWeldQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateWeldQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryCivilResponse> executeGetBidWorkHistoryCivil(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryCivil", params, GetBidWorkHistoryCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryCivil(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryCivil", params, exportType, GetBidWorkHistoryCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingApprovalResponse> executeGetActivitiesPendingApproval(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingApproval", params, GetActivitiesPendingApprovalResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingApproval(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingApproval", params, exportType, GetActivitiesPendingApprovalResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingCivilPuchResponse> executeGetSettingCivilPuch(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilPuch", params, GetSettingCivilPuchResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingCivilPuch(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingCivilPuch", params, exportType, GetSettingCivilPuchResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeHydroPercentResponse> executeGetSettingPipeHydroPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeHydroPercent", params, GetSettingPipeHydroPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeHydroPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeHydroPercent", params, exportType, GetSettingPipeHydroPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingByTestPackageCivilResponse> executeGetDrawingByTestPackageCivil(Integer testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageCivil", params, GetDrawingByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingByTestPackageCivil(ExportType exportType, Integer testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingByTestPackageCivil", params, exportType, GetDrawingByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilMiscQuantity(UpdateCivilMiscQuantityRequest updateCivilMiscQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Percent", updateCivilMiscQuantityRequest.getPercent());
        params.put("RowID", updateCivilMiscQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSS(UpdateSsRequest updateSsRequest) {
        Map params = new HashMap(4);

        params.put("ActivityStatus", updateSsRequest.getActivityStatus());
        params.put("UserID", updateSsRequest.getUserId());
        params.put("BidID", updateSsRequest.getBidId());
        params.put("FieldActivityID", updateSsRequest.getFieldActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSS", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSupportsQuantity(UpdateSupportsQuantityRequest updateSupportsQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateSupportsQuantityRequest.getQuantity());
        params.put("RowID", updateSupportsQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSupportsQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateOverrideActivityQuantity(UpdateOverrideActivityQuantityRequest updateOverrideActivityQuantityRequest) {
        Map params = new HashMap(2);

        params.put("NewQuantity", updateOverrideActivityQuantityRequest.getNewQuantity());
        params.put("RowID", updateOverrideActivityQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateOverrideActivityQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackagePipeResponse> executeGetQuantitiesTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackagePipe", params, GetQuantitiesTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackagePipe", params, exportType, GetQuantitiesTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelSellPercentResponse> executeGetSettingSteelSellPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelSellPercent", params, GetSettingSteelSellPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelSellPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelSellPercent", params, exportType, GetSettingSteelSellPercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateDemo(UpdateDemoRequest updateDemoRequest) {
        Map params = new HashMap(7);

        params.put("DrawingNumber", updateDemoRequest.getDrawingNumber());
        params.put("LineNumber", updateDemoRequest.getLineNumber());
        params.put("SheetNumber", updateDemoRequest.getSheetNumber());
        params.put("Quantity", updateDemoRequest.getQuantity());
        params.put("Size", updateDemoRequest.getSize());
        params.put("Notes", updateDemoRequest.getNotes());
        params.put("RowID", updateDemoRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateDemo", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateWeld(UpdateWeldRequest updateWeldRequest) {
        Map params = new HashMap(20);

        params.put("Spool1", updateWeldRequest.getSpool1());
        params.put("Spool2", updateWeldRequest.getSpool2());
        params.put("DrawingNumber", updateWeldRequest.getDrawingNumber());
        params.put("LineNumber", updateWeldRequest.getLineNumber());
        params.put("SheetNumber", updateWeldRequest.getSheetNumber());
        params.put("LineSpec", updateWeldRequest.getLineSpec());
        params.put("WeldNumber", updateWeldRequest.getWeldNumber());
        params.put("Stencil", updateWeldRequest.getStencil());
        params.put("Size", updateWeldRequest.getSize());
        params.put("Thickness", updateWeldRequest.getThickness());
        params.put("WeldType", updateWeldRequest.getWeldType());
        params.put("WeldPosition", updateWeldRequest.getWeldPosition());
        params.put("Material", updateWeldRequest.getMaterial());
        params.put("Procedure", updateWeldRequest.getProcedure());
        params.put("Complete", updateWeldRequest.getComplete());
        params.put("Shared", updateWeldRequest.getShared());
        params.put("PercentComplete", updateWeldRequest.getPercentComplete());
        params.put("Rework", updateWeldRequest.getRework());
        params.put("Notes", updateWeldRequest.getNotes());
        params.put("RowID", updateWeldRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateWeld", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityCutPrepInstalledResponse> executeGetQuantityCutPrepInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityCutPrepInstalled", params, GetQuantityCutPrepInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityCutPrepInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityCutPrepInstalled", params, exportType, GetQuantityCutPrepInstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelSellQuantity(UpdateSteelSellQuantityRequest updateSteelSellQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updateSteelSellQuantityRequest.getQuantity());
        params.put("RowID", updateSteelSellQuantityRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSellQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackageCivilResponse> executeGetQuantitiesTestPackageCivil(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageCivil", params, GetQuantitiesTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackageCivil(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackageCivil", params, exportType, GetQuantitiesTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDwrbyDateResponse> executeGetReportDWRByDate(Date beginDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BeginDate", beginDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDWRByDate", params, GetReportDwrbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDWRByDate(ExportType exportType, Date beginDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BeginDate", beginDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDWRByDate", params, exportType, GetReportDwrbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetNoteCountResponse> executeGetNoteCount(Integer psaactivityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.executeNamedQuery("GetNoteCount", params, GetNoteCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetNoteCount(ExportType exportType, Integer psaactivityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.exportNamedQueryData("GetNoteCount", params, exportType, GetNoteCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeTrimResponse> executeGetActivityHistoryPipeTrim(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeTrim", params, GetActivityHistoryPipeTrimResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeTrim(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeTrim", params, exportType, GetActivityHistoryPipeTrimResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprbyDateResponse> executeGetReportDPRByDate(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRByDate", params, GetReportDprbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRByDate(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRByDate", params, exportType, GetReportDprbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelMiscResponse> executeGetActivityHistorySteelMisc(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelMisc", params, GetActivityHistorySteelMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelMisc(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelMisc", params, exportType, GetActivityHistorySteelMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryCivilFaResponse> executeGetActivityHistoryCivilFA(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryCivilFA", params, GetActivityHistoryCivilFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryCivilFA(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryCivilFA", params, exportType, GetActivityHistoryCivilFaResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateErection(UpdateErectionRequest updateErectionRequest) {
        Map params = new HashMap(20);

        params.put("Spool1", updateErectionRequest.getSpool1());
        params.put("Spool1Length", updateErectionRequest.getSpool1length());
        params.put("Spool2", updateErectionRequest.getSpool2());
        params.put("Spool2Length", updateErectionRequest.getSpool2length());
        params.put("Spool3", updateErectionRequest.getSpool3());
        params.put("Spool3Length", updateErectionRequest.getSpool3length());
        params.put("Spool4", updateErectionRequest.getSpool4());
        params.put("Spool4Length", updateErectionRequest.getSpool4length());
        params.put("Spool5", updateErectionRequest.getSpool5());
        params.put("Spool5Length", updateErectionRequest.getSpool5length());
        params.put("Spool6", updateErectionRequest.getSpool6());
        params.put("Spool6Length", updateErectionRequest.getSpool6length());
        params.put("OnCords", updateErectionRequest.getOnCords());
        params.put("DrawingNumber", updateErectionRequest.getDrawingNumber());
        params.put("LineNumber", updateErectionRequest.getLineNumber());
        params.put("SheetNumber", updateErectionRequest.getSheetNumber());
        params.put("Size", updateErectionRequest.getSize());
        params.put("Rework", updateErectionRequest.getRework());
        params.put("Notes", updateErectionRequest.getNotes());
        params.put("RowID", updateErectionRequest.getRowId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateErection", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityTrimInstalledResponse> executeGetQuantityTrimInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityTrimInstalled", params, GetQuantityTrimInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityTrimInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityTrimInstalled", params, exportType, GetQuantityTrimInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeDemoResponse> executeGetActivityHistoryPipeDemo(Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeDemo", params, GetActivityHistoryPipeDemoResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeDemo(ExportType exportType, Integer rowId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeDemo", params, exportType, GetActivityHistoryPipeDemoResponse.class, pageable);
    }

}


