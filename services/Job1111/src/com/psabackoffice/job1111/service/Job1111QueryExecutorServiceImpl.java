/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.models.query.*;

@Service
public class Job1111QueryExecutorServiceImpl implements Job1111QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Job1111QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("Job1111WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistorySteelResponse> executeGetBidWorkHistorySteel(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteel", params, GetBidWorkHistorySteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistorySteel(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistorySteel", params, exportType, GetBidWorkHistorySteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackageSteelResponse> executeGetQuantitiesTestPackageSteel(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageSteel", params, GetQuantitiesTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackageSteel(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackageSteel", params, exportType, GetQuantitiesTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeHydroPercentResponse> executeGetSettingPipeHydroPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeHydroPercent", params, GetSettingPipeHydroPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeHydroPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeHydroPercent", params, exportType, GetSettingPipeHydroPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeErectionResponse> executeGetActivityHistoryPipeErection(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeErection", params, GetActivityHistoryPipeErectionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeErection(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeErection", params, exportType, GetActivityHistoryPipeErectionResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelFA(UpdateSteelFaRequest updateSteelFaRequest) {
        Map params = new HashMap(8);

        params.put("FASortGroup1", updateSteelFaRequest.getFasortGroup1());
        params.put("Piece", updateSteelFaRequest.getPiece());
        params.put("Quantity", updateSteelFaRequest.getQuantity());
        params.put("PercentCompleted", updateSteelFaRequest.getPercentCompleted());
        params.put("Rework", updateSteelFaRequest.getRework());
        params.put("Notes", updateSteelFaRequest.getNotes());
        params.put("ActivityType", updateSteelFaRequest.getActivityType());
        params.put("ActivityID", updateSteelFaRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeWeldResponse> executeGetActivityHistoryPipeWeld(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeWeld", params, GetActivityHistoryPipeWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeWeld(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeWeld", params, exportType, GetActivityHistoryPipeWeldResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingReviewFasResponse> executeGetActivitiesPendingReviewFAs(Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingReviewFAs", params, GetActivitiesPendingReviewFasResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingReviewFAs(ExportType exportType, Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingReviewFAs", params, exportType, GetActivitiesPendingReviewFasResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelDemo(UpdateSteelDemoRequest updateSteelDemoRequest) {
        Map params = new HashMap(4);

        params.put("BidID", updateSteelDemoRequest.getBidId());
        params.put("Percentcompleted", updateSteelDemoRequest.getPercentcompleted());
        params.put("Notes", updateSteelDemoRequest.getNotes());
        params.put("ActivityID", updateSteelDemoRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemo", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackageCivilResponse> executeGetQuantitiesTestPackageCivil(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageCivil", params, GetQuantitiesTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackageCivil(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackageCivil", params, exportType, GetQuantitiesTestPackageCivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateEquipFAQuantity(UpdateEquipFaquantityRequest updateEquipFaquantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateEquipFaquantityRequest.getQuantity());
        params.put("Percent", updateEquipFaquantityRequest.getPercent());
        params.put("ActivityID", updateEquipFaquantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateEquipFAQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingReviewSteelActivitiesResponse> executeGetActivitiesPendingReviewSteelActivities(Integer submissionId, String pieceMark, Integer statusId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("SubmissionID", submissionId);
        params.put("PieceMark", pieceMark);
        params.put("StatusID", statusId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingReviewSteelActivities", params, GetActivitiesPendingReviewSteelActivitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingReviewSteelActivities(ExportType exportType, Integer submissionId, String pieceMark, Integer statusId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("SubmissionID", submissionId);
        params.put("PieceMark", pieceMark);
        params.put("StatusID", statusId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingReviewSteelActivities", params, exportType, GetActivitiesPendingReviewSteelActivitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelImpPercentResponse> executeGetSettingSteelImpPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelImpPercent", params, GetSettingSteelImpPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelImpPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelImpPercent", params, exportType, GetSettingSteelImpPercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelMisc(UpdateSteelMiscRequest updateSteelMiscRequest) {
        Map params = new HashMap(5);

        params.put("BidID", updateSteelMiscRequest.getBidId());
        params.put("PercentCompleted", updateSteelMiscRequest.getPercentCompleted());
        params.put("Rework", updateSteelMiscRequest.getRework());
        params.put("Notes", updateSteelMiscRequest.getNotes());
        params.put("ActivityID", updateSteelMiscRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeMiscQuantity(UpdatePipeMiscQuantityRequest updatePipeMiscQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updatePipeMiscQuantityRequest.getQuantity());
        params.put("ActivityID", updatePipeMiscQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeMiscQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryCivilResponse> executeGetBidWorkHistoryCivil(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryCivil", params, GetBidWorkHistoryCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryCivil(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryCivil", params, exportType, GetBidWorkHistoryCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingByTestPackageSteelResponse> executeGetDrawingByTestPackageSteel(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageSteel", params, GetDrawingByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingByTestPackageSteel(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingByTestPackageSteel", params, exportType, GetDrawingByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityBoltUpInstalledResponse> executeGetQuantityBoltUpInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityBoltUpInstalled", params, GetQuantityBoltUpInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityBoltUpInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityBoltUpInstalled", params, exportType, GetQuantityBoltUpInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelSellPercentResponse> executeGetSettingSteelSellPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelSellPercent", params, GetSettingSteelSellPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelSellPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelSellPercent", params, exportType, GetSettingSteelSellPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryEquipFaResponse> executeGetActivityHistoryEquipFA(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryEquipFA", params, GetActivityHistoryEquipFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryEquipFA(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryEquipFA", params, exportType, GetActivityHistoryEquipFaResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeMisc(UpdatePipeMiscRequest updatePipeMiscRequest) {
        Map params = new HashMap(7);

        params.put("DrawingNumber", updatePipeMiscRequest.getDrawingNumber());
        params.put("LineNumber", updatePipeMiscRequest.getLineNumber());
        params.put("SheetNumber", updatePipeMiscRequest.getSheetNumber());
        params.put("Quantity", updatePipeMiscRequest.getQuantity());
        params.put("Rework", updatePipeMiscRequest.getRework());
        params.put("Notes", updatePipeMiscRequest.getNotes());
        params.put("ActivityID", updatePipeMiscRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeCreateSASNote(CreateSasnoteRequest createSasnoteRequest) {
        Map params = new HashMap(3);

        params.put("ActivityID", createSasnoteRequest.getActivityId());
        params.put("CreatedBy", createSasnoteRequest.getCreatedBy());
        params.put("Note", createSasnoteRequest.getNote());

        return queryExecutor.executeNamedQueryForUpdate("CreateSASNote", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprsteelDetailedResponse> executeGetReportDPRSteelDetailed(String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelDetailed", params, GetReportDprsteelDetailedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRSteelDetailed(ExportType exportType, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRSteelDetailed", params, exportType, GetReportDprsteelDetailedResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeFA(UpdatePipeFaRequest updatePipeFaRequest) {
        Map params = new HashMap(6);

        params.put("BidID", updatePipeFaRequest.getBidId());
        params.put("Quantity", updatePipeFaRequest.getQuantity());
        params.put("Percent", updatePipeFaRequest.getPercent());
        params.put("Rework", updatePipeFaRequest.getRework());
        params.put("Notes", updatePipeFaRequest.getNotes());
        params.put("ActivityID", updatePipeFaRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesSteelResponse> executeGetBidActivityQuantitiesSteel(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesSteel", params, GetBidActivityQuantitiesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesSteel(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesSteel", params, exportType, GetBidActivityQuantitiesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeTestingPercentResponse> executeGetSettingPipeTestingPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeTestingPercent", params, GetSettingPipeTestingPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeTestingPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeTestingPercent", params, exportType, GetSettingPipeTestingPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryEquipResponse> executeGetBidWorkHistoryEquip(String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryEquip", params, GetBidWorkHistoryEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryEquip(ExportType exportType, String bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryEquip", params, exportType, GetBidWorkHistoryEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetNotesByActivityIdResponse> executeGetNotesByActivityID(List<Integer> activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetNotesByActivityID", params, GetNotesByActivityIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetNotesByActivityID(ExportType exportType, List<Integer> activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetNotesByActivityID", params, exportType, GetNotesByActivityIdResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeBoltupQuantity(UpdatePipeBoltupQuantityRequest updatePipeBoltupQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Quantity", updatePipeBoltupQuantityRequest.getQuantity());
        params.put("ActivityID", updatePipeBoltupQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeBoltupQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetPsrecentActivitiesResponse> executeGetPSRecentActivities(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetPSRecentActivities", params, GetPsrecentActivitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetPSRecentActivities(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetPSRecentActivities", params, exportType, GetPsrecentActivitiesResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeErection(UpdatePipeErectionRequest updatePipeErectionRequest) {
        Map params = new HashMap(21);

        params.put("BidID", updatePipeErectionRequest.getBidId());
        params.put("Spool1", updatePipeErectionRequest.getSpool1());
        params.put("Spool1Length", updatePipeErectionRequest.getSpool1length());
        params.put("Spool2", updatePipeErectionRequest.getSpool2());
        params.put("Spool2Length", updatePipeErectionRequest.getSpool2length());
        params.put("Spool3", updatePipeErectionRequest.getSpool3());
        params.put("Spool3Length", updatePipeErectionRequest.getSpool3length());
        params.put("Spool4", updatePipeErectionRequest.getSpool4());
        params.put("Spool4Length", updatePipeErectionRequest.getSpool4length());
        params.put("Spool5", updatePipeErectionRequest.getSpool5());
        params.put("Spool5Length", updatePipeErectionRequest.getSpool5length());
        params.put("Spool6", updatePipeErectionRequest.getSpool6());
        params.put("Spool6Length", updatePipeErectionRequest.getSpool6length());
        params.put("OnCords", updatePipeErectionRequest.getOnCords());
        params.put("DrawingNumber", updatePipeErectionRequest.getDrawingNumber());
        params.put("LineNumber", updatePipeErectionRequest.getLineNumber());
        params.put("SheetNumber", updatePipeErectionRequest.getSheetNumber());
        params.put("Size", updatePipeErectionRequest.getSize());
        params.put("Rework", updatePipeErectionRequest.getRework());
        params.put("Notes", updatePipeErectionRequest.getNotes());
        params.put("ActivityID", updatePipeErectionRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeErection", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeRFTPercent(UpdateSettingPipeRftpercentRequest updateSettingPipeRftpercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeRftpercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeRFTPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingCivilWorkResponse> executeGetSettingCivilWork(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilWork", params, GetSettingCivilWorkResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingCivilWork(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingCivilWork", params, exportType, GetSettingCivilWorkResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeErectionQuantity(UpdatePipeErectionQuantityRequest updatePipeErectionQuantityRequest) {
        Map params = new HashMap(2);

        params.put("Spool1Length", updatePipeErectionQuantityRequest.getSpool1length());
        params.put("ActivityID", updatePipeErectionQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeErectionQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeWeldQuantity(UpdatePipeWeldQuantityRequest updatePipeWeldQuantityRequest) {
        Map params = new HashMap(2);

        params.put("PercentCompleted", updatePipeWeldQuantityRequest.getPercentCompleted());
        params.put("ActivityID", updatePipeWeldQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeWeldQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelMiscResponse> executeGetActivityHistorySteelMisc(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelMisc", params, GetActivityHistorySteelMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelMisc(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelMisc", params, exportType, GetActivityHistorySteelMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeRftpercentResponse> executeGetSettingPipeRFTPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeRFTPercent", params, GetSettingPipeRftpercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeRFTPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeRFTPercent", params, exportType, GetSettingPipeRftpercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeFaResponse> executeGetActivityHistoryPipeFA(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeFA", params, GetActivityHistoryPipeFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeFA(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeFA", params, exportType, GetActivityHistoryPipeFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackageCivilResponse> executeGetBidActivityMatchesByTestPackageCivil(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageCivil", params, GetBidActivityMatchesByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackageCivil(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackageCivil", params, exportType, GetBidActivityMatchesByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesPipeResponse> executeGetBidActivityQuantitiesPipe(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesPipe", params, GetBidActivityQuantitiesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesPipe(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesPipe", params, exportType, GetBidActivityQuantitiesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityMiscInstalledResponse> executeGetQuantityMiscInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityMiscInstalled", params, GetQuantityMiscInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityMiscInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityMiscInstalled", params, exportType, GetQuantityMiscInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelErectPercentResponse> executeGetSettingSteelErectPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelErectPercent", params, GetSettingSteelErectPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelErectPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelErectPercent", params, exportType, GetSettingSteelErectPercentResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelMiscQuantity(UpdateSteelMiscQuantityRequest updateSteelMiscQuantityRequest) {
        Map params = new HashMap(2);

        params.put("PercentCompleted", updateSteelMiscQuantityRequest.getPercentCompleted());
        params.put("ActivityID", updateSteelMiscQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingCivilPunch(UpdateSettingCivilPunchRequest updateSettingCivilPunchRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingCivilPunchRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilPunch", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityLfinstalledByActivityIdResponse> executeGetQuantityLFInstalledByActivityID(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityId", activityId);

        return queryExecutor.executeNamedQuery("GetQuantityLFInstalledByActivityID", params, GetQuantityLfinstalledByActivityIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityLFInstalledByActivityID(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityId", activityId);

        return queryExecutor.exportNamedQueryData("GetQuantityLFInstalledByActivityID", params, exportType, GetQuantityLfinstalledByActivityIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryStatusResponse> executeGetActivityHistoryStatus(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryStatus", params, GetActivityHistoryStatusResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryStatus(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryStatus", params, exportType, GetActivityHistoryStatusResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSASStatus(UpdateSasstatusRequest updateSasstatusRequest) {
        Map params = new HashMap(3);

        params.put("ActivityStatusID", updateSasstatusRequest.getActivityStatusId());
        params.put("UserID", updateSasstatusRequest.getUserId());
        params.put("ActivityID", updateSasstatusRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSASStatus", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitesEquipResponse> executeGetBidActivityQuantitesEquip(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitesEquip", params, GetBidActivityQuantitesEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitesEquip(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitesEquip", params, exportType, GetBidActivityQuantitesEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeMiscResponse> executeGetActivityHistoryPipeMisc(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeMisc", params, GetActivityHistoryPipeMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeMisc(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeMisc", params, exportType, GetActivityHistoryPipeMiscResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelDemoResponse> executeGetActivityHistorySteelDemo(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelDemo", params, GetActivityHistorySteelDemoResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelDemo(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelDemo", params, exportType, GetActivityHistorySteelDemoResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeCTOPercent(UpdateSettingPipeCtopercentRequest updateSettingPipeCtopercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeCtopercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeCTOPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesPipeResponse> executeGetBidActivityMatchesPipe(Integer bidId, String lineNumber, String drawingNumber, String sheetNumber, String activityType, String activitySubType, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("BidID", bidId);
        params.put("LineNumber", lineNumber);
        params.put("DrawingNumber", drawingNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("ActivityType", activityType);
        params.put("ActivitySubType", activitySubType);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesPipe", params, GetBidActivityMatchesPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesPipe(ExportType exportType, Integer bidId, String lineNumber, String drawingNumber, String sheetNumber, String activityType, String activitySubType, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("BidID", bidId);
        params.put("LineNumber", lineNumber);
        params.put("DrawingNumber", drawingNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("ActivityType", activityType);
        params.put("ActivitySubType", activitySubType);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesPipe", params, exportType, GetBidActivityMatchesPipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeWeld(UpdatePipeWeldRequest updatePipeWeldRequest) {
        Map params = new HashMap(20);

        params.put("Spool1", updatePipeWeldRequest.getSpool1());
        params.put("Spool2", updatePipeWeldRequest.getSpool2());
        params.put("DrawingNumber", updatePipeWeldRequest.getDrawingNumber());
        params.put("LineNumber", updatePipeWeldRequest.getLineNumber());
        params.put("SheetNumber", updatePipeWeldRequest.getSheetNumber());
        params.put("LineSpec", updatePipeWeldRequest.getLineSpec());
        params.put("WeldNumber", updatePipeWeldRequest.getWeldNumber());
        params.put("Stencil", updatePipeWeldRequest.getStencil());
        params.put("Size", updatePipeWeldRequest.getSize());
        params.put("Thickness", updatePipeWeldRequest.getThickness());
        params.put("WeldType", updatePipeWeldRequest.getWeldType());
        params.put("WeldPosition", updatePipeWeldRequest.getWeldPosition());
        params.put("Material", updatePipeWeldRequest.getMaterial());
        params.put("Procedure", updatePipeWeldRequest.getProcedure());
        params.put("Complete", updatePipeWeldRequest.getComplete());
        params.put("Shared", updatePipeWeldRequest.getShared());
        params.put("PercentCompleted", updatePipeWeldRequest.getPercentCompleted());
        params.put("Rework", updatePipeWeldRequest.getRework());
        params.put("Notes", updatePipeWeldRequest.getNotes());
        params.put("FieldActivityID", updatePipeWeldRequest.getFieldActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeWeld", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesSteelResponse> executeGetBidActivityMatchesSteel(Integer bidId, String sortGroup1, String pieceMark, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("BidID", bidId);
        params.put("SortGroup1", sortGroup1);
        params.put("PieceMark", pieceMark);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesSteel", params, GetBidActivityMatchesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesSteel(ExportType exportType, Integer bidId, String sortGroup1, String pieceMark, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("BidID", bidId);
        params.put("SortGroup1", sortGroup1);
        params.put("PieceMark", pieceMark);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesSteel", params, exportType, GetBidActivityMatchesSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityLfinstalledByBidIdResponse> executeGetQuantityLFInstalledByBidID(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityLFInstalledByBidID", params, GetQuantityLfinstalledByBidIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityLFInstalledByBidID(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityLFInstalledByBidID", params, exportType, GetQuantityLfinstalledByBidIdResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingCivilWork(UpdateSettingCivilWorkRequest updateSettingCivilWorkRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingCivilWorkRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilWork", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetNoteCountResponse> executeGetNoteCount(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetNoteCount", params, GetNoteCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetNoteCount(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetNoteCount", params, exportType, GetNoteCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDwrbyDateResponse> executeGetReportDWRByDate(Date beginDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BeginDate", beginDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDWRByDate", params, GetReportDwrbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDWRByDate(ExportType exportType, Date beginDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BeginDate", beginDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDWRByDate", params, exportType, GetReportDwrbyDateResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingProductivityIntervalsResponse> executeGetSettingProductivityIntervals(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingProductivityIntervals", params, GetSettingProductivityIntervalsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingProductivityIntervals(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingProductivityIntervals", params, exportType, GetSettingProductivityIntervalsResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelSell(UpdateSettingSteelSellRequest updateSettingSteelSellRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelSellRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelSell", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitySupportsInstalledResponse> executeGetQuantitySupportsInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantitySupportsInstalled", params, GetQuantitySupportsInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitySupportsInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantitySupportsInstalled", params, exportType, GetQuantitySupportsInstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelShake(UpdateSettingSteelShakeRequest updateSettingSteelShakeRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelShakeRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelShake", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityCutPrepInstalledResponse> executeGetQuantityCutPrepInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityCutPrepInstalled", params, GetQuantityCutPrepInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityCutPrepInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityCutPrepInstalled", params, exportType, GetQuantityCutPrepInstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateEquipFA(UpdateEquipFaRequest updateEquipFaRequest) {
        Map params = new HashMap(6);

        params.put("BidID", updateEquipFaRequest.getBidId());
        params.put("Quantity", updateEquipFaRequest.getQuantity());
        params.put("Percent", updateEquipFaRequest.getPercent());
        params.put("Rework", updateEquipFaRequest.getRework());
        params.put("Notes", updateEquipFaRequest.getNotes());
        params.put("ActivityID", updateEquipFaRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateEquipFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistorySteelFaResponse> executeGetActivityHistorySteelFA(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelFA", params, GetActivityHistorySteelFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistorySteelFA(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistorySteelFA", params, exportType, GetActivityHistorySteelFaResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelErect(UpdateSettingSteelErectRequest updateSettingSteelErectRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelErectRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelErect", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeConnectionResponse> executeGetActivityHistoryPipeConnection(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeConnection", params, GetActivityHistoryPipeConnectionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeConnection(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeConnection", params, exportType, GetActivityHistoryPipeConnectionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantitiesTestPackagePipeResponse> executeGetQuantitiesTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackagePipe", params, GetQuantitiesTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantitiesTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetQuantitiesTestPackagePipe", params, exportType, GetQuantitiesTestPackagePipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeHydroPercent(UpdateSettingPipeHydroPercentRequest updateSettingPipeHydroPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeHydroPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeHydroPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprsteelCondensedResponse> executeGetReportDPRSteelCondensed(String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelCondensed", params, GetReportDprsteelCondensedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRSteelCondensed(ExportType exportType, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRSteelCondensed", params, exportType, GetReportDprsteelCondensedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingApprovalResponse> executeGetActivitiesPendingApproval(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingApproval", params, GetActivitiesPendingApprovalResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingApproval(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingApproval", params, exportType, GetActivitiesPendingApprovalResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeCtopercentResponse> executeGetSettingPipeCTOPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeCTOPercent", params, GetSettingPipeCtopercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeCTOPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeCTOPercent", params, exportType, GetSettingPipeCtopercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityTrimInstalledResponse> executeGetQuantityTrimInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityTrimInstalled", params, GetQuantityTrimInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityTrimInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityTrimInstalled", params, exportType, GetQuantityTrimInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryCivilFaResponse> executeGetActivityHistoryCivilFA(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryCivilFA", params, GetActivityHistoryCivilFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryCivilFA(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryCivilFA", params, exportType, GetActivityHistoryCivilFaResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprequipResponse> executeGetReportDPREquip(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPREquip", params, GetReportDprequipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPREquip(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPREquip", params, exportType, GetReportDprequipResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelImp(UpdateSettingSteelImpRequest updateSettingSteelImpRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelImpRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelImp", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingCivilPunchResponse> executeGetSettingCivilPunch(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilPunch", params, GetSettingCivilPunchResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingCivilPunch(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingCivilPunch", params, exportType, GetSettingCivilPunchResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprpipeResponse> executeGetReportDPRPipe(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRPipe", params, GetReportDprpipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRPipe(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRPipe", params, exportType, GetReportDprpipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeBoltUp(UpdatePipeBoltUpRequest updatePipeBoltUpRequest) {
        Map params = new HashMap(11);

        params.put("BidID", updatePipeBoltUpRequest.getBidId());
        params.put("Spool1", updatePipeBoltUpRequest.getSpool1());
        params.put("Spool2", updatePipeBoltUpRequest.getSpool2());
        params.put("DrawingNumber", updatePipeBoltUpRequest.getDrawingNumber());
        params.put("LineNumber", updatePipeBoltUpRequest.getLineNumber());
        params.put("SheetNumber", updatePipeBoltUpRequest.getSheetNumber());
        params.put("Size", updatePipeBoltUpRequest.getSize());
        params.put("Quantity", updatePipeBoltUpRequest.getQuantity());
        params.put("Rework", updatePipeBoltUpRequest.getRework());
        params.put("Notes", updatePipeBoltUpRequest.getNotes());
        params.put("ActivityID", updatePipeBoltUpRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeBoltUp", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilFA(UpdateCivilFaRequest updateCivilFaRequest) {
        Map params = new HashMap(6);

        params.put("BidID", updateCivilFaRequest.getBidId());
        params.put("Quantity", updateCivilFaRequest.getQuantity());
        params.put("Percent", updateCivilFaRequest.getPercent());
        params.put("Rework", updateCivilFaRequest.getRework());
        params.put("Notes", updateCivilFaRequest.getNotes());
        params.put("ActivityID", updateCivilFaRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistorySteelExpandedResponse> executeGetBidWorkHistorySteelExpanded(Integer bidId, Integer submissionId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BidID", bidId);
        params.put("SubmissionID", submissionId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteelExpanded", params, GetBidWorkHistorySteelExpandedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistorySteelExpanded(ExportType exportType, Integer bidId, Integer submissionId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("BidID", bidId);
        params.put("SubmissionID", submissionId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistorySteelExpanded", params, exportType, GetBidWorkHistorySteelExpandedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSuperRecentActivitesResponse> executeGetSuperRecentActivites(Integer userId, Integer selectedSuper, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("SelectedSuper", selectedSuper);

        return queryExecutor.executeNamedQuery("GetSuperRecentActivites", params, GetSuperRecentActivitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSuperRecentActivites(ExportType exportType, Integer userId, Integer selectedSuper, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("SelectedSuper", selectedSuper);

        return queryExecutor.exportNamedQueryData("GetSuperRecentActivites", params, exportType, GetSuperRecentActivitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetReportDprcivilResponse> executeGetReportDPRCivil(String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRCivil", params, GetReportDprcivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetReportDPRCivil(ExportType exportType, String foremanId, String superId, String managerId, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.exportNamedQueryData("GetReportDPRCivil", params, exportType, GetReportDprcivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeMechPercent(UpdateSettingPipeMechPercentRequest updateSettingPipeMechPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeMechPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeMechPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesCivilResponse> executeGetBidActivityMatchesCivil(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesCivil", params, GetBidActivityMatchesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesCivil(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesCivil", params, exportType, GetBidActivityMatchesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivitiesPendingReviewSteelResponse> executeGetActivitiesPendingReviewSteel(Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingReviewSteel", params, GetActivitiesPendingReviewSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivitiesPendingReviewSteel(ExportType exportType, Integer superId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.exportNamedQueryData("GetActivitiesPendingReviewSteel", params, exportType, GetActivitiesPendingReviewSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityDemoRemovedResponse> executeGetQuantityDemoRemoved(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityDemoRemoved", params, GetQuantityDemoRemovedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityDemoRemoved(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityDemoRemoved", params, exportType, GetQuantityDemoRemovedResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilFAQuantity(UpdateCivilFaquantityRequest updateCivilFaquantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateCivilFaquantityRequest.getQuantity());
        params.put("Percent", updateCivilFaquantityRequest.getPercent());
        params.put("ActivityID", updateCivilFaquantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFAQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingPipeTestingPercent(UpdateSettingPipeTestingPercentRequest updateSettingPipeTestingPercentRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingPipeTestingPercentRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeTestingPercent", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateCivilSellPackage(UpdateCivilSellPackageRequest updateCivilSellPackageRequest) {
        Map params = new HashMap(3);

        params.put("TestPackageNumber", updateCivilSellPackageRequest.getTestPackageNumber());
        params.put("Notes", updateCivilSellPackageRequest.getNotes());
        params.put("ActivityID", updateCivilSellPackageRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilSellPackage", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingPipeMechPercentResponse> executeGetSettingPipeMechPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeMechPercent", params, GetSettingPipeMechPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingPipeMechPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingPipeMechPercent", params, exportType, GetSettingPipeMechPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetQuantityWeldInstalledResponse> executeGetQuantityWeldInstalled(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityWeldInstalled", params, GetQuantityWeldInstalledResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetQuantityWeldInstalled(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetQuantityWeldInstalled", params, exportType, GetQuantityWeldInstalledResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelFAQuantity(UpdateSteelFaquantityRequest updateSteelFaquantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updateSteelFaquantityRequest.getQuantity());
        params.put("PercentCompleted", updateSteelFaquantityRequest.getPercentCompleted());
        params.put("ActivityID", updateSteelFaquantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelFAQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesEquipResponse> executeGetBidActivityMatchesEquip(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesEquip", params, GetBidActivityMatchesEquipResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesEquip(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesEquip", params, exportType, GetBidActivityMatchesEquipResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSASBidID(UpdateSasbidIdRequest updateSasbidIdRequest) {
        Map params = new HashMap(4);

        params.put("ActivityStatusID", updateSasbidIdRequest.getActivityStatusId());
        params.put("UserID", updateSasbidIdRequest.getUserId());
        params.put("BidID", updateSasbidIdRequest.getBidId());
        params.put("ActivityID", updateSasbidIdRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSASBidID", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelBoltoutPercentResponse> executeGetSettingSteelBoltoutPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelBoltoutPercent", params, GetSettingSteelBoltoutPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelBoltoutPercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelBoltoutPercent", params, exportType, GetSettingSteelBoltoutPercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingsByTestPackagePipeResponse> executeGetDrawingsByTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingsByTestPackagePipe", params, GetDrawingsByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingsByTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingsByTestPackagePipe", params, exportType, GetDrawingsByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSettingSteelShakePercentResponse> executeGetSettingSteelShakePercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelShakePercent", params, GetSettingSteelShakePercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSettingSteelShakePercent(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("GetSettingSteelShakePercent", params, exportType, GetSettingSteelShakePercentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackageSteelResponse> executeGetBidActivityMatchesByTestPackageSteel(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageSteel", params, GetBidActivityMatchesByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackageSteel(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackageSteel", params, exportType, GetBidActivityMatchesByTestPackageSteelResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityMatchesByTestPackagePipeResponse> executeGetBidActivityMatchesByTestPackagePipe(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackagePipe", params, GetBidActivityMatchesByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityMatchesByTestPackagePipe(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetBidActivityMatchesByTestPackagePipe", params, exportType, GetBidActivityMatchesByTestPackagePipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeFAQuantity(UpdatePipeFaquantityRequest updatePipeFaquantityRequest) {
        Map params = new HashMap(3);

        params.put("Quantity", updatePipeFaquantityRequest.getQuantity());
        params.put("Percent", updatePipeFaquantityRequest.getPercent());
        params.put("ActivityID", updatePipeFaquantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeFAQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidWorkHistoryPipeResponse> executeGetBidWorkHistoryPipe(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryPipe", params, GetBidWorkHistoryPipeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidWorkHistoryPipe(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidWorkHistoryPipe", params, exportType, GetBidWorkHistoryPipeResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelDemoQuantity(UpdateSteelDemoQuantityRequest updateSteelDemoQuantityRequest) {
        Map params = new HashMap(2);

        params.put("PercentCompleted", updateSteelDemoQuantityRequest.getPercentCompleted());
        params.put("ActivityID", updateSteelDemoQuantityRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemoQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetActivityHistoryPipeTestingResponse> executeGetActivityHistoryPipeTesting(Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeTesting", params, GetActivityHistoryPipeTestingResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetActivityHistoryPipeTesting(ExportType exportType, Integer activityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.exportNamedQueryData("GetActivityHistoryPipeTesting", params, exportType, GetActivityHistoryPipeTestingResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdatePipeTesting(UpdatePipeTestingRequest updatePipeTestingRequest) {
        Map params = new HashMap(4);

        params.put("TestPackageNumber", updatePipeTestingRequest.getTestPackageNumber());
        params.put("Rework", updatePipeTestingRequest.getRework());
        params.put("Notes", updatePipeTestingRequest.getNotes());
        params.put("ActivityID", updatePipeTestingRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePipeTesting", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetDrawingByTestPackageCivilResponse> executeGetDrawingByTestPackageCivil(String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageCivil", params, GetDrawingByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetDrawingByTestPackageCivil(ExportType exportType, String testPackage, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.exportNamedQueryData("GetDrawingByTestPackageCivil", params, exportType, GetDrawingByTestPackageCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetBidActivityQuantitiesCivilResponse> executeGetBidActivityQuantitiesCivil(Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesCivil", params, GetBidActivityQuantitiesCivilResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetBidActivityQuantitiesCivil(ExportType exportType, Integer bidId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.exportNamedQueryData("GetBidActivityQuantitiesCivil", params, exportType, GetBidActivityQuantitiesCivilResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSteelSellPackage(UpdateSteelSellPackageRequest updateSteelSellPackageRequest) {
        Map params = new HashMap(3);

        params.put("TestPackage", updateSteelSellPackageRequest.getTestPackage());
        params.put("Notes", updateSteelSellPackageRequest.getNotes());
        params.put("ActivityID", updateSteelSellPackageRequest.getActivityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSellPackage", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<GetSubDetailsSuperResponse> executeGetSubDetailsSuper(Integer submissionId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SubmissionID", submissionId);

        return queryExecutor.executeNamedQuery("GetSubDetailsSuper", params, GetSubDetailsSuperResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable exportGetSubDetailsSuper(ExportType exportType, Integer submissionId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("SubmissionID", submissionId);

        return queryExecutor.exportNamedQueryData("GetSubDetailsSuper", params, exportType, GetSubDetailsSuperResponse.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public Integer executeUpdateSettingSteelBoltout(UpdateSettingSteelBoltoutRequest updateSettingSteelBoltoutRequest) {
        Map params = new HashMap(1);

        params.put("Value1", updateSettingSteelBoltoutRequest.getValue1());

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelBoltout", params);
    }

}


