/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.SteelShakeRev;


/**
 * ServiceImpl object for domain model class SteelShakeRev.
 *
 * @see SteelShakeRev
 */
@Service("Job1111.SteelShakeRevService")
public class SteelShakeRevServiceImpl implements SteelShakeRevService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SteelShakeRevServiceImpl.class);


    @Autowired
    @Qualifier("Job1111.SteelShakeRevDao")
    private WMGenericDao<SteelShakeRev, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SteelShakeRev, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SteelShakeRev create(SteelShakeRev steelShakeRev) {
        LOGGER.debug("Creating a new SteelShakeRev with information: {}", steelShakeRev);
        SteelShakeRev steelShakeRevCreated = this.wmGenericDao.create(steelShakeRev);
        return steelShakeRevCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SteelShakeRev getById(Integer steelshakerevId) throws EntityNotFoundException {
        LOGGER.debug("Finding SteelShakeRev by id: {}", steelshakerevId);
        SteelShakeRev steelShakeRev = this.wmGenericDao.findById(steelshakerevId);
        if (steelShakeRev == null){
            LOGGER.debug("No SteelShakeRev found with id: {}", steelshakerevId);
            throw new EntityNotFoundException(String.valueOf(steelshakerevId));
        }
        return steelShakeRev;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SteelShakeRev findById(Integer steelshakerevId) {
        LOGGER.debug("Finding SteelShakeRev by id: {}", steelshakerevId);
        return this.wmGenericDao.findById(steelshakerevId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SteelShakeRev update(SteelShakeRev steelShakeRev) throws EntityNotFoundException {
        LOGGER.debug("Updating SteelShakeRev with information: {}", steelShakeRev);
        this.wmGenericDao.update(steelShakeRev);

        Integer steelshakerevId = steelShakeRev.getId();

        return this.wmGenericDao.findById(steelshakerevId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SteelShakeRev delete(Integer steelshakerevId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SteelShakeRev with id: {}", steelshakerevId);
        SteelShakeRev deleted = this.wmGenericDao.findById(steelshakerevId);
        if (deleted == null) {
            LOGGER.debug("No SteelShakeRev found with id: {}", steelshakerevId);
            throw new EntityNotFoundException(String.valueOf(steelshakerevId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SteelShakeRev> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SteelShakeRevs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelShakeRev> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SteelShakeRevs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SteelShakeRev to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

