/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.SubsTesting;
import com.psabackoffice.job1111.SubsTestingRev;


/**
 * ServiceImpl object for domain model class SubsTesting.
 *
 * @see SubsTesting
 */
@Service("Job1111.SubsTestingService")
public class SubsTestingServiceImpl implements SubsTestingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsTestingServiceImpl.class);

    @Autowired
	@Qualifier("Job1111.SubsTestingRevService")
	private SubsTestingRevService subsTestingRevService;

    @Autowired
    @Qualifier("Job1111.SubsTestingDao")
    private WMGenericDao<SubsTesting, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubsTesting, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubsTesting create(SubsTesting subsTesting) {
        LOGGER.debug("Creating a new SubsTesting with information: {}", subsTesting);
        SubsTesting subsTestingCreated = this.wmGenericDao.create(subsTesting);
        if(subsTestingCreated.getSubsTestingRevs() != null) {
            for(SubsTestingRev subsTestingRev : subsTestingCreated.getSubsTestingRevs()) {
                subsTestingRev.setSubsTesting(subsTestingCreated);
                LOGGER.debug("Creating a new child SubsTestingRev with information: {}", subsTestingRev);
                subsTestingRevService.create(subsTestingRev);
            }
        }
        return subsTestingCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsTesting getById(Integer substestingId) throws EntityNotFoundException {
        LOGGER.debug("Finding SubsTesting by id: {}", substestingId);
        SubsTesting subsTesting = this.wmGenericDao.findById(substestingId);
        if (subsTesting == null){
            LOGGER.debug("No SubsTesting found with id: {}", substestingId);
            throw new EntityNotFoundException(String.valueOf(substestingId));
        }
        return subsTesting;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsTesting findById(Integer substestingId) {
        LOGGER.debug("Finding SubsTesting by id: {}", substestingId);
        return this.wmGenericDao.findById(substestingId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubsTesting update(SubsTesting subsTesting) throws EntityNotFoundException {
        LOGGER.debug("Updating SubsTesting with information: {}", subsTesting);
        this.wmGenericDao.update(subsTesting);

        Integer substestingId = subsTesting.getId();

        return this.wmGenericDao.findById(substestingId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubsTesting delete(Integer substestingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsTesting with id: {}", substestingId);
        SubsTesting deleted = this.wmGenericDao.findById(substestingId);
        if (deleted == null) {
            LOGGER.debug("No SubsTesting found with id: {}", substestingId);
            throw new EntityNotFoundException(String.valueOf(substestingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubsTesting> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubsTestings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsTesting> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubsTestings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubsTesting to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsTestingRev> findAssociatedSubsTestingRevs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsTestingRevs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsTesting.id = '" + id + "'");

        return subsTestingRevService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsTestingRevService instance
	 */
	protected void setSubsTestingRevService(SubsTestingRevService service) {
        this.subsTestingRevService = service;
    }

}

