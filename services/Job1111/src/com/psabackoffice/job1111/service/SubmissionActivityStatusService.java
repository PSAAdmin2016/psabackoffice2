/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.CivilFa;
import com.psabackoffice.job1111.CivilMisc;
import com.psabackoffice.job1111.CivilSellPackage;
import com.psabackoffice.job1111.EquipFa;
import com.psabackoffice.job1111.PipeBoltUp;
import com.psabackoffice.job1111.PipeWeld;
import com.psabackoffice.job1111.SteelBoltOut;
import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelErect;
import com.psabackoffice.job1111.SteelImp;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelSell;
import com.psabackoffice.job1111.SteelSellPackage;
import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.SubmissionActivityStatus;

/**
 * Service object for domain model class {@link SubmissionActivityStatus}.
 */
public interface SubmissionActivityStatusService {

    /**
     * Creates a new SubmissionActivityStatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SubmissionActivityStatus if any.
     *
     * @param submissionActivityStatus Details of the SubmissionActivityStatus to be created; value cannot be null.
     * @return The newly created SubmissionActivityStatus.
     */
	SubmissionActivityStatus create(SubmissionActivityStatus submissionActivityStatus);


	/**
	 * Returns SubmissionActivityStatus by given id if exists.
	 *
	 * @param submissionactivitystatusId The id of the SubmissionActivityStatus to get; value cannot be null.
	 * @return SubmissionActivityStatus associated with the given submissionactivitystatusId.
     * @throws EntityNotFoundException If no SubmissionActivityStatus is found.
	 */
	SubmissionActivityStatus getById(Integer submissionactivitystatusId) throws EntityNotFoundException;

    /**
	 * Find and return the SubmissionActivityStatus by given id if exists, returns null otherwise.
	 *
	 * @param submissionactivitystatusId The id of the SubmissionActivityStatus to get; value cannot be null.
	 * @return SubmissionActivityStatus associated with the given submissionactivitystatusId.
	 */
	SubmissionActivityStatus findById(Integer submissionactivitystatusId);


	/**
	 * Updates the details of an existing SubmissionActivityStatus. It replaces all fields of the existing SubmissionActivityStatus with the given submissionActivityStatus.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on SubmissionActivityStatus if any.
     *
	 * @param submissionActivityStatus The details of the SubmissionActivityStatus to be updated; value cannot be null.
	 * @return The updated SubmissionActivityStatus.
	 * @throws EntityNotFoundException if no SubmissionActivityStatus is found with given input.
	 */
	SubmissionActivityStatus update(SubmissionActivityStatus submissionActivityStatus) throws EntityNotFoundException;

    /**
	 * Deletes an existing SubmissionActivityStatus with the given id.
	 *
	 * @param submissionactivitystatusId The id of the SubmissionActivityStatus to be deleted; value cannot be null.
	 * @return The deleted SubmissionActivityStatus.
	 * @throws EntityNotFoundException if no SubmissionActivityStatus found with the given id.
	 */
	SubmissionActivityStatus delete(Integer submissionactivitystatusId) throws EntityNotFoundException;

	/**
	 * Find all SubmissionActivityStatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SubmissionActivityStatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<SubmissionActivityStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all SubmissionActivityStatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SubmissionActivityStatuses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<SubmissionActivityStatus> findAll(String query, Pageable pageable);

    /**
	 * Exports all SubmissionActivityStatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the SubmissionActivityStatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the SubmissionActivityStatus.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated civilFas for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CivilFa instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CivilFa> findAssociatedCivilFas(Integer activityId, Pageable pageable);

    /*
     * Returns the associated civilMiscs for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CivilMisc instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CivilMisc> findAssociatedCivilMiscs(Integer activityId, Pageable pageable);

    /*
     * Returns the associated civilSellPackages for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CivilSellPackage instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CivilSellPackage> findAssociatedCivilSellPackages(Integer activityId, Pageable pageable);

    /*
     * Returns the associated equipFas for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EquipFa instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EquipFa> findAssociatedEquipFas(Integer activityId, Pageable pageable);

    /*
     * Returns the associated pipeBoltUps for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PipeBoltUp instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PipeBoltUp> findAssociatedPipeBoltUps(Integer activityId, Pageable pageable);

    /*
     * Returns the associated pipeWelds for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PipeWeld instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PipeWeld> findAssociatedPipeWelds(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelBoltOuts for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelBoltOut instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelBoltOut> findAssociatedSteelBoltOuts(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelDemos for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelDemo instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelDemo> findAssociatedSteelDemos(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelErects for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelErect instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelErect> findAssociatedSteelErects(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelImps for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelImp instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelImp> findAssociatedSteelImps(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelMiscs for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelMisc instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelMisc> findAssociatedSteelMiscs(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelSells for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelSell instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelSell> findAssociatedSteelSells(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelSellPackages for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelSellPackage instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelSellPackage> findAssociatedSteelSellPackages(Integer activityId, Pageable pageable);

    /*
     * Returns the associated steelShakes for given SubmissionActivityStatus id.
     *
     * @param activityId value of activityId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SteelShake instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SteelShake> findAssociatedSteelShakes(Integer activityId, Pageable pageable);

}

