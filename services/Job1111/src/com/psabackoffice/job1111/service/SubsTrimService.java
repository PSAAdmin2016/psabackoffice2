/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.SubsTrim;
import com.psabackoffice.job1111.SubsTrimRev;

/**
 * Service object for domain model class {@link SubsTrim}.
 */
public interface SubsTrimService {

    /**
     * Creates a new SubsTrim. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SubsTrim if any.
     *
     * @param subsTrim Details of the SubsTrim to be created; value cannot be null.
     * @return The newly created SubsTrim.
     */
	SubsTrim create(SubsTrim subsTrim);


	/**
	 * Returns SubsTrim by given id if exists.
	 *
	 * @param substrimId The id of the SubsTrim to get; value cannot be null.
	 * @return SubsTrim associated with the given substrimId.
     * @throws EntityNotFoundException If no SubsTrim is found.
	 */
	SubsTrim getById(Integer substrimId) throws EntityNotFoundException;

    /**
	 * Find and return the SubsTrim by given id if exists, returns null otherwise.
	 *
	 * @param substrimId The id of the SubsTrim to get; value cannot be null.
	 * @return SubsTrim associated with the given substrimId.
	 */
	SubsTrim findById(Integer substrimId);


	/**
	 * Updates the details of an existing SubsTrim. It replaces all fields of the existing SubsTrim with the given subsTrim.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on SubsTrim if any.
     *
	 * @param subsTrim The details of the SubsTrim to be updated; value cannot be null.
	 * @return The updated SubsTrim.
	 * @throws EntityNotFoundException if no SubsTrim is found with given input.
	 */
	SubsTrim update(SubsTrim subsTrim) throws EntityNotFoundException;

    /**
	 * Deletes an existing SubsTrim with the given id.
	 *
	 * @param substrimId The id of the SubsTrim to be deleted; value cannot be null.
	 * @return The deleted SubsTrim.
	 * @throws EntityNotFoundException if no SubsTrim found with the given id.
	 */
	SubsTrim delete(Integer substrimId) throws EntityNotFoundException;

	/**
	 * Find all SubsTrims matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SubsTrims.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<SubsTrim> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all SubsTrims matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SubsTrims.
     *
     * @see Pageable
     * @see Page
	 */
    Page<SubsTrim> findAll(String query, Pageable pageable);

    /**
	 * Exports all SubsTrims matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the SubsTrims in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the SubsTrim.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated subsTrimRevs for given SubsTrim id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SubsTrimRev instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SubsTrimRev> findAssociatedSubsTrimRevs(Integer id, Pageable pageable);

}

