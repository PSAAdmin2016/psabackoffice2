/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/

package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.models.query.*;

@Service
public class Job1111QueryExecutorServiceImpl_V1 implements Job1111QueryExecutorService_V1 {

    private static final Logger LOGGER = LoggerFactory.getLogger(Job1111QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("Job1111WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCivilSellPackage(String testPackageNumber, String notes, Integer rowId) {
        Map params = new HashMap(3);

        params.put("TestPackageNumber", testPackageNumber);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilSellPackage", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSuperRecentActivites(Pageable pageable, Integer userId, Integer selectedSuper) {
        Map params = new HashMap(2);

        params.put("UserID", userId);
        params.put("SelectedSuper", selectedSuper);

        return queryExecutor.executeNamedQuery("GetSuperRecentActivites", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetErectionTotal(Pageable pageable, Integer activityId) {
        Map params = new HashMap(1);

        params.put("ActivityId", activityId);

        return queryExecutor.executeNamedQuery("GetErectionTotal", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingSteelShake(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelShake", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelErect(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelErect", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityWeldInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityWeldInstalled", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidWorkHistorySteelExpanded(Pageable pageable, Integer bidId, Integer subId) {
        Map params = new HashMap(2);

        params.put("BidID", bidId);
        params.put("SubID", subId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteelExpanded", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingPipeRFTPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeRFTPercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelImpQuantity(Integer quantity, BigDecimal percent, Integer rowId) {
        Map params = new HashMap(3);

        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelImpQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateTrim(BigDecimal size, Integer plugQuantity, String handleType, String instType, String drawingNumber, String lineNumber, String sheetNumber, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(10);

        params.put("Size", size);
        params.put("PlugQuantity", plugQuantity);
        params.put("HandleType", handleType);
        params.put("InstType", instType);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowId", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateTrim", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeBoltup(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeBoltup", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesByTestPackagePipe(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackagePipe", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelShake(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelShake", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelWeld(String area, String piece, Integer quantity, BigDecimal percent, Character rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelWeld", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingCivilPunch(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilPunch", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelMiscQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateMisc(String drawingNumber, String lineNumber, String sheetNumber, Integer quantity, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelMisc(String area, String piece, Integer quantity, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(6);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelMisc", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelDemoQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemoQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelDemo(String area, Integer steelType, String size, Integer quantity, String notes, Integer rowId) {
        Map params = new HashMap(6);

        params.put("Area", area);
        params.put("SteelType", steelType);
        params.put("Size", size);
        params.put("Quantity", quantity);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelDemo", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateBoltupQuantity(Integer boltUpQuantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("BoltUpQuantity", boltUpQuantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateBoltupQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidWorkHistoryPipe(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryPipe", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeWeld(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeWeld", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetReportDPRSteelCondensed(Pageable pageable, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelCondensed", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelBoltout(String area, String piece, Integer quantity, BigDecimal percent, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelBoltout", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetUniqueDrawingNumber(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetUniqueDrawingNumber", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSubDetails(String temp, String precipitation, String wind, Integer submissionId) {
        Map params = new HashMap(4);

        params.put("Temp", temp);
        params.put("Precipitation", precipitation);
        params.put("Wind", wind);
        params.put("SubmissionID", submissionId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSubDetails", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUnLockSSActivity(Integer psaactivityId) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.executeNamedQueryForUpdate("UnLockSSActivity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingSteelImpPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelImpPercent", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesByTestPackageCivil(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageCivil", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingCivilWork(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingCivilWork", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetPSAActivityByUid(Pageable pageable, Integer superId) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetPSAActivityByUid", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityQuantitiesPipe(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesPipe", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetUniqueLineNumbers(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetUniqueLineNumbers", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantitiesTestPackageSteel(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageSteel", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeSupport(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeSupport", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelErectQuantity(Integer quantity, BigDecimal percent, Integer rowId) {
        Map params = new HashMap(3);

        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelErectQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelShake(String area, String piece, Integer quantity, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(6);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelShake", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingPipeCTOPercent(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeCTOPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingSteelErectPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelErectPercent", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetPSAActivityByUidCount(Pageable pageable, Integer superId) {
        Map params = new HashMap(1);

        params.put("SuperID", superId);

        return queryExecutor.executeNamedQuery("GetPSAActivityByUidCount", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateTrimQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowId", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateTrimQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingCivilWork(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilWork", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelShakeQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelShakeQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingSteelImp(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelImp", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingPipeMechPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeMechPercent", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesPipe(Pageable pageable, String lineNumber, String drawingNumber, String sheetNumber, String ect, String ecttype) {
        Map params = new HashMap(5);

        params.put("LineNumber", lineNumber);
        params.put("DrawingNumber", drawingNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("ECT", ect);
        params.put("ECTType", ecttype);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesPipe", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelWeldQuantity(Integer quantity, BigDecimal percent, Integer rowId) {
        Map params = new HashMap(3);

        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelWeldQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelImp(String area, String piece, Integer quantity, BigDecimal percent, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelImp", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelSell(String area, String piece, Integer quantity, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(6);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSell", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingPipeTestingPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeTestingPercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateErectionQuantity(Integer spool1length, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Spool1Length", spool1length);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateErectionQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesCivil(Pageable pageable, Integer bidId, String foundation, String drawingNumber, String detailDrawingNumber) {
        Map params = new HashMap(4);

        params.put("BidID", bidId);
        params.put("Foundation", foundation);
        params.put("DrawingNumber", drawingNumber);
        params.put("DetailDrawingNumber", detailDrawingNumber);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesCivil", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelErect(String area, String piece, Integer quantity, BigDecimal percent, Byte rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("Area", area);
        params.put("Piece", piece);
        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelErect", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSupports(String partNumber, Integer quantity, String drawingNumber, String lineNumber, String sheet, Byte complete, Byte shared, Integer percentComplete, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(11);

        params.put("PartNumber", partNumber);
        params.put("Quantity", quantity);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("Sheet", sheet);
        params.put("Complete", complete);
        params.put("Shared", shared);
        params.put("PercentComplete", percentComplete);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSupports", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityLFInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityLFInstalled", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateDemoQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateDemoQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelSell(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelSell", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingPipeRFTPercent(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeRFTPercent", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCutPrep(String drawingNumber, String lineNumber, String sheetNumber, BigDecimal size, String thickness, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(8);

        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Size", size);
        params.put("Thickness", thickness);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCutPrep", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCivilMisc(String foundation, String drawing, String detailDrawing, BigDecimal percent, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("Foundation", foundation);
        params.put("Drawing", drawing);
        params.put("DetailDrawing", detailDrawing);
        params.put("Percent", percent);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilMisc", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantitySupportsInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantitySupportsInstalled", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeCreateSSNote(String activityId, Integer createdBy, String note) {
        Map params = new HashMap(3);

        params.put("ActivityID", activityId);
        params.put("CreatedBy", createdBy);
        params.put("Note", note);

        return queryExecutor.executeNamedQueryForUpdate("CreateSSNote", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingPipeMechPercent(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeMechPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingPipeCTOPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeCTOPercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingPipeHydroPercent(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeHydroPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeMisc(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeMisc", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateTesting(String testPackageNumber, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(4);

        params.put("TestPackageNumber", testPackageNumber);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateTesting", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCivilFA(String description, String foundation, String drawing, String detailDrawing, BigDecimal percent, Integer quantity, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(9);

        params.put("Description", description);
        params.put("Foundation", foundation);
        params.put("Drawing", drawing);
        params.put("DetailDrawing", detailDrawing);
        params.put("Percent", percent);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFA", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelWeld(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelWeld", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelImp(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelImp", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityMiscInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityMiscInstalled", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityDemoRemoved(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityDemoRemoved", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetDrawingByTestPackageSteel(Pageable pageable, Integer testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageSteel", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelDemo(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelDemo", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelSellPackage(String testPackage, String notes, Integer rowId) {
        Map params = new HashMap(3);

        params.put("TestPackage", testPackage);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSellPackage", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidWorkHistorySteel(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistorySteel", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateEWO(String ewonumber, Integer ewohours, String drawingNumber, String lineNumber, String sheetNumber, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(8);

        params.put("EWONumber", ewonumber);
        params.put("EWOHours", ewohours);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateEWO", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingProductivityIntervals(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingProductivityIntervals", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetPSRecentActivities(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetPSRecentActivities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityQuantitiesCivil(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesCivil", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivitiesPendingApprovalCount(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingApprovalCount", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelBoltout(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelBoltout", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidChangeLogByID(Pageable pageable, Integer id) {
        Map params = new HashMap(1);

        params.put("ID", id);

        return queryExecutor.executeNamedQuery("GetBidChangeLogByID", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryCivilMisc(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryCivilMisc", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityBoltUpInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityBoltUpInstalled", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesByTestPackageSteel(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesByTestPackageSteel", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeErection(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeErection", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeCheckSASLock(Pageable pageable, String activityId) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("CheckSASLock", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelBoltoutQuantity(Integer quantity, BigDecimal percent, Integer rowId) {
        Map params = new HashMap(3);

        params.put("Quantity", quantity);
        params.put("Percent", percent);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelBoltoutQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetReportDPRSteelDetailed(Pageable pageable, String pm, String constM, String siteM, String areaM, String super_, String gf, String foreman, Date startDate, Date endDate) {
        Map params = new HashMap(9);

        params.put("PM", pm);
        params.put("ConstM", constM);
        params.put("SiteM", siteM);
        params.put("AreaM", areaM);
        params.put("Super", super_);
        params.put("GF", gf);
        params.put("Foreman", foreman);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRSteelDetailed", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetDrawingsByTestPackagePipe(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingsByTestPackagePipe", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingSteelBoltout(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelBoltout", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetNotesByPSAActivityID(Pageable pageable, String psaactivityId) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.executeNamedQuery("GetNotesByPSAActivityID", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityMatchesSteel(Pageable pageable, String area, String pieceMark, String bidActivityType, String steelType) {
        Map params = new HashMap(4);

        params.put("Area", area);
        params.put("PieceMark", pieceMark);
        params.put("BidActivityType", bidActivityType);
        params.put("SteelType", steelType);

        return queryExecutor.executeNamedQuery("GetBidActivityMatchesSteel", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingSteelBoltoutPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelBoltoutPercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCivilFAQuantity(BigDecimal percent, Integer quantity, Integer rowId) {
        Map params = new HashMap(3);

        params.put("Percent", percent);
        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilFAQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingSteelErect(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelErect", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryStatus(Pageable pageable, Integer activityId) {
        Map params = new HashMap(1);

        params.put("ActivityID", activityId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryStatus", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingSteelShakePercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelShakePercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingPipeTestingPercent(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingPipeTestingPercent", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidActivityQuantitiesSteel(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidActivityQuantitiesSteel", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSettingSteelSell(BigDecimal value1) {
        Map params = new HashMap(1);

        params.put("Value1", value1);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSettingSteelSell", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateBoltUp(String spool1, String spool2, String drawingNumber, String lineNumber, String sheetNumber, BigDecimal size, Integer quantity, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(10);

        params.put("Spool1", spool1);
        params.put("Spool2", spool2);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Size", size);
        params.put("Quantity", quantity);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateBoltUp", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantitiesTestPackage(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackage", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeTesting(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeTesting", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateMiscQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateWeldQuantity(Integer percentComplete, Integer rowId) {
        Map params = new HashMap(2);

        params.put("PercentComplete", percentComplete);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateWeldQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetBidWorkHistoryCivil(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetBidWorkHistoryCivil", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivitiesPendingApproval(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("UserID", userId);

        return queryExecutor.executeNamedQuery("GetActivitiesPendingApproval", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingCivilPuch(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingCivilPuch", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingPipeHydroPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingPipeHydroPercent", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetDrawingByTestPackageCivil(Pageable pageable, Integer testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetDrawingByTestPackageCivil", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateCivilMiscQuantity(BigDecimal percent, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Percent", percent);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCivilMiscQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSS(Integer activityStatus, Integer userId, Integer bidId, Integer fieldActivityId) {
        Map params = new HashMap(4);

        params.put("ActivityStatus", activityStatus);
        params.put("UserID", userId);
        params.put("BidID", bidId);
        params.put("FieldActivityID", fieldActivityId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSS", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSupportsQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSupportsQuantity", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateOverrideActivityQuantity(Integer newQuantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("NewQuantity", newQuantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateOverrideActivityQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetSettingSteelSellPercent(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("GetSettingSteelSellPercent", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateDemo(String drawingNumber, String lineNumber, String sheetNumber, Integer quantity, BigDecimal size, String notes, Integer rowId) {
        Map params = new HashMap(7);

        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Quantity", quantity);
        params.put("Size", size);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateDemo", params);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateWeld(String spool1, String spool2, String drawingNumber, String lineNumber, String sheetNumber, String lineSpec, String weldNumber, String stencil, BigDecimal size, String thickness, String weldType, String weldPosition, String material, String procedure, Byte complete, Byte shared, Integer percentComplete, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(20);

        params.put("Spool1", spool1);
        params.put("Spool2", spool2);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("LineSpec", lineSpec);
        params.put("WeldNumber", weldNumber);
        params.put("Stencil", stencil);
        params.put("Size", size);
        params.put("Thickness", thickness);
        params.put("WeldType", weldType);
        params.put("WeldPosition", weldPosition);
        params.put("Material", material);
        params.put("Procedure", procedure);
        params.put("Complete", complete);
        params.put("Shared", shared);
        params.put("PercentComplete", percentComplete);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateWeld", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityCutPrepInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityCutPrepInstalled", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateSteelSellQuantity(Integer quantity, Integer rowId) {
        Map params = new HashMap(2);

        params.put("Quantity", quantity);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateSteelSellQuantity", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantitiesTestPackageCivil(Pageable pageable, String testPackage) {
        Map params = new HashMap(1);

        params.put("TestPackage", testPackage);

        return queryExecutor.executeNamedQuery("GetQuantitiesTestPackageCivil", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetReportDWRByDate(Pageable pageable, Date beginDate, Date endDate) {
        Map params = new HashMap(2);

        params.put("BeginDate", beginDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDWRByDate", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetNoteCount(Pageable pageable, Integer psaactivityId) {
        Map params = new HashMap(1);

        params.put("PSAActivityID", psaactivityId);

        return queryExecutor.executeNamedQuery("GetNoteCount", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeTrim(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeTrim", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetReportDPRByDate(Pageable pageable, String foremanId, String superId, String managerId, Date startDate, Date endDate) {
        Map params = new HashMap(5);

        params.put("ForemanID", foremanId);
        params.put("SuperID", superId);
        params.put("ManagerID", managerId);
        params.put("StartDate", startDate);
        params.put("EndDate", endDate);

        return queryExecutor.executeNamedQuery("GetReportDPRByDate", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistorySteelMisc(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistorySteelMisc", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryCivilFA(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryCivilFA", params, Object.class, pageable);
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
    public int executeUpdateErection(String spool1, Integer spool1length, String spool2, Integer spool2length, String spool3, Integer spool3length, String spool4, Integer spool4length, String spool5, Integer spool5length, String spool6, Integer spool6length, Byte onCords, String drawingNumber, String lineNumber, String sheetNumber, BigDecimal size, Integer rework, String notes, Integer rowId) {
        Map params = new HashMap(20);

        params.put("Spool1", spool1);
        params.put("Spool1Length", spool1length);
        params.put("Spool2", spool2);
        params.put("Spool2Length", spool2length);
        params.put("Spool3", spool3);
        params.put("Spool3Length", spool3length);
        params.put("Spool4", spool4);
        params.put("Spool4Length", spool4length);
        params.put("Spool5", spool5);
        params.put("Spool5Length", spool5length);
        params.put("Spool6", spool6);
        params.put("Spool6Length", spool6length);
        params.put("OnCords", onCords);
        params.put("DrawingNumber", drawingNumber);
        params.put("LineNumber", lineNumber);
        params.put("SheetNumber", sheetNumber);
        params.put("Size", size);
        params.put("Rework", rework);
        params.put("Notes", notes);
        params.put("RowID", rowId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateErection", params);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetQuantityTrimInstalled(Pageable pageable, Integer bidId) {
        Map params = new HashMap(1);

        params.put("BidID", bidId);

        return queryExecutor.executeNamedQuery("GetQuantityTrimInstalled", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Object> executeGetActivityHistoryPipeDemo(Pageable pageable, Integer rowId) {
        Map params = new HashMap(1);

        params.put("RowID", rowId);

        return queryExecutor.executeNamedQuery("GetActivityHistoryPipeDemo", params, Object.class, pageable);
    }

}


