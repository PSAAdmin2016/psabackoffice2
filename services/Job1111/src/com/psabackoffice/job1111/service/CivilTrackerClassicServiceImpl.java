/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.CivilTrackerClassic;


/**
 * ServiceImpl object for domain model class CivilTrackerClassic.
 *
 * @see CivilTrackerClassic
 */
@Service("Job1111.CivilTrackerClassicService")
@Validated
public class CivilTrackerClassicServiceImpl implements CivilTrackerClassicService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CivilTrackerClassicServiceImpl.class);


    @Autowired
    @Qualifier("Job1111.CivilTrackerClassicDao")
    private WMGenericDao<CivilTrackerClassic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CivilTrackerClassic, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public CivilTrackerClassic create(CivilTrackerClassic civilTrackerClassic) {
        LOGGER.debug("Creating a new CivilTrackerClassic with information: {}", civilTrackerClassic);

        CivilTrackerClassic civilTrackerClassicCreated = this.wmGenericDao.create(civilTrackerClassic);
        return civilTrackerClassicCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public CivilTrackerClassic getById(Integer civiltrackerclassicId) throws EntityNotFoundException {
        LOGGER.debug("Finding CivilTrackerClassic by id: {}", civiltrackerclassicId);
        CivilTrackerClassic civilTrackerClassic = this.wmGenericDao.findById(civiltrackerclassicId);
        if (civilTrackerClassic == null){
            LOGGER.debug("No CivilTrackerClassic found with id: {}", civiltrackerclassicId);
            throw new EntityNotFoundException(String.valueOf(civiltrackerclassicId));
        }
        return civilTrackerClassic;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public CivilTrackerClassic findById(Integer civiltrackerclassicId) {
        LOGGER.debug("Finding CivilTrackerClassic by id: {}", civiltrackerclassicId);
        return this.wmGenericDao.findById(civiltrackerclassicId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public CivilTrackerClassic update(CivilTrackerClassic civilTrackerClassic) throws EntityNotFoundException {
        LOGGER.debug("Updating CivilTrackerClassic with information: {}", civilTrackerClassic);
        this.wmGenericDao.update(civilTrackerClassic);

        Integer civiltrackerclassicId = civilTrackerClassic.getUid();

        return this.wmGenericDao.findById(civiltrackerclassicId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public CivilTrackerClassic delete(Integer civiltrackerclassicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CivilTrackerClassic with id: {}", civiltrackerclassicId);
        CivilTrackerClassic deleted = this.wmGenericDao.findById(civiltrackerclassicId);
        if (deleted == null) {
            LOGGER.debug("No CivilTrackerClassic found with id: {}", civiltrackerclassicId);
            throw new EntityNotFoundException(String.valueOf(civiltrackerclassicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<CivilTrackerClassic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CivilTrackerClassics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilTrackerClassic> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CivilTrackerClassics");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table CivilTrackerClassic to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

