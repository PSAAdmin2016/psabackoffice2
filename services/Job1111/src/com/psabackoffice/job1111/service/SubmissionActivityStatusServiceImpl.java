/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.CivilFa;
import com.psabackoffice.job1111.CivilMisc;
import com.psabackoffice.job1111.CivilSellPackage;
import com.psabackoffice.job1111.EquipFa;
import com.psabackoffice.job1111.PipeBoltUp;
import com.psabackoffice.job1111.PipeDelay;
import com.psabackoffice.job1111.PipeDemo;
import com.psabackoffice.job1111.PipeErection;
import com.psabackoffice.job1111.PipeEwo;
import com.psabackoffice.job1111.PipeMisc;
import com.psabackoffice.job1111.PipeSupports;
import com.psabackoffice.job1111.PipeTesting;
import com.psabackoffice.job1111.PipeTrim;
import com.psabackoffice.job1111.PipeWeld;
import com.psabackoffice.job1111.Sasnotes;
import com.psabackoffice.job1111.SteelBoltOut;
import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelErect;
import com.psabackoffice.job1111.SteelImp;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelSell;
import com.psabackoffice.job1111.SteelSellPackage;
import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.SteelWeld;
import com.psabackoffice.job1111.SubmissionActivityStatus;


/**
 * ServiceImpl object for domain model class SubmissionActivityStatus.
 *
 * @see SubmissionActivityStatus
 */
@Service("Job1111.SubmissionActivityStatusService")
public class SubmissionActivityStatusServiceImpl implements SubmissionActivityStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubmissionActivityStatusServiceImpl.class);

    @Autowired
	@Qualifier("Job1111.PipeDelayService")
	private PipeDelayService pipeDelayService;

    @Autowired
	@Qualifier("Job1111.PipeEwoService")
	private PipeEwoService pipeEwoService;

    @Autowired
	@Qualifier("Job1111.PipeMiscService")
	private PipeMiscService pipeMiscService;

    @Autowired
	@Qualifier("Job1111.SteelSellPackageService")
	private SteelSellPackageService steelSellPackageService;

    @Autowired
	@Qualifier("Job1111.PipeWeldService")
	private PipeWeldService pipeWeldService;

    @Autowired
	@Qualifier("Job1111.SteelBoltOutService")
	private SteelBoltOutService steelBoltOutService;

    @Autowired
	@Qualifier("Job1111.SasnotesService")
	private SasnotesService sasnotesService;

    @Autowired
	@Qualifier("Job1111.SteelMiscService")
	private SteelMiscService steelMiscService;

    @Autowired
	@Qualifier("Job1111.EquipFaService")
	private EquipFaService equipFaService;

    @Autowired
	@Qualifier("Job1111.SteelSellService")
	private SteelSellService steelSellService;

    @Autowired
	@Qualifier("Job1111.SteelErectService")
	private SteelErectService steelErectService;

    @Autowired
	@Qualifier("Job1111.PipeTrimService")
	private PipeTrimService pipeTrimService;

    @Autowired
	@Qualifier("Job1111.PipeBoltUpService")
	private PipeBoltUpService pipeBoltUpService;

    @Autowired
	@Qualifier("Job1111.CivilSellPackageService")
	private CivilSellPackageService civilSellPackageService;

    @Autowired
	@Qualifier("Job1111.SteelImpService")
	private SteelImpService steelImpService;

    @Autowired
	@Qualifier("Job1111.SteelShakeService")
	private SteelShakeService steelShakeService;

    @Autowired
	@Qualifier("Job1111.PipeDemoService")
	private PipeDemoService pipeDemoService;

    @Autowired
	@Qualifier("Job1111.PipeErectionService")
	private PipeErectionService pipeErectionService;

    @Autowired
	@Qualifier("Job1111.PipeTestingService")
	private PipeTestingService pipeTestingService;

    @Autowired
	@Qualifier("Job1111.CivilFaService")
	private CivilFaService civilFaService;

    @Autowired
	@Qualifier("Job1111.CivilMiscService")
	private CivilMiscService civilMiscService;

    @Autowired
	@Qualifier("Job1111.SteelWeldService")
	private SteelWeldService steelWeldService;

    @Autowired
	@Qualifier("Job1111.PipeSupportsService")
	private PipeSupportsService pipeSupportsService;

    @Autowired
	@Qualifier("Job1111.SteelDemoService")
	private SteelDemoService steelDemoService;

    @Autowired
    @Qualifier("Job1111.SubmissionActivityStatusDao")
    private WMGenericDao<SubmissionActivityStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubmissionActivityStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubmissionActivityStatus create(SubmissionActivityStatus submissionActivityStatus) {
        LOGGER.debug("Creating a new SubmissionActivityStatus with information: {}", submissionActivityStatus);
        SubmissionActivityStatus submissionActivityStatusCreated = this.wmGenericDao.create(submissionActivityStatus);
        if(submissionActivityStatusCreated.getCivilFa() != null) {
            CivilFa civilFa = submissionActivityStatusCreated.getCivilFa();
            LOGGER.debug("Creating a new child CivilFa with information: {}", civilFa);
            civilFa.setSubmissionActivityStatus(submissionActivityStatusCreated);
            civilFaService.create(civilFa);
        }

        if(submissionActivityStatusCreated.getCivilMisc() != null) {
            CivilMisc civilMisc = submissionActivityStatusCreated.getCivilMisc();
            LOGGER.debug("Creating a new child CivilMisc with information: {}", civilMisc);
            civilMisc.setSubmissionActivityStatus(submissionActivityStatusCreated);
            civilMiscService.create(civilMisc);
        }

        if(submissionActivityStatusCreated.getCivilSellPackage() != null) {
            CivilSellPackage civilSellPackage = submissionActivityStatusCreated.getCivilSellPackage();
            LOGGER.debug("Creating a new child CivilSellPackage with information: {}", civilSellPackage);
            civilSellPackage.setSubmissionActivityStatus(submissionActivityStatusCreated);
            civilSellPackageService.create(civilSellPackage);
        }

        if(submissionActivityStatusCreated.getEquipFa() != null) {
            EquipFa equipFa = submissionActivityStatusCreated.getEquipFa();
            LOGGER.debug("Creating a new child EquipFa with information: {}", equipFa);
            equipFa.setSubmissionActivityStatus(submissionActivityStatusCreated);
            equipFaService.create(equipFa);
        }

        if(submissionActivityStatusCreated.getPipeBoltUp() != null) {
            PipeBoltUp pipeBoltUp = submissionActivityStatusCreated.getPipeBoltUp();
            LOGGER.debug("Creating a new child PipeBoltUp with information: {}", pipeBoltUp);
            pipeBoltUp.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeBoltUpService.create(pipeBoltUp);
        }

        if(submissionActivityStatusCreated.getPipeDelay() != null) {
            PipeDelay pipeDelay = submissionActivityStatusCreated.getPipeDelay();
            LOGGER.debug("Creating a new child PipeDelay with information: {}", pipeDelay);
            pipeDelay.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeDelayService.create(pipeDelay);
        }

        if(submissionActivityStatusCreated.getPipeDemo() != null) {
            PipeDemo pipeDemo = submissionActivityStatusCreated.getPipeDemo();
            LOGGER.debug("Creating a new child PipeDemo with information: {}", pipeDemo);
            pipeDemo.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeDemoService.create(pipeDemo);
        }

        if(submissionActivityStatusCreated.getPipeEwo() != null) {
            PipeEwo pipeEwo = submissionActivityStatusCreated.getPipeEwo();
            LOGGER.debug("Creating a new child PipeEwo with information: {}", pipeEwo);
            pipeEwo.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeEwoService.create(pipeEwo);
        }

        if(submissionActivityStatusCreated.getPipeErection() != null) {
            PipeErection pipeErection = submissionActivityStatusCreated.getPipeErection();
            LOGGER.debug("Creating a new child PipeErection with information: {}", pipeErection);
            pipeErection.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeErectionService.create(pipeErection);
        }

        if(submissionActivityStatusCreated.getPipeMisc() != null) {
            PipeMisc pipeMisc = submissionActivityStatusCreated.getPipeMisc();
            LOGGER.debug("Creating a new child PipeMisc with information: {}", pipeMisc);
            pipeMisc.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeMiscService.create(pipeMisc);
        }

        if(submissionActivityStatusCreated.getPipeSupports() != null) {
            PipeSupports pipeSupports = submissionActivityStatusCreated.getPipeSupports();
            LOGGER.debug("Creating a new child PipeSupports with information: {}", pipeSupports);
            pipeSupports.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeSupportsService.create(pipeSupports);
        }

        if(submissionActivityStatusCreated.getPipeTesting() != null) {
            PipeTesting pipeTesting = submissionActivityStatusCreated.getPipeTesting();
            LOGGER.debug("Creating a new child PipeTesting with information: {}", pipeTesting);
            pipeTesting.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeTestingService.create(pipeTesting);
        }

        if(submissionActivityStatusCreated.getPipeTrim() != null) {
            PipeTrim pipeTrim = submissionActivityStatusCreated.getPipeTrim();
            LOGGER.debug("Creating a new child PipeTrim with information: {}", pipeTrim);
            pipeTrim.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeTrimService.create(pipeTrim);
        }

        if(submissionActivityStatusCreated.getPipeWeld() != null) {
            PipeWeld pipeWeld = submissionActivityStatusCreated.getPipeWeld();
            LOGGER.debug("Creating a new child PipeWeld with information: {}", pipeWeld);
            pipeWeld.setSubmissionActivityStatus(submissionActivityStatusCreated);
            pipeWeldService.create(pipeWeld);
        }

        if(submissionActivityStatusCreated.getSasnoteses() != null) {
            for(Sasnotes sasnotese : submissionActivityStatusCreated.getSasnoteses()) {
                sasnotese.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child Sasnotes with information: {}", sasnotese);
                sasnotesService.create(sasnotese);
            }
        }

        if(submissionActivityStatusCreated.getSteelBoltOut() != null) {
            SteelBoltOut steelBoltOut = submissionActivityStatusCreated.getSteelBoltOut();
            LOGGER.debug("Creating a new child SteelBoltOut with information: {}", steelBoltOut);
            steelBoltOut.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelBoltOutService.create(steelBoltOut);
        }

        if(submissionActivityStatusCreated.getSteelDemo() != null) {
            SteelDemo steelDemo = submissionActivityStatusCreated.getSteelDemo();
            LOGGER.debug("Creating a new child SteelDemo with information: {}", steelDemo);
            steelDemo.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelDemoService.create(steelDemo);
        }

        if(submissionActivityStatusCreated.getSteelErect() != null) {
            SteelErect steelErect = submissionActivityStatusCreated.getSteelErect();
            LOGGER.debug("Creating a new child SteelErect with information: {}", steelErect);
            steelErect.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelErectService.create(steelErect);
        }

        if(submissionActivityStatusCreated.getSteelImp() != null) {
            SteelImp steelImp = submissionActivityStatusCreated.getSteelImp();
            LOGGER.debug("Creating a new child SteelImp with information: {}", steelImp);
            steelImp.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelImpService.create(steelImp);
        }

        if(submissionActivityStatusCreated.getSteelMisc() != null) {
            SteelMisc steelMisc = submissionActivityStatusCreated.getSteelMisc();
            LOGGER.debug("Creating a new child SteelMisc with information: {}", steelMisc);
            steelMisc.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelMiscService.create(steelMisc);
        }

        if(submissionActivityStatusCreated.getSteelSell() != null) {
            SteelSell steelSell = submissionActivityStatusCreated.getSteelSell();
            LOGGER.debug("Creating a new child SteelSell with information: {}", steelSell);
            steelSell.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelSellService.create(steelSell);
        }

        if(submissionActivityStatusCreated.getSteelSellPackage() != null) {
            SteelSellPackage steelSellPackage = submissionActivityStatusCreated.getSteelSellPackage();
            LOGGER.debug("Creating a new child SteelSellPackage with information: {}", steelSellPackage);
            steelSellPackage.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelSellPackageService.create(steelSellPackage);
        }

        if(submissionActivityStatusCreated.getSteelShake() != null) {
            SteelShake steelShake = submissionActivityStatusCreated.getSteelShake();
            LOGGER.debug("Creating a new child SteelShake with information: {}", steelShake);
            steelShake.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelShakeService.create(steelShake);
        }

        if(submissionActivityStatusCreated.getSteelWeld() != null) {
            SteelWeld steelWeld = submissionActivityStatusCreated.getSteelWeld();
            LOGGER.debug("Creating a new child SteelWeld with information: {}", steelWeld);
            steelWeld.setSubmissionActivityStatus(submissionActivityStatusCreated);
            steelWeldService.create(steelWeld);
        }
        return submissionActivityStatusCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus getById(Integer submissionactivitystatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding SubmissionActivityStatus by id: {}", submissionactivitystatusId);
        SubmissionActivityStatus submissionActivityStatus = this.wmGenericDao.findById(submissionactivitystatusId);
        if (submissionActivityStatus == null){
            LOGGER.debug("No SubmissionActivityStatus found with id: {}", submissionactivitystatusId);
            throw new EntityNotFoundException(String.valueOf(submissionactivitystatusId));
        }
        return submissionActivityStatus;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus findById(Integer submissionactivitystatusId) {
        LOGGER.debug("Finding SubmissionActivityStatus by id: {}", submissionactivitystatusId);
        return this.wmGenericDao.findById(submissionactivitystatusId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus update(SubmissionActivityStatus submissionActivityStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating SubmissionActivityStatus with information: {}", submissionActivityStatus);
        this.wmGenericDao.update(submissionActivityStatus);

        Integer submissionactivitystatusId = submissionActivityStatus.getActivityId();

        return this.wmGenericDao.findById(submissionactivitystatusId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus delete(Integer submissionactivitystatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubmissionActivityStatus with id: {}", submissionactivitystatusId);
        SubmissionActivityStatus deleted = this.wmGenericDao.findById(submissionactivitystatusId);
        if (deleted == null) {
            LOGGER.debug("No SubmissionActivityStatus found with id: {}", submissionactivitystatusId);
            throw new EntityNotFoundException(String.valueOf(submissionactivitystatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubmissionActivityStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubmissionActivityStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubmissionActivityStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubmissionActivityStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubmissionActivityStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<Sasnotes> findAssociatedSasnoteses(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated sasnoteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return sasnotesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeDelayService instance
	 */
	protected void setPipeDelayService(PipeDelayService service) {
        this.pipeDelayService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeEwoService instance
	 */
	protected void setPipeEwoService(PipeEwoService service) {
        this.pipeEwoService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeMiscService instance
	 */
	protected void setPipeMiscService(PipeMiscService service) {
        this.pipeMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellPackageService instance
	 */
	protected void setSteelSellPackageService(SteelSellPackageService service) {
        this.steelSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeWeldService instance
	 */
	protected void setPipeWeldService(PipeWeldService service) {
        this.pipeWeldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelBoltOutService instance
	 */
	protected void setSteelBoltOutService(SteelBoltOutService service) {
        this.steelBoltOutService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SasnotesService instance
	 */
	protected void setSasnotesService(SasnotesService service) {
        this.sasnotesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelMiscService instance
	 */
	protected void setSteelMiscService(SteelMiscService service) {
        this.steelMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipFaService instance
	 */
	protected void setEquipFaService(EquipFaService service) {
        this.equipFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellService instance
	 */
	protected void setSteelSellService(SteelSellService service) {
        this.steelSellService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelErectService instance
	 */
	protected void setSteelErectService(SteelErectService service) {
        this.steelErectService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeTrimService instance
	 */
	protected void setPipeTrimService(PipeTrimService service) {
        this.pipeTrimService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeBoltUpService instance
	 */
	protected void setPipeBoltUpService(PipeBoltUpService service) {
        this.pipeBoltUpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilSellPackageService instance
	 */
	protected void setCivilSellPackageService(CivilSellPackageService service) {
        this.civilSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelImpService instance
	 */
	protected void setSteelImpService(SteelImpService service) {
        this.steelImpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelShakeService instance
	 */
	protected void setSteelShakeService(SteelShakeService service) {
        this.steelShakeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeDemoService instance
	 */
	protected void setPipeDemoService(PipeDemoService service) {
        this.pipeDemoService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeErectionService instance
	 */
	protected void setPipeErectionService(PipeErectionService service) {
        this.pipeErectionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeTestingService instance
	 */
	protected void setPipeTestingService(PipeTestingService service) {
        this.pipeTestingService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilFaService instance
	 */
	protected void setCivilFaService(CivilFaService service) {
        this.civilFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilMiscService instance
	 */
	protected void setCivilMiscService(CivilMiscService service) {
        this.civilMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelWeldService instance
	 */
	protected void setSteelWeldService(SteelWeldService service) {
        this.steelWeldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeSupportsService instance
	 */
	protected void setPipeSupportsService(PipeSupportsService service) {
        this.pipeSupportsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelDemoService instance
	 */
	protected void setSteelDemoService(SteelDemoService service) {
        this.steelDemoService = service;
    }

}

