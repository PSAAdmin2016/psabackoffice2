/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.CivilFa;
import com.psabackoffice.job1111.CivilMisc;
import com.psabackoffice.job1111.CivilSellPackage;
import com.psabackoffice.job1111.EquipFa;
import com.psabackoffice.job1111.PipeBoltUp;
import com.psabackoffice.job1111.PipeWeld;
import com.psabackoffice.job1111.SteelBoltOut;
import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelErect;
import com.psabackoffice.job1111.SteelImp;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelSell;
import com.psabackoffice.job1111.SteelSellPackage;
import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.SubmissionActivityStatus;


/**
 * ServiceImpl object for domain model class SubmissionActivityStatus.
 *
 * @see SubmissionActivityStatus
 */
@Service("Job1111.SubmissionActivityStatusService")
public class SubmissionActivityStatusServiceImpl implements SubmissionActivityStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubmissionActivityStatusServiceImpl.class);

    @Autowired
	@Qualifier("Job1111.SteelSellPackageService")
	private SteelSellPackageService steelSellPackageService;

    @Autowired
	@Qualifier("Job1111.PipeWeldService")
	private PipeWeldService pipeWeldService;

    @Autowired
	@Qualifier("Job1111.SteelBoltOutService")
	private SteelBoltOutService steelBoltOutService;

    @Autowired
	@Qualifier("Job1111.EquipFaService")
	private EquipFaService equipFaService;

    @Autowired
	@Qualifier("Job1111.SteelMiscService")
	private SteelMiscService steelMiscService;

    @Autowired
	@Qualifier("Job1111.SteelSellService")
	private SteelSellService steelSellService;

    @Autowired
	@Qualifier("Job1111.SteelErectService")
	private SteelErectService steelErectService;

    @Autowired
	@Qualifier("Job1111.PipeBoltUpService")
	private PipeBoltUpService pipeBoltUpService;

    @Autowired
	@Qualifier("Job1111.CivilSellPackageService")
	private CivilSellPackageService civilSellPackageService;

    @Autowired
	@Qualifier("Job1111.SteelImpService")
	private SteelImpService steelImpService;

    @Autowired
	@Qualifier("Job1111.SteelShakeService")
	private SteelShakeService steelShakeService;

    @Autowired
	@Qualifier("Job1111.CivilFaService")
	private CivilFaService civilFaService;

    @Autowired
	@Qualifier("Job1111.CivilMiscService")
	private CivilMiscService civilMiscService;

    @Autowired
	@Qualifier("Job1111.SteelDemoService")
	private SteelDemoService steelDemoService;

    @Autowired
    @Qualifier("Job1111.SubmissionActivityStatusDao")
    private WMGenericDao<SubmissionActivityStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubmissionActivityStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubmissionActivityStatus create(SubmissionActivityStatus submissionActivityStatus) {
        LOGGER.debug("Creating a new SubmissionActivityStatus with information: {}", submissionActivityStatus);
        SubmissionActivityStatus submissionActivityStatusCreated = this.wmGenericDao.create(submissionActivityStatus);
        if(submissionActivityStatusCreated.getCivilFas() != null) {
            for(CivilFa civilFa : submissionActivityStatusCreated.getCivilFas()) {
                civilFa.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child CivilFa with information: {}", civilFa);
                civilFaService.create(civilFa);
            }
        }

        if(submissionActivityStatusCreated.getCivilMiscs() != null) {
            for(CivilMisc civilMisc : submissionActivityStatusCreated.getCivilMiscs()) {
                civilMisc.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child CivilMisc with information: {}", civilMisc);
                civilMiscService.create(civilMisc);
            }
        }

        if(submissionActivityStatusCreated.getCivilSellPackages() != null) {
            for(CivilSellPackage civilSellPackage : submissionActivityStatusCreated.getCivilSellPackages()) {
                civilSellPackage.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child CivilSellPackage with information: {}", civilSellPackage);
                civilSellPackageService.create(civilSellPackage);
            }
        }

        if(submissionActivityStatusCreated.getEquipFas() != null) {
            for(EquipFa equipFa : submissionActivityStatusCreated.getEquipFas()) {
                equipFa.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child EquipFa with information: {}", equipFa);
                equipFaService.create(equipFa);
            }
        }

        if(submissionActivityStatusCreated.getPipeBoltUps() != null) {
            for(PipeBoltUp pipeBoltUp : submissionActivityStatusCreated.getPipeBoltUps()) {
                pipeBoltUp.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child PipeBoltUp with information: {}", pipeBoltUp);
                pipeBoltUpService.create(pipeBoltUp);
            }
        }

        if(submissionActivityStatusCreated.getPipeWelds() != null) {
            for(PipeWeld pipeWeld : submissionActivityStatusCreated.getPipeWelds()) {
                pipeWeld.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child PipeWeld with information: {}", pipeWeld);
                pipeWeldService.create(pipeWeld);
            }
        }

        if(submissionActivityStatusCreated.getSteelBoltOuts() != null) {
            for(SteelBoltOut steelBoltOut : submissionActivityStatusCreated.getSteelBoltOuts()) {
                steelBoltOut.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelBoltOut with information: {}", steelBoltOut);
                steelBoltOutService.create(steelBoltOut);
            }
        }

        if(submissionActivityStatusCreated.getSteelDemos() != null) {
            for(SteelDemo steelDemo : submissionActivityStatusCreated.getSteelDemos()) {
                steelDemo.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelDemo with information: {}", steelDemo);
                steelDemoService.create(steelDemo);
            }
        }

        if(submissionActivityStatusCreated.getSteelErects() != null) {
            for(SteelErect steelErect : submissionActivityStatusCreated.getSteelErects()) {
                steelErect.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelErect with information: {}", steelErect);
                steelErectService.create(steelErect);
            }
        }

        if(submissionActivityStatusCreated.getSteelImps() != null) {
            for(SteelImp steelImp : submissionActivityStatusCreated.getSteelImps()) {
                steelImp.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelImp with information: {}", steelImp);
                steelImpService.create(steelImp);
            }
        }

        if(submissionActivityStatusCreated.getSteelMiscs() != null) {
            for(SteelMisc steelMisc : submissionActivityStatusCreated.getSteelMiscs()) {
                steelMisc.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelMisc with information: {}", steelMisc);
                steelMiscService.create(steelMisc);
            }
        }

        if(submissionActivityStatusCreated.getSteelSells() != null) {
            for(SteelSell steelSell : submissionActivityStatusCreated.getSteelSells()) {
                steelSell.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelSell with information: {}", steelSell);
                steelSellService.create(steelSell);
            }
        }

        if(submissionActivityStatusCreated.getSteelSellPackages() != null) {
            for(SteelSellPackage steelSellPackage : submissionActivityStatusCreated.getSteelSellPackages()) {
                steelSellPackage.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelSellPackage with information: {}", steelSellPackage);
                steelSellPackageService.create(steelSellPackage);
            }
        }

        if(submissionActivityStatusCreated.getSteelShakes() != null) {
            for(SteelShake steelShake : submissionActivityStatusCreated.getSteelShakes()) {
                steelShake.setSubmissionActivityStatus(submissionActivityStatusCreated);
                LOGGER.debug("Creating a new child SteelShake with information: {}", steelShake);
                steelShakeService.create(steelShake);
            }
        }
        return submissionActivityStatusCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus getById(Integer submissionactivitystatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding SubmissionActivityStatus by id: {}", submissionactivitystatusId);
        SubmissionActivityStatus submissionActivityStatus = this.wmGenericDao.findById(submissionactivitystatusId);
        if (submissionActivityStatus == null){
            LOGGER.debug("No SubmissionActivityStatus found with id: {}", submissionactivitystatusId);
            throw new EntityNotFoundException(String.valueOf(submissionactivitystatusId));
        }
        return submissionActivityStatus;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus findById(Integer submissionactivitystatusId) {
        LOGGER.debug("Finding SubmissionActivityStatus by id: {}", submissionactivitystatusId);
        return this.wmGenericDao.findById(submissionactivitystatusId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus update(SubmissionActivityStatus submissionActivityStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating SubmissionActivityStatus with information: {}", submissionActivityStatus);
        this.wmGenericDao.update(submissionActivityStatus);

        Integer submissionactivitystatusId = submissionActivityStatus.getActivityId();

        return this.wmGenericDao.findById(submissionactivitystatusId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubmissionActivityStatus delete(Integer submissionactivitystatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubmissionActivityStatus with id: {}", submissionactivitystatusId);
        SubmissionActivityStatus deleted = this.wmGenericDao.findById(submissionactivitystatusId);
        if (deleted == null) {
            LOGGER.debug("No SubmissionActivityStatus found with id: {}", submissionactivitystatusId);
            throw new EntityNotFoundException(String.valueOf(submissionactivitystatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubmissionActivityStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubmissionActivityStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubmissionActivityStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubmissionActivityStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubmissionActivityStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilFa> findAssociatedCivilFas(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilFas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return civilFaService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilMisc> findAssociatedCivilMiscs(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilMiscs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return civilMiscService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilSellPackage> findAssociatedCivilSellPackages(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilSellPackages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return civilSellPackageService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<EquipFa> findAssociatedEquipFas(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated equipFas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return equipFaService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<PipeBoltUp> findAssociatedPipeBoltUps(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated pipeBoltUps");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return pipeBoltUpService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<PipeWeld> findAssociatedPipeWelds(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated pipeWelds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return pipeWeldService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelBoltOut> findAssociatedSteelBoltOuts(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelBoltOuts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelBoltOutService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelDemo> findAssociatedSteelDemos(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelDemos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelDemoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelErect> findAssociatedSteelErects(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelErects");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelErectService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelImp> findAssociatedSteelImps(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelImps");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelImpService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelMisc> findAssociatedSteelMiscs(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelMiscs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelMiscService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelSell> findAssociatedSteelSells(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelSells");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelSellService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelSellPackage> findAssociatedSteelSellPackages(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelSellPackages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelSellPackageService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelShake> findAssociatedSteelShakes(Integer activityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelShakes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("submissionActivityStatus.activityId = '" + activityId + "'");

        return steelShakeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellPackageService instance
	 */
	protected void setSteelSellPackageService(SteelSellPackageService service) {
        this.steelSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeWeldService instance
	 */
	protected void setPipeWeldService(PipeWeldService service) {
        this.pipeWeldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelBoltOutService instance
	 */
	protected void setSteelBoltOutService(SteelBoltOutService service) {
        this.steelBoltOutService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipFaService instance
	 */
	protected void setEquipFaService(EquipFaService service) {
        this.equipFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelMiscService instance
	 */
	protected void setSteelMiscService(SteelMiscService service) {
        this.steelMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellService instance
	 */
	protected void setSteelSellService(SteelSellService service) {
        this.steelSellService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelErectService instance
	 */
	protected void setSteelErectService(SteelErectService service) {
        this.steelErectService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipeBoltUpService instance
	 */
	protected void setPipeBoltUpService(PipeBoltUpService service) {
        this.pipeBoltUpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilSellPackageService instance
	 */
	protected void setCivilSellPackageService(CivilSellPackageService service) {
        this.civilSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelImpService instance
	 */
	protected void setSteelImpService(SteelImpService service) {
        this.steelImpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelShakeService instance
	 */
	protected void setSteelShakeService(SteelShakeService service) {
        this.steelShakeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilFaService instance
	 */
	protected void setCivilFaService(CivilFaService service) {
        this.civilFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilMiscService instance
	 */
	protected void setCivilMiscService(CivilMiscService service) {
        this.civilMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelDemoService instance
	 */
	protected void setSteelDemoService(SteelDemoService service) {
        this.steelDemoService = service;
    }

}

