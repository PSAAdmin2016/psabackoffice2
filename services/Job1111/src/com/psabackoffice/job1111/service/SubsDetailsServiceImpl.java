/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.CivilFa;
import com.psabackoffice.job1111.CivilMisc;
import com.psabackoffice.job1111.CivilSellPackage;
import com.psabackoffice.job1111.EquipFa;
import com.psabackoffice.job1111.SteelBoltOut;
import com.psabackoffice.job1111.SteelDemo;
import com.psabackoffice.job1111.SteelErect;
import com.psabackoffice.job1111.SteelImp;
import com.psabackoffice.job1111.SteelMisc;
import com.psabackoffice.job1111.SteelSell;
import com.psabackoffice.job1111.SteelSellPackage;
import com.psabackoffice.job1111.SteelShake;
import com.psabackoffice.job1111.SteelWeld;
import com.psabackoffice.job1111.SubmissionStatus;
import com.psabackoffice.job1111.SubsBoltUp;
import com.psabackoffice.job1111.SubsDelay;
import com.psabackoffice.job1111.SubsDemo;
import com.psabackoffice.job1111.SubsDetails;
import com.psabackoffice.job1111.SubsErection;
import com.psabackoffice.job1111.SubsEwo;
import com.psabackoffice.job1111.SubsMisc;
import com.psabackoffice.job1111.SubsSupports;
import com.psabackoffice.job1111.SubsTesting;
import com.psabackoffice.job1111.SubsTrim;
import com.psabackoffice.job1111.SubsWeld;


/**
 * ServiceImpl object for domain model class SubsDetails.
 *
 * @see SubsDetails
 */
@Service("Job1111.SubsDetailsService")
public class SubsDetailsServiceImpl implements SubsDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsDetailsServiceImpl.class);

    @Autowired
	@Qualifier("Job1111.SteelSellPackageService")
	private SteelSellPackageService steelSellPackageService;

    @Autowired
	@Qualifier("Job1111.SteelBoltOutService")
	private SteelBoltOutService steelBoltOutService;

    @Autowired
	@Qualifier("Job1111.SubsMiscService")
	private SubsMiscService subsMiscService;

    @Autowired
	@Qualifier("Job1111.EquipFaService")
	private EquipFaService equipFaService;

    @Autowired
	@Qualifier("Job1111.SteelMiscService")
	private SteelMiscService steelMiscService;

    @Autowired
	@Qualifier("Job1111.SteelSellService")
	private SteelSellService steelSellService;

    @Autowired
	@Qualifier("Job1111.SteelErectService")
	private SteelErectService steelErectService;

    @Autowired
	@Qualifier("Job1111.CivilSellPackageService")
	private CivilSellPackageService civilSellPackageService;

    @Autowired
	@Qualifier("Job1111.SubsWeldService")
	private SubsWeldService subsWeldService;

    @Autowired
	@Qualifier("Job1111.SubsDelayService")
	private SubsDelayService subsDelayService;

    @Autowired
	@Qualifier("Job1111.SubsDemoService")
	private SubsDemoService subsDemoService;

    @Autowired
	@Qualifier("Job1111.SubsErectionService")
	private SubsErectionService subsErectionService;

    @Autowired
	@Qualifier("Job1111.SubsEwoService")
	private SubsEwoService subsEwoService;

    @Autowired
	@Qualifier("Job1111.SteelImpService")
	private SteelImpService steelImpService;

    @Autowired
	@Qualifier("Job1111.SteelShakeService")
	private SteelShakeService steelShakeService;

    @Autowired
	@Qualifier("Job1111.CivilFaService")
	private CivilFaService civilFaService;

    @Autowired
	@Qualifier("Job1111.CivilMiscService")
	private CivilMiscService civilMiscService;

    @Autowired
	@Qualifier("Job1111.SubmissionStatusService")
	private SubmissionStatusService submissionStatusService;

    @Autowired
	@Qualifier("Job1111.SubsTrimService")
	private SubsTrimService subsTrimService;

    @Autowired
	@Qualifier("Job1111.SubsSupportsService")
	private SubsSupportsService subsSupportsService;

    @Autowired
	@Qualifier("Job1111.SubsTestingService")
	private SubsTestingService subsTestingService;

    @Autowired
	@Qualifier("Job1111.SteelWeldService")
	private SteelWeldService steelWeldService;

    @Autowired
	@Qualifier("Job1111.SubsBoltUpService")
	private SubsBoltUpService subsBoltUpService;

    @Autowired
	@Qualifier("Job1111.SteelDemoService")
	private SteelDemoService steelDemoService;

    @Autowired
    @Qualifier("Job1111.SubsDetailsDao")
    private WMGenericDao<SubsDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubsDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubsDetails create(SubsDetails subsDetails) {
        LOGGER.debug("Creating a new SubsDetails with information: {}", subsDetails);
        SubsDetails subsDetailsCreated = this.wmGenericDao.create(subsDetails);
        if(subsDetailsCreated.getCivilFas() != null) {
            for(CivilFa civilFa : subsDetailsCreated.getCivilFas()) {
                civilFa.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child CivilFa with information: {}", civilFa);
                civilFaService.create(civilFa);
            }
        }

        if(subsDetailsCreated.getCivilMiscs() != null) {
            for(CivilMisc civilMisc : subsDetailsCreated.getCivilMiscs()) {
                civilMisc.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child CivilMisc with information: {}", civilMisc);
                civilMiscService.create(civilMisc);
            }
        }

        if(subsDetailsCreated.getCivilSellPackages() != null) {
            for(CivilSellPackage civilSellPackage : subsDetailsCreated.getCivilSellPackages()) {
                civilSellPackage.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child CivilSellPackage with information: {}", civilSellPackage);
                civilSellPackageService.create(civilSellPackage);
            }
        }

        if(subsDetailsCreated.getEquipFas() != null) {
            for(EquipFa equipFa : subsDetailsCreated.getEquipFas()) {
                equipFa.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child EquipFa with information: {}", equipFa);
                equipFaService.create(equipFa);
            }
        }

        if(subsDetailsCreated.getSteelBoltOuts() != null) {
            for(SteelBoltOut steelBoltOut : subsDetailsCreated.getSteelBoltOuts()) {
                steelBoltOut.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelBoltOut with information: {}", steelBoltOut);
                steelBoltOutService.create(steelBoltOut);
            }
        }

        if(subsDetailsCreated.getSteelDemos() != null) {
            for(SteelDemo steelDemo : subsDetailsCreated.getSteelDemos()) {
                steelDemo.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelDemo with information: {}", steelDemo);
                steelDemoService.create(steelDemo);
            }
        }

        if(subsDetailsCreated.getSteelErects() != null) {
            for(SteelErect steelErect : subsDetailsCreated.getSteelErects()) {
                steelErect.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelErect with information: {}", steelErect);
                steelErectService.create(steelErect);
            }
        }

        if(subsDetailsCreated.getSteelImps() != null) {
            for(SteelImp steelImp : subsDetailsCreated.getSteelImps()) {
                steelImp.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelImp with information: {}", steelImp);
                steelImpService.create(steelImp);
            }
        }

        if(subsDetailsCreated.getSteelMiscs() != null) {
            for(SteelMisc steelMisc : subsDetailsCreated.getSteelMiscs()) {
                steelMisc.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelMisc with information: {}", steelMisc);
                steelMiscService.create(steelMisc);
            }
        }

        if(subsDetailsCreated.getSteelSells() != null) {
            for(SteelSell steelSell : subsDetailsCreated.getSteelSells()) {
                steelSell.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelSell with information: {}", steelSell);
                steelSellService.create(steelSell);
            }
        }

        if(subsDetailsCreated.getSteelSellPackages() != null) {
            for(SteelSellPackage steelSellPackage : subsDetailsCreated.getSteelSellPackages()) {
                steelSellPackage.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelSellPackage with information: {}", steelSellPackage);
                steelSellPackageService.create(steelSellPackage);
            }
        }

        if(subsDetailsCreated.getSteelShakes() != null) {
            for(SteelShake steelShake : subsDetailsCreated.getSteelShakes()) {
                steelShake.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelShake with information: {}", steelShake);
                steelShakeService.create(steelShake);
            }
        }

        if(subsDetailsCreated.getSteelWelds() != null) {
            for(SteelWeld steelWeld : subsDetailsCreated.getSteelWelds()) {
                steelWeld.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SteelWeld with information: {}", steelWeld);
                steelWeldService.create(steelWeld);
            }
        }

        if(subsDetailsCreated.getSubmissionStatuses() != null) {
            for(SubmissionStatus submissionStatuse : subsDetailsCreated.getSubmissionStatuses()) {
                submissionStatuse.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubmissionStatus with information: {}", submissionStatuse);
                submissionStatusService.create(submissionStatuse);
            }
        }

        if(subsDetailsCreated.getSubsBoltUps() != null) {
            for(SubsBoltUp subsBoltUp : subsDetailsCreated.getSubsBoltUps()) {
                subsBoltUp.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsBoltUp with information: {}", subsBoltUp);
                subsBoltUpService.create(subsBoltUp);
            }
        }

        if(subsDetailsCreated.getSubsDelays() != null) {
            for(SubsDelay subsDelay : subsDetailsCreated.getSubsDelays()) {
                subsDelay.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsDelay with information: {}", subsDelay);
                subsDelayService.create(subsDelay);
            }
        }

        if(subsDetailsCreated.getSubsDemos() != null) {
            for(SubsDemo subsDemo : subsDetailsCreated.getSubsDemos()) {
                subsDemo.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsDemo with information: {}", subsDemo);
                subsDemoService.create(subsDemo);
            }
        }

        if(subsDetailsCreated.getSubsEwos() != null) {
            for(SubsEwo subsEwo : subsDetailsCreated.getSubsEwos()) {
                subsEwo.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsEwo with information: {}", subsEwo);
                subsEwoService.create(subsEwo);
            }
        }

        if(subsDetailsCreated.getSubsErections() != null) {
            for(SubsErection subsErection : subsDetailsCreated.getSubsErections()) {
                subsErection.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsErection with information: {}", subsErection);
                subsErectionService.create(subsErection);
            }
        }

        if(subsDetailsCreated.getSubsMiscs() != null) {
            for(SubsMisc subsMisc : subsDetailsCreated.getSubsMiscs()) {
                subsMisc.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsMisc with information: {}", subsMisc);
                subsMiscService.create(subsMisc);
            }
        }

        if(subsDetailsCreated.getSubsSupportses() != null) {
            for(SubsSupports subsSupportse : subsDetailsCreated.getSubsSupportses()) {
                subsSupportse.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsSupports with information: {}", subsSupportse);
                subsSupportsService.create(subsSupportse);
            }
        }

        if(subsDetailsCreated.getSubsTestings() != null) {
            for(SubsTesting subsTesting : subsDetailsCreated.getSubsTestings()) {
                subsTesting.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsTesting with information: {}", subsTesting);
                subsTestingService.create(subsTesting);
            }
        }

        if(subsDetailsCreated.getSubsTrims() != null) {
            for(SubsTrim subsTrim : subsDetailsCreated.getSubsTrims()) {
                subsTrim.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsTrim with information: {}", subsTrim);
                subsTrimService.create(subsTrim);
            }
        }

        if(subsDetailsCreated.getSubsWelds() != null) {
            for(SubsWeld subsWeld : subsDetailsCreated.getSubsWelds()) {
                subsWeld.setSubsDetails(subsDetailsCreated);
                LOGGER.debug("Creating a new child SubsWeld with information: {}", subsWeld);
                subsWeldService.create(subsWeld);
            }
        }
        return subsDetailsCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsDetails getById(Integer subsdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding SubsDetails by id: {}", subsdetailsId);
        SubsDetails subsDetails = this.wmGenericDao.findById(subsdetailsId);
        if (subsDetails == null){
            LOGGER.debug("No SubsDetails found with id: {}", subsdetailsId);
            throw new EntityNotFoundException(String.valueOf(subsdetailsId));
        }
        return subsDetails;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsDetails findById(Integer subsdetailsId) {
        LOGGER.debug("Finding SubsDetails by id: {}", subsdetailsId);
        return this.wmGenericDao.findById(subsdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubsDetails update(SubsDetails subsDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating SubsDetails with information: {}", subsDetails);
        this.wmGenericDao.update(subsDetails);

        Integer subsdetailsId = subsDetails.getSubmissionId();

        return this.wmGenericDao.findById(subsdetailsId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubsDetails delete(Integer subsdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubsDetails with id: {}", subsdetailsId);
        SubsDetails deleted = this.wmGenericDao.findById(subsdetailsId);
        if (deleted == null) {
            LOGGER.debug("No SubsDetails found with id: {}", subsdetailsId);
            throw new EntityNotFoundException(String.valueOf(subsdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubsDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubsDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubsDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubsDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilFa> findAssociatedCivilFas(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilFas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return civilFaService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilMisc> findAssociatedCivilMiscs(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilMiscs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return civilMiscService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<CivilSellPackage> findAssociatedCivilSellPackages(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated civilSellPackages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return civilSellPackageService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<EquipFa> findAssociatedEquipFas(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated equipFas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return equipFaService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelBoltOut> findAssociatedSteelBoltOuts(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelBoltOuts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelBoltOutService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelDemo> findAssociatedSteelDemos(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelDemos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelDemoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelErect> findAssociatedSteelErects(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelErects");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelErectService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelImp> findAssociatedSteelImps(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelImps");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelImpService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelMisc> findAssociatedSteelMiscs(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelMiscs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelMiscService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelSell> findAssociatedSteelSells(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelSells");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelSellService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelSellPackage> findAssociatedSteelSellPackages(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelSellPackages");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelSellPackageService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelShake> findAssociatedSteelShakes(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelShakes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelShakeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SteelWeld> findAssociatedSteelWelds(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated steelWelds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return steelWeldService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubmissionStatus> findAssociatedSubmissionStatuses(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated submissionStatuses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return submissionStatusService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsBoltUp> findAssociatedSubsBoltUps(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsBoltUps");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsBoltUpService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsDelay> findAssociatedSubsDelays(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsDelays");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsDelayService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsDemo> findAssociatedSubsDemos(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsDemos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsDemoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsEwo> findAssociatedSubsEwos(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsEwos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsEwoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsErection> findAssociatedSubsErections(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsErections");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsErectionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsMisc> findAssociatedSubsMiscs(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsMiscs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsMiscService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsSupports> findAssociatedSubsSupportses(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsSupportses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsSupportsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsTesting> findAssociatedSubsTestings(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsTestings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsTestingService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsTrim> findAssociatedSubsTrims(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsTrims");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsTrimService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsWeld> findAssociatedSubsWelds(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsWelds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsWeldService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellPackageService instance
	 */
	protected void setSteelSellPackageService(SteelSellPackageService service) {
        this.steelSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelBoltOutService instance
	 */
	protected void setSteelBoltOutService(SteelBoltOutService service) {
        this.steelBoltOutService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsMiscService instance
	 */
	protected void setSubsMiscService(SubsMiscService service) {
        this.subsMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EquipFaService instance
	 */
	protected void setEquipFaService(EquipFaService service) {
        this.equipFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelMiscService instance
	 */
	protected void setSteelMiscService(SteelMiscService service) {
        this.steelMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelSellService instance
	 */
	protected void setSteelSellService(SteelSellService service) {
        this.steelSellService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelErectService instance
	 */
	protected void setSteelErectService(SteelErectService service) {
        this.steelErectService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilSellPackageService instance
	 */
	protected void setCivilSellPackageService(CivilSellPackageService service) {
        this.civilSellPackageService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsWeldService instance
	 */
	protected void setSubsWeldService(SubsWeldService service) {
        this.subsWeldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsDelayService instance
	 */
	protected void setSubsDelayService(SubsDelayService service) {
        this.subsDelayService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsDemoService instance
	 */
	protected void setSubsDemoService(SubsDemoService service) {
        this.subsDemoService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsErectionService instance
	 */
	protected void setSubsErectionService(SubsErectionService service) {
        this.subsErectionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsEwoService instance
	 */
	protected void setSubsEwoService(SubsEwoService service) {
        this.subsEwoService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelImpService instance
	 */
	protected void setSteelImpService(SteelImpService service) {
        this.steelImpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelShakeService instance
	 */
	protected void setSteelShakeService(SteelShakeService service) {
        this.steelShakeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilFaService instance
	 */
	protected void setCivilFaService(CivilFaService service) {
        this.civilFaService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CivilMiscService instance
	 */
	protected void setCivilMiscService(CivilMiscService service) {
        this.civilMiscService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubmissionStatusService instance
	 */
	protected void setSubmissionStatusService(SubmissionStatusService service) {
        this.submissionStatusService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsTrimService instance
	 */
	protected void setSubsTrimService(SubsTrimService service) {
        this.subsTrimService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsSupportsService instance
	 */
	protected void setSubsSupportsService(SubsSupportsService service) {
        this.subsSupportsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsTestingService instance
	 */
	protected void setSubsTestingService(SubsTestingService service) {
        this.subsTestingService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelWeldService instance
	 */
	protected void setSteelWeldService(SteelWeldService service) {
        this.steelWeldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsBoltUpService instance
	 */
	protected void setSubsBoltUpService(SubsBoltUpService service) {
        this.subsBoltUpService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SteelDemoService instance
	 */
	protected void setSteelDemoService(SteelDemoService service) {
        this.steelDemoService = service;
    }

}

