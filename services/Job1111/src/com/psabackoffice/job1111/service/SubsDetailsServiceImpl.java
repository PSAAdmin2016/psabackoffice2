/*Copyright (c) 2016-2018 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.SubmissionActivityStatus;
import com.psabackoffice.job1111.SubsDetails;
import com.psabackoffice.job1111.SubsSignatures;


/**
 * ServiceImpl object for domain model class SubsDetails.
 *
 * @see SubsDetails
 */
@Service("Job1111.SubsDetailsService")
@Validated
public class SubsDetailsServiceImpl implements SubsDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubsDetailsServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("Job1111.SubsSignaturesService")
	private SubsSignaturesService subsSignaturesService;

    @Lazy
    @Autowired
	@Qualifier("Job1111.SubmissionActivityStatusService")
	private SubmissionActivityStatusService submissionActivityStatusService;

    @Autowired
    @Qualifier("Job1111.SubsDetailsDao")
    private WMGenericDao<SubsDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubsDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public SubsDetails create(SubsDetails subsDetails) {
        LOGGER.debug("Creating a new SubsDetails with information: {}", subsDetails);

        SubsDetails subsDetailsCreated = this.wmGenericDao.create(subsDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(subsDetailsCreated);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsDetails getById(Integer subsdetailsId) {
        LOGGER.debug("Finding SubsDetails by id: {}", subsdetailsId);
        return this.wmGenericDao.findById(subsdetailsId);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public SubsDetails findById(Integer subsdetailsId) {
        LOGGER.debug("Finding SubsDetails by id: {}", subsdetailsId);
        try {
            return this.wmGenericDao.findById(subsdetailsId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No SubsDetails found with id: {}", subsdetailsId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public SubsDetails update(SubsDetails subsDetails) {
        LOGGER.debug("Updating SubsDetails with information: {}", subsDetails);

        List<SubmissionActivityStatus> submissionActivityStatuses = subsDetails.getSubmissionActivityStatuses();
        List<SubsSignatures> subsSignatureses = subsDetails.getSubsSignatureses();
        if(submissionActivityStatuses != null && Hibernate.isInitialized(submissionActivityStatuses)) {
            submissionActivityStatuses.forEach(_submissionActivityStatus -> _submissionActivityStatus.setSubsDetails(subsDetails));
        }
        if(subsSignatureses != null && Hibernate.isInitialized(subsSignatureses)) {
            subsSignatureses.forEach(_subsSignatures -> _subsSignatures.setSubsDetails(subsDetails));
        }

        this.wmGenericDao.update(subsDetails);
        this.wmGenericDao.refresh(subsDetails);

        // Deleting children which are not present in the list.
        if(submissionActivityStatuses != null && Hibernate.isInitialized(submissionActivityStatuses) && !submissionActivityStatuses.isEmpty()) {
            List<SubmissionActivityStatus> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SubmissionActivityStatus.class,
                        new DaoUtils.ChildrenFilter<>("subsDetails", subsDetails, submissionActivityStatuses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_submissionActivityStatus -> submissionActivityStatusService.delete(_submissionActivityStatus));
            subsDetails.setSubmissionActivityStatuses(submissionActivityStatuses);
        }

        // Deleting children which are not present in the list.
        if(subsSignatureses != null && Hibernate.isInitialized(subsSignatureses) && !subsSignatureses.isEmpty()) {
            List<SubsSignatures> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, SubsSignatures.class,
                        new DaoUtils.ChildrenFilter<>("subsDetails", subsDetails, subsSignatureses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_subsSignatures -> subsSignaturesService.delete(_subsSignatures));
            subsDetails.setSubsSignatureses(subsSignatureses);
        }

        return subsDetails;
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public SubsDetails delete(Integer subsdetailsId) {
        LOGGER.debug("Deleting SubsDetails with id: {}", subsdetailsId);
        SubsDetails deleted = this.wmGenericDao.findById(subsdetailsId);
        if (deleted == null) {
            LOGGER.debug("No SubsDetails found with id: {}", subsdetailsId);
            throw new EntityNotFoundException(String.valueOf(subsdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public void delete(SubsDetails subsDetails) {
        LOGGER.debug("Deleting SubsDetails with {}", subsDetails);
        this.wmGenericDao.delete(subsDetails);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<SubsDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubsDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubsDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table SubsDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubmissionActivityStatus> findAssociatedSubmissionActivityStatuses(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated submissionActivityStatuses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return submissionActivityStatusService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<SubsSignatures> findAssociatedSubsSignatureses(Integer submissionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated subsSignatureses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subsDetails.submissionId = '" + submissionId + "'");

        return subsSignaturesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubsSignaturesService instance
	 */
	protected void setSubsSignaturesService(SubsSignaturesService service) {
        this.subsSignaturesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubmissionActivityStatusService instance
	 */
	protected void setSubmissionActivityStatusService(SubmissionActivityStatusService service) {
        this.submissionActivityStatusService = service;
    }

}

