/*Copyright (c) 2016-2017 performance-contractors.com All Rights Reserved.
 This software is the confidential and proprietary information of performance-contractors.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with performance-contractors.com*/
package com.psabackoffice.job1111.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.psabackoffice.job1111.LandingTrackerSteel;


/**
 * ServiceImpl object for domain model class LandingTrackerSteel.
 *
 * @see LandingTrackerSteel
 */
@Service("Job1111.LandingTrackerSteelService")
@Validated
public class LandingTrackerSteelServiceImpl implements LandingTrackerSteelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LandingTrackerSteelServiceImpl.class);


    @Autowired
    @Qualifier("Job1111.LandingTrackerSteelDao")
    private WMGenericDao<LandingTrackerSteel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LandingTrackerSteel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Job1111TransactionManager")
    @Override
	public LandingTrackerSteel create(LandingTrackerSteel landingTrackerSteel) {
        LOGGER.debug("Creating a new LandingTrackerSteel with information: {}", landingTrackerSteel);

        LandingTrackerSteel landingTrackerSteelCreated = this.wmGenericDao.create(landingTrackerSteel);
        return landingTrackerSteelCreated;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public LandingTrackerSteel getById(Integer landingtrackersteelId) throws EntityNotFoundException {
        LOGGER.debug("Finding LandingTrackerSteel by id: {}", landingtrackersteelId);
        LandingTrackerSteel landingTrackerSteel = this.wmGenericDao.findById(landingtrackersteelId);
        if (landingTrackerSteel == null){
            LOGGER.debug("No LandingTrackerSteel found with id: {}", landingtrackersteelId);
            throw new EntityNotFoundException(String.valueOf(landingtrackersteelId));
        }
        return landingTrackerSteel;
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public LandingTrackerSteel findById(Integer landingtrackersteelId) {
        LOGGER.debug("Finding LandingTrackerSteel by id: {}", landingtrackersteelId);
        return this.wmGenericDao.findById(landingtrackersteelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Job1111TransactionManager")
	@Override
	public LandingTrackerSteel update(LandingTrackerSteel landingTrackerSteel) throws EntityNotFoundException {
        LOGGER.debug("Updating LandingTrackerSteel with information: {}", landingTrackerSteel);
        this.wmGenericDao.update(landingTrackerSteel);

        Integer landingtrackersteelId = landingTrackerSteel.getUid();

        return this.wmGenericDao.findById(landingtrackersteelId);
    }

    @Transactional(value = "Job1111TransactionManager")
	@Override
	public LandingTrackerSteel delete(Integer landingtrackersteelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LandingTrackerSteel with id: {}", landingtrackersteelId);
        LandingTrackerSteel deleted = this.wmGenericDao.findById(landingtrackersteelId);
        if (deleted == null) {
            LOGGER.debug("No LandingTrackerSteel found with id: {}", landingtrackersteelId);
            throw new EntityNotFoundException(String.valueOf(landingtrackersteelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public Page<LandingTrackerSteel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LandingTrackerSteels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Page<LandingTrackerSteel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LandingTrackerSteels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Job1111 for table LandingTrackerSteel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Job1111TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

